{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Shoulder Angle Estimatiion with Soft Sensing Shirt\n",
    "**AC209a Final Project**<br/>\n",
    "**Fall 2018**<br/>\n",
    "**Group # 50:** Dabin Choe, Yichu Jin, Evelyn Park"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/anaconda3/lib/python3.6/site-packages/h5py/__init__.py:36: FutureWarning: Conversion of the second argument of issubdtype from `float` to `np.floating` is deprecated. In future, it will be treated as `np.float64 == np.dtype(float).type`.\n",
      "  from ._conv import register_converters as _register_converters\n",
      "Using TensorFlow backend.\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import math\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "sns.set(style=\"darkgrid\")\n",
    "from pandas.plotting import scatter_matrix\n",
    "\n",
    "from sklearn import preprocessing\n",
    "from sklearn.preprocessing import PolynomialFeatures\n",
    "from sklearn.decomposition import PCA\n",
    "\n",
    "from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error\n",
    "from sklearn.model_selection import cross_val_score, train_test_split, KFold\n",
    "\n",
    "from sklearn.neighbors import KNeighborsRegressor\n",
    "from sklearn.linear_model import LinearRegression, Ridge, Lasso, ElasticNet, RidgeCV, LassoCV, ElasticNetCV\n",
    "from sklearn.tree import DecisionTreeRegressor\n",
    "from sklearn.ensemble import RandomForestRegressor, AdaBoostRegressor\n",
    "\n",
    "import keras \n",
    "from keras.models import Sequential\n",
    "from keras.layers import Dense, Activation, Dropout, Flatten, Reshape\n",
    "from keras.optimizers import SGD\n",
    "\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "#plt.style.use('ac209a.mplstyle')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# **EDA**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "names = ['Asa','Ci','Con','M1','M2','Siv']\n",
    "tests = ['A','B','C']\n",
    "dfs = [[],[],[],[],[],[]]\n",
    "\n",
    "for ind, name in enumerate(names):\n",
    "    for number in range(1,4):\n",
    "        for test in tests:\n",
    "            file_dir = 'data/' + name + '_t' + str(number) + test + '.txt'\n",
    "            dfs[ind].append(pd.read_csv(file_dir, header=None, names=['time','s1','s2','s3','s4','s5','s6','hf','ab','ir']).drop('time', axis=1))\n",
    "    dfs[ind] = pd.concat(dfs[ind], ignore_index=True)\n",
    "\n",
    "dfs_raw = dfs.copy\n",
    "    \n",
    "asa_df = dfs[0]\n",
    "ci_df = dfs[1]\n",
    "con_df = dfs[2]\n",
    "m1_df = dfs[3]\n",
    "m2_df = dfs[4]\n",
    "siv_df = dfs[5]\n",
    "names = ['asa_df','ci_df','con_df','m1_df','m2_df','siv_df']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**2. Initial EDA**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "def var_compare(var_name):\n",
    "    var_mat = np.zeros([len(dfs),7])\n",
    "    for ind in range(len(dfs)):\n",
    "        var_mat[ind,0] = np.mean(dfs[ind][var_name])\n",
    "        var_mat[ind,1] = np.std(dfs[ind][var_name])\n",
    "        var_mat[ind,2] = np.min(dfs[ind][var_name])\n",
    "        var_mat[ind,3] = np.percentile(dfs[ind][var_name], 25)\n",
    "        var_mat[ind,4] = np.percentile(dfs[ind][var_name], 50)\n",
    "        var_mat[ind,5] = np.percentile(dfs[ind][var_name], 75)\n",
    "        var_mat[ind,6] = np.max(dfs[ind][var_name])\n",
    "    return pd.DataFrame(var_mat, columns=['mean','std','min','25%','50%','75%','max'], index=names)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       asa_df   ci_df  con_df   m1_df   m2_df  siv_df\n",
      "count   80137  102941   91690  118276  100600  108239\n",
      "\n",
      " s1:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>asa_df</th>\n",
       "      <td>216.453118</td>\n",
       "      <td>6.239034</td>\n",
       "      <td>203.24</td>\n",
       "      <td>210.93</td>\n",
       "      <td>216.24</td>\n",
       "      <td>220.73</td>\n",
       "      <td>237.62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ci_df</th>\n",
       "      <td>214.748131</td>\n",
       "      <td>6.016105</td>\n",
       "      <td>203.06</td>\n",
       "      <td>210.09</td>\n",
       "      <td>214.19</td>\n",
       "      <td>217.84</td>\n",
       "      <td>240.58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>con_df</th>\n",
       "      <td>216.213892</td>\n",
       "      <td>6.831680</td>\n",
       "      <td>156.15</td>\n",
       "      <td>211.58</td>\n",
       "      <td>215.98</td>\n",
       "      <td>220.07</td>\n",
       "      <td>243.90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>m1_df</th>\n",
       "      <td>218.049379</td>\n",
       "      <td>8.014971</td>\n",
       "      <td>190.36</td>\n",
       "      <td>211.49</td>\n",
       "      <td>217.04</td>\n",
       "      <td>222.76</td>\n",
       "      <td>245.77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>m2_df</th>\n",
       "      <td>216.742890</td>\n",
       "      <td>7.291396</td>\n",
       "      <td>203.20</td>\n",
       "      <td>210.41</td>\n",
       "      <td>216.23</td>\n",
       "      <td>221.23</td>\n",
       "      <td>244.24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>siv_df</th>\n",
       "      <td>219.781383</td>\n",
       "      <td>9.665048</td>\n",
       "      <td>202.65</td>\n",
       "      <td>211.74</td>\n",
       "      <td>218.43</td>\n",
       "      <td>225.18</td>\n",
       "      <td>258.16</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              mean       std     min     25%     50%     75%     max\n",
       "asa_df  216.453118  6.239034  203.24  210.93  216.24  220.73  237.62\n",
       "ci_df   214.748131  6.016105  203.06  210.09  214.19  217.84  240.58\n",
       "con_df  216.213892  6.831680  156.15  211.58  215.98  220.07  243.90\n",
       "m1_df   218.049379  8.014971  190.36  211.49  217.04  222.76  245.77\n",
       "m2_df   216.742890  7.291396  203.20  210.41  216.23  221.23  244.24\n",
       "siv_df  219.781383  9.665048  202.65  211.74  218.43  225.18  258.16"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " s2:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>asa_df</th>\n",
       "      <td>181.811781</td>\n",
       "      <td>6.299439</td>\n",
       "      <td>119.27</td>\n",
       "      <td>180.01</td>\n",
       "      <td>182.14</td>\n",
       "      <td>185.15</td>\n",
       "      <td>194.51</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ci_df</th>\n",
       "      <td>182.766706</td>\n",
       "      <td>3.009062</td>\n",
       "      <td>172.56</td>\n",
       "      <td>180.53</td>\n",
       "      <td>182.59</td>\n",
       "      <td>184.47</td>\n",
       "      <td>193.93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>con_df</th>\n",
       "      <td>182.810786</td>\n",
       "      <td>2.588059</td>\n",
       "      <td>169.67</td>\n",
       "      <td>180.87</td>\n",
       "      <td>182.83</td>\n",
       "      <td>184.52</td>\n",
       "      <td>190.93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>m1_df</th>\n",
       "      <td>183.768007</td>\n",
       "      <td>3.430592</td>\n",
       "      <td>176.98</td>\n",
       "      <td>180.90</td>\n",
       "      <td>183.21</td>\n",
       "      <td>186.19</td>\n",
       "      <td>195.52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>m2_df</th>\n",
       "      <td>182.921446</td>\n",
       "      <td>3.134943</td>\n",
       "      <td>175.95</td>\n",
       "      <td>180.22</td>\n",
       "      <td>182.54</td>\n",
       "      <td>185.31</td>\n",
       "      <td>193.66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>siv_df</th>\n",
       "      <td>186.055229</td>\n",
       "      <td>4.270330</td>\n",
       "      <td>177.69</td>\n",
       "      <td>182.42</td>\n",
       "      <td>185.54</td>\n",
       "      <td>189.24</td>\n",
       "      <td>198.78</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              mean       std     min     25%     50%     75%     max\n",
       "asa_df  181.811781  6.299439  119.27  180.01  182.14  185.15  194.51\n",
       "ci_df   182.766706  3.009062  172.56  180.53  182.59  184.47  193.93\n",
       "con_df  182.810786  2.588059  169.67  180.87  182.83  184.52  190.93\n",
       "m1_df   183.768007  3.430592  176.98  180.90  183.21  186.19  195.52\n",
       "m2_df   182.921446  3.134943  175.95  180.22  182.54  185.31  193.66\n",
       "siv_df  186.055229  4.270330  177.69  182.42  185.54  189.24  198.78"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " s3:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>asa_df</th>\n",
       "      <td>217.197279</td>\n",
       "      <td>4.172028</td>\n",
       "      <td>199.20</td>\n",
       "      <td>214.34</td>\n",
       "      <td>216.30</td>\n",
       "      <td>219.37</td>\n",
       "      <td>231.39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ci_df</th>\n",
       "      <td>222.232375</td>\n",
       "      <td>7.938231</td>\n",
       "      <td>207.38</td>\n",
       "      <td>215.88</td>\n",
       "      <td>220.36</td>\n",
       "      <td>227.86</td>\n",
       "      <td>246.38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>con_df</th>\n",
       "      <td>224.143997</td>\n",
       "      <td>7.212742</td>\n",
       "      <td>211.59</td>\n",
       "      <td>218.35</td>\n",
       "      <td>222.15</td>\n",
       "      <td>228.80</td>\n",
       "      <td>247.67</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>m1_df</th>\n",
       "      <td>222.187435</td>\n",
       "      <td>6.188347</td>\n",
       "      <td>210.01</td>\n",
       "      <td>217.17</td>\n",
       "      <td>220.85</td>\n",
       "      <td>227.52</td>\n",
       "      <td>241.44</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>m2_df</th>\n",
       "      <td>222.309351</td>\n",
       "      <td>6.239305</td>\n",
       "      <td>210.55</td>\n",
       "      <td>217.16</td>\n",
       "      <td>221.48</td>\n",
       "      <td>226.78</td>\n",
       "      <td>242.08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>siv_df</th>\n",
       "      <td>230.754189</td>\n",
       "      <td>10.365366</td>\n",
       "      <td>213.18</td>\n",
       "      <td>221.70</td>\n",
       "      <td>228.57</td>\n",
       "      <td>239.46</td>\n",
       "      <td>258.99</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              mean        std     min     25%     50%     75%     max\n",
       "asa_df  217.197279   4.172028  199.20  214.34  216.30  219.37  231.39\n",
       "ci_df   222.232375   7.938231  207.38  215.88  220.36  227.86  246.38\n",
       "con_df  224.143997   7.212742  211.59  218.35  222.15  228.80  247.67\n",
       "m1_df   222.187435   6.188347  210.01  217.17  220.85  227.52  241.44\n",
       "m2_df   222.309351   6.239305  210.55  217.16  221.48  226.78  242.08\n",
       "siv_df  230.754189  10.365366  213.18  221.70  228.57  239.46  258.99"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " s4:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>asa_df</th>\n",
       "      <td>186.626416</td>\n",
       "      <td>10.364296</td>\n",
       "      <td>152.70</td>\n",
       "      <td>178.34</td>\n",
       "      <td>184.590</td>\n",
       "      <td>193.55</td>\n",
       "      <td>220.62</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ci_df</th>\n",
       "      <td>195.047368</td>\n",
       "      <td>13.932285</td>\n",
       "      <td>162.86</td>\n",
       "      <td>183.13</td>\n",
       "      <td>192.770</td>\n",
       "      <td>206.63</td>\n",
       "      <td>235.38</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>con_df</th>\n",
       "      <td>193.137100</td>\n",
       "      <td>12.331818</td>\n",
       "      <td>165.75</td>\n",
       "      <td>182.84</td>\n",
       "      <td>191.130</td>\n",
       "      <td>203.23</td>\n",
       "      <td>223.15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>m1_df</th>\n",
       "      <td>191.664900</td>\n",
       "      <td>11.441699</td>\n",
       "      <td>172.83</td>\n",
       "      <td>180.99</td>\n",
       "      <td>189.820</td>\n",
       "      <td>201.24</td>\n",
       "      <td>221.09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>m2_df</th>\n",
       "      <td>188.601743</td>\n",
       "      <td>11.171071</td>\n",
       "      <td>169.04</td>\n",
       "      <td>178.99</td>\n",
       "      <td>185.375</td>\n",
       "      <td>198.17</td>\n",
       "      <td>218.55</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>siv_df</th>\n",
       "      <td>203.481896</td>\n",
       "      <td>14.670705</td>\n",
       "      <td>173.81</td>\n",
       "      <td>191.31</td>\n",
       "      <td>202.600</td>\n",
       "      <td>216.19</td>\n",
       "      <td>234.76</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              mean        std     min     25%      50%     75%     max\n",
       "asa_df  186.626416  10.364296  152.70  178.34  184.590  193.55  220.62\n",
       "ci_df   195.047368  13.932285  162.86  183.13  192.770  206.63  235.38\n",
       "con_df  193.137100  12.331818  165.75  182.84  191.130  203.23  223.15\n",
       "m1_df   191.664900  11.441699  172.83  180.99  189.820  201.24  221.09\n",
       "m2_df   188.601743  11.171071  169.04  178.99  185.375  198.17  218.55\n",
       "siv_df  203.481896  14.670705  173.81  191.31  202.600  216.19  234.76"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " s5:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>asa_df</th>\n",
       "      <td>145.766018</td>\n",
       "      <td>4.339345</td>\n",
       "      <td>136.78</td>\n",
       "      <td>142.27</td>\n",
       "      <td>145.29</td>\n",
       "      <td>148.31</td>\n",
       "      <td>162.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ci_df</th>\n",
       "      <td>148.061024</td>\n",
       "      <td>5.741397</td>\n",
       "      <td>135.50</td>\n",
       "      <td>143.84</td>\n",
       "      <td>147.73</td>\n",
       "      <td>151.31</td>\n",
       "      <td>180.03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>con_df</th>\n",
       "      <td>147.869341</td>\n",
       "      <td>5.451739</td>\n",
       "      <td>117.27</td>\n",
       "      <td>143.62</td>\n",
       "      <td>147.60</td>\n",
       "      <td>151.44</td>\n",
       "      <td>173.56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>m1_df</th>\n",
       "      <td>148.174883</td>\n",
       "      <td>6.147763</td>\n",
       "      <td>136.43</td>\n",
       "      <td>142.83</td>\n",
       "      <td>147.45</td>\n",
       "      <td>152.73</td>\n",
       "      <td>172.60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>m2_df</th>\n",
       "      <td>146.306227</td>\n",
       "      <td>5.225233</td>\n",
       "      <td>136.11</td>\n",
       "      <td>141.68</td>\n",
       "      <td>145.53</td>\n",
       "      <td>150.34</td>\n",
       "      <td>167.97</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>siv_df</th>\n",
       "      <td>151.058995</td>\n",
       "      <td>6.929840</td>\n",
       "      <td>137.73</td>\n",
       "      <td>145.77</td>\n",
       "      <td>150.16</td>\n",
       "      <td>154.68</td>\n",
       "      <td>178.40</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              mean       std     min     25%     50%     75%     max\n",
       "asa_df  145.766018  4.339345  136.78  142.27  145.29  148.31  162.06\n",
       "ci_df   148.061024  5.741397  135.50  143.84  147.73  151.31  180.03\n",
       "con_df  147.869341  5.451739  117.27  143.62  147.60  151.44  173.56\n",
       "m1_df   148.174883  6.147763  136.43  142.83  147.45  152.73  172.60\n",
       "m2_df   146.306227  5.225233  136.11  141.68  145.53  150.34  167.97\n",
       "siv_df  151.058995  6.929840  137.73  145.77  150.16  154.68  178.40"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " s6:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>asa_df</th>\n",
       "      <td>175.320695</td>\n",
       "      <td>9.017434</td>\n",
       "      <td>159.95</td>\n",
       "      <td>167.61</td>\n",
       "      <td>173.70</td>\n",
       "      <td>181.34</td>\n",
       "      <td>206.84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ci_df</th>\n",
       "      <td>172.470513</td>\n",
       "      <td>7.767930</td>\n",
       "      <td>158.77</td>\n",
       "      <td>166.85</td>\n",
       "      <td>170.50</td>\n",
       "      <td>176.24</td>\n",
       "      <td>207.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>con_df</th>\n",
       "      <td>175.647503</td>\n",
       "      <td>8.827730</td>\n",
       "      <td>160.86</td>\n",
       "      <td>168.48</td>\n",
       "      <td>173.32</td>\n",
       "      <td>181.42</td>\n",
       "      <td>212.90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>m1_df</th>\n",
       "      <td>175.840283</td>\n",
       "      <td>11.274954</td>\n",
       "      <td>157.20</td>\n",
       "      <td>167.38</td>\n",
       "      <td>172.24</td>\n",
       "      <td>181.86</td>\n",
       "      <td>223.18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>m2_df</th>\n",
       "      <td>174.262837</td>\n",
       "      <td>8.941325</td>\n",
       "      <td>157.59</td>\n",
       "      <td>167.37</td>\n",
       "      <td>171.58</td>\n",
       "      <td>179.77</td>\n",
       "      <td>207.93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>siv_df</th>\n",
       "      <td>176.105028</td>\n",
       "      <td>10.319164</td>\n",
       "      <td>158.36</td>\n",
       "      <td>168.15</td>\n",
       "      <td>172.95</td>\n",
       "      <td>182.53</td>\n",
       "      <td>214.83</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              mean        std     min     25%     50%     75%     max\n",
       "asa_df  175.320695   9.017434  159.95  167.61  173.70  181.34  206.84\n",
       "ci_df   172.470513   7.767930  158.77  166.85  170.50  176.24  207.06\n",
       "con_df  175.647503   8.827730  160.86  168.48  173.32  181.42  212.90\n",
       "m1_df   175.840283  11.274954  157.20  167.38  172.24  181.86  223.18\n",
       "m2_df   174.262837   8.941325  157.59  167.37  171.58  179.77  207.93\n",
       "siv_df  176.105028  10.319164  158.36  168.15  172.95  182.53  214.83"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " hf:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>asa_df</th>\n",
       "      <td>32.545376</td>\n",
       "      <td>38.748847</td>\n",
       "      <td>-75.579</td>\n",
       "      <td>9.027300</td>\n",
       "      <td>28.07400</td>\n",
       "      <td>58.55200</td>\n",
       "      <td>128.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ci_df</th>\n",
       "      <td>29.163947</td>\n",
       "      <td>39.953221</td>\n",
       "      <td>-77.569</td>\n",
       "      <td>4.643700</td>\n",
       "      <td>26.00500</td>\n",
       "      <td>61.66500</td>\n",
       "      <td>124.93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>con_df</th>\n",
       "      <td>19.301546</td>\n",
       "      <td>43.257538</td>\n",
       "      <td>-90.057</td>\n",
       "      <td>-5.171975</td>\n",
       "      <td>16.27400</td>\n",
       "      <td>49.70425</td>\n",
       "      <td>124.78</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>m1_df</th>\n",
       "      <td>17.639829</td>\n",
       "      <td>39.666957</td>\n",
       "      <td>-63.980</td>\n",
       "      <td>-10.905000</td>\n",
       "      <td>9.98085</td>\n",
       "      <td>50.54550</td>\n",
       "      <td>113.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>m2_df</th>\n",
       "      <td>26.203491</td>\n",
       "      <td>35.223921</td>\n",
       "      <td>-61.287</td>\n",
       "      <td>2.313050</td>\n",
       "      <td>20.69900</td>\n",
       "      <td>53.57900</td>\n",
       "      <td>115.36</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>siv_df</th>\n",
       "      <td>19.835779</td>\n",
       "      <td>40.416916</td>\n",
       "      <td>-72.840</td>\n",
       "      <td>-3.874300</td>\n",
       "      <td>15.52900</td>\n",
       "      <td>49.31550</td>\n",
       "      <td>113.44</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             mean        std     min        25%       50%       75%     max\n",
       "asa_df  32.545376  38.748847 -75.579   9.027300  28.07400  58.55200  128.04\n",
       "ci_df   29.163947  39.953221 -77.569   4.643700  26.00500  61.66500  124.93\n",
       "con_df  19.301546  43.257538 -90.057  -5.171975  16.27400  49.70425  124.78\n",
       "m1_df   17.639829  39.666957 -63.980 -10.905000   9.98085  50.54550  113.70\n",
       "m2_df   26.203491  35.223921 -61.287   2.313050  20.69900  53.57900  115.36\n",
       "siv_df  19.835779  40.416916 -72.840  -3.874300  15.52900  49.31550  113.44"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " ab:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>asa_df</th>\n",
       "      <td>73.731374</td>\n",
       "      <td>38.576321</td>\n",
       "      <td>9.3183</td>\n",
       "      <td>35.39300</td>\n",
       "      <td>80.0010</td>\n",
       "      <td>100.430</td>\n",
       "      <td>160.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ci_df</th>\n",
       "      <td>69.632838</td>\n",
       "      <td>35.892221</td>\n",
       "      <td>6.4550</td>\n",
       "      <td>36.18200</td>\n",
       "      <td>74.2910</td>\n",
       "      <td>94.376</td>\n",
       "      <td>149.46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>con_df</th>\n",
       "      <td>66.346464</td>\n",
       "      <td>37.218989</td>\n",
       "      <td>6.9891</td>\n",
       "      <td>27.94825</td>\n",
       "      <td>70.0445</td>\n",
       "      <td>93.160</td>\n",
       "      <td>147.29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>m1_df</th>\n",
       "      <td>72.143624</td>\n",
       "      <td>40.578066</td>\n",
       "      <td>9.4489</td>\n",
       "      <td>33.01675</td>\n",
       "      <td>75.7355</td>\n",
       "      <td>97.003</td>\n",
       "      <td>163.76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>m2_df</th>\n",
       "      <td>74.409661</td>\n",
       "      <td>40.460662</td>\n",
       "      <td>7.7949</td>\n",
       "      <td>34.17650</td>\n",
       "      <td>80.0440</td>\n",
       "      <td>101.230</td>\n",
       "      <td>165.16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>siv_df</th>\n",
       "      <td>68.990595</td>\n",
       "      <td>30.961030</td>\n",
       "      <td>15.2150</td>\n",
       "      <td>38.79650</td>\n",
       "      <td>73.3790</td>\n",
       "      <td>90.658</td>\n",
       "      <td>143.41</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             mean        std      min       25%      50%      75%     max\n",
       "asa_df  73.731374  38.576321   9.3183  35.39300  80.0010  100.430  160.20\n",
       "ci_df   69.632838  35.892221   6.4550  36.18200  74.2910   94.376  149.46\n",
       "con_df  66.346464  37.218989   6.9891  27.94825  70.0445   93.160  147.29\n",
       "m1_df   72.143624  40.578066   9.4489  33.01675  75.7355   97.003  163.76\n",
       "m2_df   74.409661  40.460662   7.7949  34.17650  80.0440  101.230  165.16\n",
       "siv_df  68.990595  30.961030  15.2150  38.79650  73.3790   90.658  143.41"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      " ir:\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "      <th>min</th>\n",
       "      <th>25%</th>\n",
       "      <th>50%</th>\n",
       "      <th>75%</th>\n",
       "      <th>max</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>asa_df</th>\n",
       "      <td>8.709817</td>\n",
       "      <td>35.953266</td>\n",
       "      <td>-124.340</td>\n",
       "      <td>-12.76100</td>\n",
       "      <td>16.9710</td>\n",
       "      <td>35.83000</td>\n",
       "      <td>70.299</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ci_df</th>\n",
       "      <td>16.076709</td>\n",
       "      <td>30.717534</td>\n",
       "      <td>-101.210</td>\n",
       "      <td>0.74645</td>\n",
       "      <td>27.4360</td>\n",
       "      <td>37.14900</td>\n",
       "      <td>63.597</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>con_df</th>\n",
       "      <td>5.172852</td>\n",
       "      <td>40.947012</td>\n",
       "      <td>-129.720</td>\n",
       "      <td>-25.13375</td>\n",
       "      <td>18.2800</td>\n",
       "      <td>36.60075</td>\n",
       "      <td>81.016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>m1_df</th>\n",
       "      <td>18.635818</td>\n",
       "      <td>40.912169</td>\n",
       "      <td>-96.361</td>\n",
       "      <td>-16.18100</td>\n",
       "      <td>31.5395</td>\n",
       "      <td>48.84500</td>\n",
       "      <td>95.690</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>m2_df</th>\n",
       "      <td>8.294361</td>\n",
       "      <td>30.175750</td>\n",
       "      <td>-98.165</td>\n",
       "      <td>-11.47500</td>\n",
       "      <td>16.0060</td>\n",
       "      <td>30.22250</td>\n",
       "      <td>74.508</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>siv_df</th>\n",
       "      <td>-7.613668</td>\n",
       "      <td>32.554322</td>\n",
       "      <td>-102.510</td>\n",
       "      <td>-32.26600</td>\n",
       "      <td>4.2735</td>\n",
       "      <td>15.56400</td>\n",
       "      <td>48.393</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             mean        std      min       25%      50%       75%     max\n",
       "asa_df   8.709817  35.953266 -124.340 -12.76100  16.9710  35.83000  70.299\n",
       "ci_df   16.076709  30.717534 -101.210   0.74645  27.4360  37.14900  63.597\n",
       "con_df   5.172852  40.947012 -129.720 -25.13375  18.2800  36.60075  81.016\n",
       "m1_df   18.635818  40.912169  -96.361 -16.18100  31.5395  48.84500  95.690\n",
       "m2_df    8.294361  30.175750  -98.165 -11.47500  16.0060  30.22250  74.508\n",
       "siv_df  -7.613668  32.554322 -102.510 -32.26600   4.2735  15.56400  48.393"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "len_df = []\n",
    "for ind in range(len(dfs)):\n",
    "    len_df.append([len(dfs[ind])])\n",
    "print(pd.DataFrame(np.transpose(len_df), columns=names, index=['count']))\n",
    "\n",
    "for var_name in asa_df.columns:\n",
    "    print('\\n',var_name,end=':\\n')\n",
    "    display(var_compare(var_name))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The above matrices compare all the variables' variations among data taken from different subjects."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "names = ['Asa','Ci','Con','M1','M2','Siv']\n",
    "tests = ['A','B','C']\n",
    "dfs = [[],[],[],[],[],[]]\n",
    "\n",
    "for ind, name in enumerate(names):\n",
    "    for number in range(1,4):\n",
    "        for test in tests:\n",
    "            file_dir = 'data/' + name + '_t' + str(number) + test + '.txt'\n",
    "            dfs[ind].append(pd.read_csv(file_dir, header=None, names=['time','s1','s2','s3','s4','s5','s6','hf','ab','ir']).drop('time', axis=1))\n",
    "    dfs[ind] = pd.concat(dfs[ind], ignore_index=True)\n",
    "\n",
    "dfs_raw = dfs.copy\n",
    "    \n",
    "asa_df = dfs[0]\n",
    "ci_df = dfs[1]\n",
    "con_df = dfs[2]\n",
    "m1_df = dfs[3]\n",
    "m2_df = dfs[4]\n",
    "siv_df = dfs[5]\n",
    "names = ['asa_df','ci_df','con_df','m1_df','m2_df','siv_df']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def box_compare(var_name):\n",
    "    plot_df = pd.concat([df[var_name] for df in dfs], axis=1)\n",
    "    plot_df.columns = ['Sub1','Sub2','Sub3', 'Sub4', 'Sub5', 'Sub6']\n",
    "    ax = sns.boxplot(data=plot_df)       \n",
    "    ax.set_title('Ranges of '+ var_name, fontsize=20)\n",
    "    ax.set_ylabel(var_name, fontsize=20)\n",
    "    ax.tick_params(labelsize=20)\n",
    "    plt.show();\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "for var_name in asa_df.columns:\n",
    "    box_compare(var_name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plt_compare(var_name):\n",
    "    nrows = int(len(dfs)/2)\n",
    "    ncols = 2\n",
    "    fig, axes = plt.subplots(nrows=nrows, ncols=ncols, \n",
    "                             figsize=(4*nrows,4*ncols),\n",
    "                             sharex=True)\n",
    "    for row in range(nrows):\n",
    "        for col in range(ncols):\n",
    "            ind = row*ncols+col\n",
    "            sns.boxplot(x=var_name, data=dfs[ind], ax=axes[row,col])\n",
    "            axes[row,col].set(xlabel=names[ind])\n",
    "            fig.suptitle(var_name, x=0.515, y=0.91, fontsize=18);\n",
    "            fig.subplots_adjust(hspace=0.4)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**3. **"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x864 with 9 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "tests = ['A','B','C']\n",
    "\n",
    "nrows = 3\n",
    "ncols = 3\n",
    "fig, axes = plt.subplots(nrows=nrows, ncols=ncols, figsize=(4*nrows,4*ncols), sharex=True, sharey=True)\n",
    "fig.subplots_adjust(hspace=0.4)\n",
    "\n",
    "title_names = ['Pre-defined', 'Composite', 'Random']\n",
    "\n",
    "for row, trial in enumerate(range(1,4)):\n",
    "    for col, test in enumerate(tests):\n",
    "            file_dir = 'data/Con_t' + str(trial) + test + '.txt'\n",
    "            df = pd.read_csv(file_dir, header=None, usecols=[1,2,3,4,5,6,7,8,9], \n",
    "                                 names=['s1','s2','s3','s4','s5','s6','hf','ab','ir'])\n",
    "            axes[row,col].plot(df.hf, df.ab)\n",
    "            axes[row,col].set_xlabel('Horizontal Flexion')\n",
    "            axes[row,col].set_ylabel('Abduction');\n",
    "            #axes[row,col].set_title(file_dir);\n",
    "            axes[row,col].set_title('Trial ' + str(row+1) + ': ' + title_names[col] + ' Motions');\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from mpl_toolkits import mplot3d\n",
    "ax = plt.axes(projection='3d')\n",
    "file_dir = 'data/M1_t3C.txt'\n",
    "df = pd.read_csv(file_dir, header=None, names=['t','s1','s2','s3','s4','s5','s6','hf','ab','ir'])\n",
    "ax.plot3D(df.t,df.ab,df.hf);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "#scatter_matrix(m1_df, alpha=0.5, figsize=(25,20));"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**4. Using single data set**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 2160x720 with 6 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.style.use('ac209a.mplstyle')\n",
    "\n",
    "file_dir = 'data/M1_t1A.txt'\n",
    "df = pd.read_csv(file_dir, header=None, names=['t','s1','s2','s3','s4','s5','s6','hf','ab','ir'])\n",
    "\n",
    "fig, ax = plt.subplots(3, 2, figsize=(30,10), sharex='col')\n",
    "\n",
    "ax[0,0].plot(df.t, df.s1)\n",
    "ax[0,0].set_ylabel('s1')\n",
    "ax[0,1].plot(df.t, df.s2)\n",
    "ax[0,1].set_ylabel('s2')\n",
    "ax[1,0].plot(df.t, df.s3)\n",
    "ax[1,0].set_ylabel('s3')\n",
    "ax[1,1].plot(df.t, df.s4)\n",
    "ax[1,1].set_ylabel('s4')\n",
    "ax[2,0].plot(df.t, df.s5)\n",
    "ax[2,0].set_ylabel('s5')\n",
    "ax[2,0].set_xlabel('Time')\n",
    "ax[2,1].plot(df.t, df.s6)\n",
    "ax[2,1].set_ylabel('s6')\n",
    "ax[2,1].set_xlabel('Time');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*Calculate signal drift*"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# Load data: M1\n",
    "\n",
    "tests = ['A','B','C']\n",
    "appended_data = []\n",
    "count = 0\n",
    "\n",
    "for number in range(1,4):\n",
    "    for test in tests:\n",
    "        file_dir = 'data/M1_t' + str(number) + test + '.txt'\n",
    "        data = pd.read_csv(file_dir, header=None, names=['t','s1','s2','s3','s4','s5','s6','hf','ab','ir'])\n",
    "        appended_data.append(data)\n",
    "        if count > 0:\n",
    "            appended_data[count].t = appended_data[count].t + max(appended_data[count-1].t)\n",
    "        count += 1\n",
    "        \n",
    "df = pd.concat(appended_data, ignore_index=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# Find observations with identical time stamp, \n",
    "sam_t_df = df[df['t'].duplicated(keep=False)]\n",
    "sam_mocap_df = df[df[['hf','ab','ir']].duplicated(keep=False)]\n",
    "sam_sen_df = df[df[['s1','s2','s3','s4','s5','s6']].duplicated(keep=False)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "def func(df):\n",
    "    return np.max(df) - np.min(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "sam_mocap_diff = []\n",
    "\n",
    "for name, group in sam_mocap_df.groupby(['ab','ir','hf']):\n",
    "    sam_mocap_diff.append([func(group.t), \n",
    "                           func(group.s1), func(group.s2), func(group.s3), \n",
    "                           func(group.s4), func(group.s5), func(group.s6)])\n",
    "sam_mocap_diff = pd.DataFrame(sam_mocap_diff, columns=['time_diff','s1_diff','s2_diff',\n",
    "                                                       's3_diff','s4_diff','s5_diff','s6_diff'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>max time_diff</th>\n",
       "      <th>max s1_diff</th>\n",
       "      <th>max s2_diff</th>\n",
       "      <th>max s3_diff</th>\n",
       "      <th>max s4_diff</th>\n",
       "      <th>max s5_diff</th>\n",
       "      <th>max s6_diff</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "      <td>0.01</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   max time_diff  max s1_diff  max s2_diff  max s3_diff  max s4_diff  \\\n",
       "0           0.01         0.01          0.0         0.01         0.01   \n",
       "\n",
       "   max s5_diff  max s6_diff  \n",
       "0         0.01         0.01  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sam_mocap_max_diff = []\n",
    "for col in sam_mocap_diff.columns:\n",
    "    sam_mocap_max_diff.append(np.max(sam_mocap_diff[col]))\n",
    "sam_mocap_max_diff = pd.DataFrame(sam_mocap_max_diff, \n",
    "                                  index=['max time_diff','max s1_diff','max s2_diff',\n",
    "                                         'max s3_diff','max s4_diff','max s5_diff','max s6_diff']).T\n",
    "sam_mocap_max_diff"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>t</th>\n",
       "      <th>s1</th>\n",
       "      <th>s2</th>\n",
       "      <th>s3</th>\n",
       "      <th>s4</th>\n",
       "      <th>s5</th>\n",
       "      <th>s6</th>\n",
       "      <th>hf</th>\n",
       "      <th>ab</th>\n",
       "      <th>ir</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>32248</th>\n",
       "      <td>193.260</td>\n",
       "      <td>211.93</td>\n",
       "      <td>179.47</td>\n",
       "      <td>229.24</td>\n",
       "      <td>210.19</td>\n",
       "      <td>154.54</td>\n",
       "      <td>167.86</td>\n",
       "      <td>-13.934</td>\n",
       "      <td>17.636</td>\n",
       "      <td>-40.091</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32249</th>\n",
       "      <td>193.262</td>\n",
       "      <td>211.93</td>\n",
       "      <td>179.47</td>\n",
       "      <td>229.24</td>\n",
       "      <td>210.19</td>\n",
       "      <td>154.54</td>\n",
       "      <td>167.86</td>\n",
       "      <td>-13.920</td>\n",
       "      <td>17.638</td>\n",
       "      <td>-40.081</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32250</th>\n",
       "      <td>193.270</td>\n",
       "      <td>211.93</td>\n",
       "      <td>179.47</td>\n",
       "      <td>229.24</td>\n",
       "      <td>210.19</td>\n",
       "      <td>154.54</td>\n",
       "      <td>167.86</td>\n",
       "      <td>-13.867</td>\n",
       "      <td>17.644</td>\n",
       "      <td>-40.046</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32251</th>\n",
       "      <td>193.278</td>\n",
       "      <td>211.93</td>\n",
       "      <td>179.47</td>\n",
       "      <td>229.24</td>\n",
       "      <td>210.19</td>\n",
       "      <td>154.54</td>\n",
       "      <td>167.86</td>\n",
       "      <td>-13.832</td>\n",
       "      <td>17.648</td>\n",
       "      <td>-40.026</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32252</th>\n",
       "      <td>193.281</td>\n",
       "      <td>211.93</td>\n",
       "      <td>179.47</td>\n",
       "      <td>229.24</td>\n",
       "      <td>210.19</td>\n",
       "      <td>154.54</td>\n",
       "      <td>167.86</td>\n",
       "      <td>-13.825</td>\n",
       "      <td>17.649</td>\n",
       "      <td>-40.024</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32253</th>\n",
       "      <td>193.287</td>\n",
       "      <td>211.93</td>\n",
       "      <td>179.47</td>\n",
       "      <td>229.24</td>\n",
       "      <td>210.19</td>\n",
       "      <td>154.54</td>\n",
       "      <td>167.86</td>\n",
       "      <td>-13.812</td>\n",
       "      <td>17.652</td>\n",
       "      <td>-40.018</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32254</th>\n",
       "      <td>193.295</td>\n",
       "      <td>211.93</td>\n",
       "      <td>179.47</td>\n",
       "      <td>229.24</td>\n",
       "      <td>210.19</td>\n",
       "      <td>154.54</td>\n",
       "      <td>167.86</td>\n",
       "      <td>-13.807</td>\n",
       "      <td>17.655</td>\n",
       "      <td>-40.022</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32255</th>\n",
       "      <td>193.302</td>\n",
       "      <td>211.93</td>\n",
       "      <td>179.47</td>\n",
       "      <td>229.24</td>\n",
       "      <td>210.19</td>\n",
       "      <td>154.54</td>\n",
       "      <td>167.86</td>\n",
       "      <td>-13.811</td>\n",
       "      <td>17.660</td>\n",
       "      <td>-40.031</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32256</th>\n",
       "      <td>193.303</td>\n",
       "      <td>211.93</td>\n",
       "      <td>179.47</td>\n",
       "      <td>229.24</td>\n",
       "      <td>210.19</td>\n",
       "      <td>154.54</td>\n",
       "      <td>167.86</td>\n",
       "      <td>-13.812</td>\n",
       "      <td>17.661</td>\n",
       "      <td>-40.033</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32257</th>\n",
       "      <td>193.312</td>\n",
       "      <td>211.93</td>\n",
       "      <td>179.47</td>\n",
       "      <td>229.24</td>\n",
       "      <td>210.19</td>\n",
       "      <td>154.54</td>\n",
       "      <td>167.86</td>\n",
       "      <td>-13.827</td>\n",
       "      <td>17.668</td>\n",
       "      <td>-40.052</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32258</th>\n",
       "      <td>193.320</td>\n",
       "      <td>211.93</td>\n",
       "      <td>179.47</td>\n",
       "      <td>229.24</td>\n",
       "      <td>210.19</td>\n",
       "      <td>154.54</td>\n",
       "      <td>167.86</td>\n",
       "      <td>-13.846</td>\n",
       "      <td>17.677</td>\n",
       "      <td>-40.078</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32259</th>\n",
       "      <td>193.323</td>\n",
       "      <td>211.93</td>\n",
       "      <td>179.47</td>\n",
       "      <td>229.24</td>\n",
       "      <td>210.19</td>\n",
       "      <td>154.54</td>\n",
       "      <td>167.86</td>\n",
       "      <td>-13.854</td>\n",
       "      <td>17.681</td>\n",
       "      <td>-40.089</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32260</th>\n",
       "      <td>193.328</td>\n",
       "      <td>211.93</td>\n",
       "      <td>179.47</td>\n",
       "      <td>229.24</td>\n",
       "      <td>210.19</td>\n",
       "      <td>154.54</td>\n",
       "      <td>167.86</td>\n",
       "      <td>-13.867</td>\n",
       "      <td>17.687</td>\n",
       "      <td>-40.107</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32261</th>\n",
       "      <td>193.337</td>\n",
       "      <td>211.93</td>\n",
       "      <td>179.47</td>\n",
       "      <td>229.24</td>\n",
       "      <td>210.19</td>\n",
       "      <td>154.54</td>\n",
       "      <td>167.86</td>\n",
       "      <td>-13.881</td>\n",
       "      <td>17.701</td>\n",
       "      <td>-40.132</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32262</th>\n",
       "      <td>193.344</td>\n",
       "      <td>211.93</td>\n",
       "      <td>179.47</td>\n",
       "      <td>229.24</td>\n",
       "      <td>210.19</td>\n",
       "      <td>154.54</td>\n",
       "      <td>167.86</td>\n",
       "      <td>-13.886</td>\n",
       "      <td>17.715</td>\n",
       "      <td>-40.150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32263</th>\n",
       "      <td>193.345</td>\n",
       "      <td>211.93</td>\n",
       "      <td>179.47</td>\n",
       "      <td>229.24</td>\n",
       "      <td>210.19</td>\n",
       "      <td>154.54</td>\n",
       "      <td>167.86</td>\n",
       "      <td>-13.887</td>\n",
       "      <td>17.717</td>\n",
       "      <td>-40.152</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32264</th>\n",
       "      <td>193.353</td>\n",
       "      <td>211.93</td>\n",
       "      <td>179.47</td>\n",
       "      <td>229.24</td>\n",
       "      <td>210.19</td>\n",
       "      <td>154.54</td>\n",
       "      <td>167.86</td>\n",
       "      <td>-13.889</td>\n",
       "      <td>17.734</td>\n",
       "      <td>-40.169</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             t      s1      s2      s3      s4      s5      s6      hf  \\\n",
       "32248  193.260  211.93  179.47  229.24  210.19  154.54  167.86 -13.934   \n",
       "32249  193.262  211.93  179.47  229.24  210.19  154.54  167.86 -13.920   \n",
       "32250  193.270  211.93  179.47  229.24  210.19  154.54  167.86 -13.867   \n",
       "32251  193.278  211.93  179.47  229.24  210.19  154.54  167.86 -13.832   \n",
       "32252  193.281  211.93  179.47  229.24  210.19  154.54  167.86 -13.825   \n",
       "32253  193.287  211.93  179.47  229.24  210.19  154.54  167.86 -13.812   \n",
       "32254  193.295  211.93  179.47  229.24  210.19  154.54  167.86 -13.807   \n",
       "32255  193.302  211.93  179.47  229.24  210.19  154.54  167.86 -13.811   \n",
       "32256  193.303  211.93  179.47  229.24  210.19  154.54  167.86 -13.812   \n",
       "32257  193.312  211.93  179.47  229.24  210.19  154.54  167.86 -13.827   \n",
       "32258  193.320  211.93  179.47  229.24  210.19  154.54  167.86 -13.846   \n",
       "32259  193.323  211.93  179.47  229.24  210.19  154.54  167.86 -13.854   \n",
       "32260  193.328  211.93  179.47  229.24  210.19  154.54  167.86 -13.867   \n",
       "32261  193.337  211.93  179.47  229.24  210.19  154.54  167.86 -13.881   \n",
       "32262  193.344  211.93  179.47  229.24  210.19  154.54  167.86 -13.886   \n",
       "32263  193.345  211.93  179.47  229.24  210.19  154.54  167.86 -13.887   \n",
       "32264  193.353  211.93  179.47  229.24  210.19  154.54  167.86 -13.889   \n",
       "\n",
       "           ab      ir  \n",
       "32248  17.636 -40.091  \n",
       "32249  17.638 -40.081  \n",
       "32250  17.644 -40.046  \n",
       "32251  17.648 -40.026  \n",
       "32252  17.649 -40.024  \n",
       "32253  17.652 -40.018  \n",
       "32254  17.655 -40.022  \n",
       "32255  17.660 -40.031  \n",
       "32256  17.661 -40.033  \n",
       "32257  17.668 -40.052  \n",
       "32258  17.677 -40.078  \n",
       "32259  17.681 -40.089  \n",
       "32260  17.687 -40.107  \n",
       "32261  17.701 -40.132  \n",
       "32262  17.715 -40.150  \n",
       "32263  17.717 -40.152  \n",
       "32264  17.734 -40.169  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sam_sen_diff = []\n",
    "count = 0\n",
    "for name, group in sam_sen_df.groupby(['s1','s2','s3','s4','s5','s6']):\n",
    "    count += 1\n",
    "    if count == 871:\n",
    "        display(group)\n",
    "    sam_sen_diff.append([count, func(group.t), func(group.ab), func(group.hf), func(group.ir)])\n",
    "sam_sen_diff = pd.DataFrame(sam_sen_diff, columns=['count','time_diff','ab_diff','hf_diff','ir_diff'])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "871.0"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sam_sen_diff.iloc[sam_sen_diff.time_diff.idxmax]['count']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>max time_diff</th>\n",
       "      <th>max ab_diff</th>\n",
       "      <th>max hf_diff</th>\n",
       "      <th>max ir_diff</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.093</td>\n",
       "      <td>1.45</td>\n",
       "      <td>3.5004</td>\n",
       "      <td>3.489</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   max time_diff  max ab_diff  max hf_diff  max ir_diff\n",
       "0          0.093         1.45       3.5004        3.489"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sam_sen_max_diff = []\n",
    "for col in sam_sen_diff.columns:\n",
    "    if col != 'count':\n",
    "        sam_sen_max_diff.append(np.max(sam_sen_diff[col]))\n",
    "sam_sen_max_diff = pd.DataFrame(sam_sen_max_diff, \n",
    "                                index=['max time_diff','max ab_diff',\n",
    "                                       'max hf_diff','max ir_diff']).T\n",
    "sam_sen_max_diff"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "#df[(df['t'] > 235.35) & (df['t'] < 236)]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# **Models**"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**A. Set Up Functions**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.style.use('ac209a.mplstyle')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "def standardize(X, X_ref):\n",
    "    mean = np.mean(X_ref)\n",
    "    std = np.std(X_ref)\n",
    "    return (X-mean)/std"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "def normalize(X, X_ref):\n",
    "    return (X-np.min(X_ref))/(np.max(X_ref)-np.min(X_ref))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "def deriv_1st(df, features):\n",
    "    prev = df.iloc[0:-2]\n",
    "    nxt = df.iloc[2:]\n",
    "    new_features = [f+'_1st' for f in features]\n",
    "    results = pd.DataFrame(nxt[features].values - prev[features].values, columns=new_features)\n",
    "    time_diff = pd.DataFrame(nxt['t'].values-prev['t'].values)\n",
    "    for feature in new_features:\n",
    "        results[feature] = results[[feature]].div(time_diff.values)\n",
    "    return results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "def deriv_2nd(df, features):\n",
    "    prev = df.iloc[0:-2]\n",
    "    now = df.iloc[1:-1]\n",
    "    nxt = df.iloc[2:]\n",
    "    new_features = [f+'_2nd' for f in features]\n",
    "    results = pd.DataFrame(nxt[features].values-2*now[features].values+prev[features].values, columns=new_features)\n",
    "    time_diff = pd.DataFrame((nxt['t'].values-now['t'].values)*(now['t'].values-prev['t'].values))\n",
    "    for feature in new_features:\n",
    "        results[feature] = results[[feature]].div(time_diff.values)\n",
    "    return results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "def prev_values(df, features, num):\n",
    "    for i in range(1, num+1):\n",
    "        new_features = [f+'_prev_'+str(i) for f in features]\n",
    "        prev_df = df[features].shift(i)\n",
    "        prev_df.columns = new_features\n",
    "        df = pd.concat([df, prev_df], axis=1)\n",
    "    return df.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "def add_features(df, features, angs, if_1st_deriv=False, if_2nd_deriv=False, num_prev=0):\n",
    "    if if_1st_deriv: \n",
    "        df_1st_deriv = deriv_1st(df, features)\n",
    "    else:\n",
    "        df_1st_deriv = pd.DataFrame()\n",
    "    if if_2nd_deriv:\n",
    "        df_2nd_deriv = deriv_2nd(df, features)\n",
    "    else:\n",
    "        df_2nd_deriv = pd.DataFrame()\n",
    "    results = pd.concat([pd.DataFrame(df[1:-1].values, columns=df.columns), df_1st_deriv, df_2nd_deriv], axis=1)\n",
    "    results = prev_values(results, features, num_prev).drop('t', axis=1)\n",
    "    return results.drop(columns=angs), results[angs]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "# def load_data(names, nums, tests):\n",
    "#     appended_data = []\n",
    "#     count = 0\n",
    "\n",
    "#     for number in nums:\n",
    "#         for test in tests:\n",
    "#             for name in names:\n",
    "#                 file_dir = 'data/' + name + '_t' + str(number) + test + '.txt'\n",
    "#                 data = pd.read_csv(file_dir, header=None,\n",
    "#                                    names=['t','s1','s2','s3','s4','s5','s6','hf','ab','ir'])\n",
    "#                 print(file_dir)\n",
    "#                 appended_data.append(data)\n",
    "#                 if count > 0:\n",
    "#                     appended_data[count].t = appended_data[count].t + max(appended_data[count-1].t)\n",
    "#                 count += 1\n",
    "#     df = pd.concat(appended_data, ignore_index=True)\n",
    "#     return df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "def load_data(names, nums, tests, features, angs, if_1st_deriv=False, if_2nd_deriv=False, num_prev=0):\n",
    "    X_list = []\n",
    "    y_list = []\n",
    "\n",
    "    for number in nums:\n",
    "        for test in tests:\n",
    "            for name in names:\n",
    "                file_dir = 'data/' + name + '_t' + str(number) + test + '.txt'\n",
    "                data = pd.read_csv(file_dir, header=None,\n",
    "                                   names=['t','s1','s2','s3','s4','s5','s6','hf','ab','ir'])\n",
    "                data = data.iloc[::20]\n",
    "                X_df, y_df = add_features(data, features, angs, if_1st_deriv=if_1st_deriv, if_2nd_deriv=if_2nd_deriv, num_prev=num_prev)\n",
    "                X_list.append(X_df)\n",
    "                y_list.append(y_df)\n",
    "                \n",
    "    X_return = pd.concat(X_list)\n",
    "    y_return = pd.concat(y_list)\n",
    "    return X_return, y_return"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "def calc_plot_arrays(y, yhat):\n",
    "    x_list = []\n",
    "    num_list = []\n",
    "    mean_list = []\n",
    "    std_list = []\n",
    "    mae_list = []\n",
    "    rmse_list = []\n",
    "    \n",
    "    for val in np.arange(math.floor(min(y)), math.ceil(max(y))):\n",
    "        idx = (y>val)&(y<val+1)\n",
    "        y_pred = np.array(yhat)[np.where(idx)]\n",
    "        y_true = np.array(y)[np.where(idx)]\n",
    "        if len(y_true) > 0:\n",
    "            x_list.append(np.mean(y_true))\n",
    "            num_list.append(len(y_true))\n",
    "            mean_list.append(np.mean(y_pred))\n",
    "            std_list.append(np.std(y_pred))\n",
    "            mae_list.append(mean_absolute_error(y_true=y_true, y_pred=y_pred))\n",
    "            rmse_list.append(np.sqrt(mean_squared_error(y_true=y_true, y_pred=y_pred)))\n",
    "        \n",
    "    plot_dict = {'x_arr': x_list, 'num_arr':num_list, 'mean_arr':mean_list,\n",
    "                 'std_arr': std_list, 'mae_arr':mae_list, 'rmse_arr':rmse_list}\n",
    "    \n",
    "    return plot_dict\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "def display_result(model, X_train, y_train, X_test, y_test, plot=False):\n",
    "    yhat_train = model.predict(X_train)\n",
    "    yhat_test = model.predict(X_test)\n",
    "\n",
    "    r2_train = r2_score(y_train, yhat_train)\n",
    "    r2_test = r2_score(y_test, yhat_test)\n",
    "    \n",
    "    rmse_train = np.sqrt(mean_squared_error(y_true=y_train, y_pred=yhat_train))\n",
    "    rmse_test = np.sqrt(mean_squared_error(y_true=y_test, y_pred=yhat_test))\n",
    "    \n",
    "    mae_train = mean_absolute_error(y_true=y_train, y_pred=yhat_train)\n",
    "    mae_test = mean_absolute_error(y_true=y_test, y_pred=yhat_test)\n",
    "    \n",
    "    plot_dict_train = calc_plot_arrays(y_train, yhat_train)\n",
    "    plot_dict_test = calc_plot_arrays(y_test, yhat_test)\n",
    "    \n",
    "    mean_std_train = np.mean(plot_dict_train['std_arr'])\n",
    "    mean_std_test = np.mean(plot_dict_test['std_arr'])\n",
    "    \n",
    "    dict_train = {'r2':r2_train, 'mean_std':mean_std_train, 'rmse':rmse_train, 'mae':mae_train}\n",
    "    dict_test = {'r2':r2_test, 'mean_std':mean_std_test, 'rmse':rmse_test, 'mae':mae_test}\n",
    "    \n",
    "    if plot:\n",
    "        fig, axs = plt.subplots(2,2, figsize=(30,20))\n",
    "        for case in range(0,2):\n",
    "            if case == 0: \n",
    "                plot_dict = plot_dict_train\n",
    "                plt_y = y_train\n",
    "                title = 'Train'\n",
    "            else: \n",
    "                plot_dict = plot_dict_test\n",
    "                plt_y = y_test\n",
    "                title = 'Test'\n",
    "\n",
    "            plt_x = plot_dict['x_arr']\n",
    "            plt_mean = np.array(plot_dict['mean_arr'])\n",
    "            plt_std = np.array(plot_dict['std_arr'])\n",
    "\n",
    "            axs[0,case].plot(plt_x, plt_mean)\n",
    "            axs[0,case].fill_between(plt_x, plt_mean-plt_std, plt_mean+plt_std, alpha=0.3)\n",
    "            axs[0,case].plot([min(plt_y), max(plt_y)], [min(plt_y), max(plt_y)], '--')\n",
    "            axs[0,case].set_xlabel('True Angles')\n",
    "            axs[0,case].set_ylabel('Predicted Angles')\n",
    "            axs[0,case].set_title(title)\n",
    "\n",
    "            axs[1,case].plot(plt_x, plot_dict['rmse_arr'], label='RMSE')\n",
    "            axs[1,case].plot(plt_x, plot_dict['mae_arr'], label='MAE')\n",
    "            axs[1,case].set_xlabel('True Angles')\n",
    "            axs[1,case].set_ylabel('Error')\n",
    "            axs[1,case].set_title(title)\n",
    "            axs[1,case].legend()\n",
    "        plt.show()\n",
    "    result_df = pd.DataFrame([dict_train, dict_test], index=['Train','Test'])[['r2','mean_std','mae','rmse']]\n",
    "    return result_df, dict_train, dict_test, plot_dict_train, plot_dict_test\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [],
   "source": [
    "def display_all_results(model, X_df, df, if_display=True, if_plot=False, \n",
    "                        if_stand=False, if_norm=False,\n",
    "                        if_PCA=False, poly_deg=1):\n",
    "    frames = []\n",
    "    sens = ['s'+str(k) for k in range(1,n_sens+1)]\n",
    "    angs = ['ab', 'hf', 'ir']\n",
    "    models = []\n",
    "    poly = PolynomialFeatures(degree=poly_deg)\n",
    "    \n",
    "    X_train, X_test, y_train, y_test = train_test_split(X_df, df[angs], test_size=0.2, shuffle=False) #, random_state=42)\n",
    "        \n",
    "    if if_stand: \n",
    "        X_test = standardize(X_test, X_train)\n",
    "        X_train = standardize(X_train, X_train)\n",
    "\n",
    "    if if_norm:\n",
    "        X_test = normalize(X_test, X_train)\n",
    "        X_train = normalize(X_train, X_train)\n",
    "                \n",
    "    if poly_deg > 1:\n",
    "        X_train_add = pd.DataFrame(poly.fit_transform(X_train[sens]))\n",
    "        X_test_add = pd.DataFrame(poly.fit_transform(X_test[sens]))\n",
    "        \n",
    "        X_train = pd.concat([pd.DataFrame(X_train.values, columns=X_train.columns), \n",
    "                             X_train_add], axis=1).drop(sens, axis=1)\n",
    "        X_test = pd.concat([pd.DataFrame(X_test.values, columns=X_test.columns), \n",
    "                            X_test_add], axis=1).drop(sens, axis=1)\n",
    "    \n",
    "    if if_PCA:\n",
    "        # Note: should normalize before applying PCA\n",
    "        n = X_train.shape[1]\n",
    "        pca = PCA(n).fit(X_train)\n",
    "        i = 1\n",
    "        while np.sum(pca.explained_variance_ratio_[:i]) < 0.95:\n",
    "            i += 1\n",
    "        print([n, i])\n",
    "        pca = PCA(i).fit(X_train)\n",
    "        X_train = pca.transform(X_train)\n",
    "        X_test = pca.transform(X_test)\n",
    "    \n",
    "    for i,a in enumerate(angs):\n",
    "        model.fit(X_train, y_train[a])\n",
    "        if if_plot == True: print(f'\\n********** {a}: **********\\n')\n",
    "        results = display_result(model, X_train, y_train[a], X_test, y_test[a], plot=if_plot)\n",
    "        frames.append(results[0])\n",
    "        models.append(model)\n",
    "        \n",
    "    if if_display == True: display(pd.concat(frames, keys=angs))\n",
    "        \n",
    "    return frames, models\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "def find_best_param(scores_list, params, param_name):\n",
    "    for ind, score in enumerate(scores_list):\n",
    "        best_score = np.max(score)\n",
    "        best_ind = np.argmax(score)\n",
    "        best_param = params[best_ind]\n",
    "        print(angs[ind] + ':')\n",
    "        print(\"The best model has \" + param_name + \" of {}.\".format(best_param))                                                                      \n",
    "        print(\"The best model has R2 = {}.\\n\".format(best_score))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "metadata": {},
   "outputs": [],
   "source": [
    "n_sens = 6\n",
    "sens = ['s'+str(k) for k in range(1,n_sens+1)]\n",
    "angs = ['ab', 'hf', 'ir']\n",
    "\n",
    "X_df, y_df = load_data(['M1'], [1,2,3], ['A','B','C'], angs=angs, features=sens)\n",
    "X_df_added, y_df_added = load_data(['M1'], [1,2,3], ['A','B','C'],\n",
    "                                   angs=angs, features=sens, \n",
    "                                   if_1st_deriv=True, if_2nd_deriv=True, num_prev=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "metadata": {},
   "outputs": [],
   "source": [
    "# X_train, X_test, y_train, y_test = train_test_split(X_df_added, y_df_added[angs], test_size=0.2, shuffle=False)\n",
    "\n",
    "# poly = PolynomialFeatures(degree=3)\n",
    "# X_train_add = pd.DataFrame(poly.fit_transform(X_train[sens]))\n",
    "# X_test_add = pd.DataFrame(poly.fit_transform(X_test[sens]))\n",
    "\n",
    "# X_train = pd.concat([pd.DataFrame(X_train.values, columns=X_train.columns), \n",
    "#                      X_train_add], axis=1).drop(sens, axis=1)\n",
    "# X_test = pd.concat([pd.DataFrame(X_test.values, columns=X_test.columns), \n",
    "#                     X_test_add], axis=1).drop(sens, axis=1)\n",
    "\n",
    "# X_train.to_csv('X_train.csv', index = False)\n",
    "# y_train.to_csv('y_train.csv', index = False)\n",
    "# X_test.to_csv('X_test.csv', index = False)\n",
    "# y_test.to_csv('y_test.csv', index = False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**B. Linear Regression**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.901010</td>\n",
       "      <td>11.897278</td>\n",
       "      <td>9.753486</td>\n",
       "      <td>12.761176</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.775065</td>\n",
       "      <td>12.240685</td>\n",
       "      <td>14.914385</td>\n",
       "      <td>19.012592</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.752430</td>\n",
       "      <td>14.254330</td>\n",
       "      <td>16.145868</td>\n",
       "      <td>19.993084</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.602819</td>\n",
       "      <td>14.183518</td>\n",
       "      <td>19.324524</td>\n",
       "      <td>23.550622</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.591279</td>\n",
       "      <td>15.805040</td>\n",
       "      <td>21.354235</td>\n",
       "      <td>26.978226</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.544879</td>\n",
       "      <td>11.211689</td>\n",
       "      <td>17.111802</td>\n",
       "      <td>21.717219</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.901010  11.897278   9.753486  12.761176\n",
       "   Test   0.775065  12.240685  14.914385  19.012592\n",
       "hf Train  0.752430  14.254330  16.145868  19.993084\n",
       "   Test   0.602819  14.183518  19.324524  23.550622\n",
       "ir Train  0.591279  15.805040  21.354235  26.978226\n",
       "   Test   0.544879  11.211689  17.111802  21.717219"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "linreg = LinearRegression()\n",
    "display_all_results(linreg, X_df, y_df);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.911068</td>\n",
       "      <td>11.183976</td>\n",
       "      <td>9.135420</td>\n",
       "      <td>12.087205</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.779129</td>\n",
       "      <td>11.777138</td>\n",
       "      <td>14.690716</td>\n",
       "      <td>18.811488</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.809676</td>\n",
       "      <td>13.772353</td>\n",
       "      <td>13.929124</td>\n",
       "      <td>17.546370</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.616968</td>\n",
       "      <td>14.639168</td>\n",
       "      <td>18.787604</td>\n",
       "      <td>23.138092</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.649530</td>\n",
       "      <td>15.648047</td>\n",
       "      <td>20.272851</td>\n",
       "      <td>24.967519</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.586149</td>\n",
       "      <td>11.540126</td>\n",
       "      <td>16.253234</td>\n",
       "      <td>20.613524</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.911068  11.183976   9.135420  12.087205\n",
       "   Test   0.779129  11.777138  14.690716  18.811488\n",
       "hf Train  0.809676  13.772353  13.929124  17.546370\n",
       "   Test   0.616968  14.639168  18.787604  23.138092\n",
       "ir Train  0.649530  15.648047  20.272851  24.967519\n",
       "   Test   0.586149  11.540126  16.253234  20.613524"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "linreg = LinearRegression()\n",
    "display_all_results(linreg, X_df_added, y_df_added);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**C. Polynomial Regression**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Degree =  2\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.919932</td>\n",
       "      <td>10.981466</td>\n",
       "      <td>8.589613</td>\n",
       "      <td>11.476887</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.780861</td>\n",
       "      <td>12.191805</td>\n",
       "      <td>14.612550</td>\n",
       "      <td>18.766019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.808074</td>\n",
       "      <td>14.133184</td>\n",
       "      <td>13.995990</td>\n",
       "      <td>17.603464</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.636395</td>\n",
       "      <td>14.633467</td>\n",
       "      <td>18.274841</td>\n",
       "      <td>22.533206</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.712040</td>\n",
       "      <td>15.902956</td>\n",
       "      <td>17.827316</td>\n",
       "      <td>22.644667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.638308</td>\n",
       "      <td>12.294146</td>\n",
       "      <td>15.361324</td>\n",
       "      <td>19.360219</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.919932  10.981466   8.589613  11.476887\n",
       "   Test   0.780861  12.191805  14.612550  18.766019\n",
       "hf Train  0.808074  14.133184  13.995990  17.603464\n",
       "   Test   0.636395  14.633467  18.274841  22.533206\n",
       "ir Train  0.712040  15.902956  17.827316  22.644667\n",
       "   Test   0.638308  12.294146  15.361324  19.360219"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Degree =  3\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.931358</td>\n",
       "      <td>10.249850</td>\n",
       "      <td>7.704174</td>\n",
       "      <td>10.626444</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.793320</td>\n",
       "      <td>12.746565</td>\n",
       "      <td>13.934313</td>\n",
       "      <td>18.224743</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.849286</td>\n",
       "      <td>12.602613</td>\n",
       "      <td>12.039398</td>\n",
       "      <td>15.599368</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.659580</td>\n",
       "      <td>14.679145</td>\n",
       "      <td>16.960386</td>\n",
       "      <td>21.802962</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.773563</td>\n",
       "      <td>15.527517</td>\n",
       "      <td>15.385382</td>\n",
       "      <td>20.080466</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.700227</td>\n",
       "      <td>11.792307</td>\n",
       "      <td>13.584235</td>\n",
       "      <td>17.625317</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.931358  10.249850   7.704174  10.626444\n",
       "   Test   0.793320  12.746565  13.934313  18.224743\n",
       "hf Train  0.849286  12.602613  12.039398  15.599368\n",
       "   Test   0.659580  14.679145  16.960386  21.802962\n",
       "ir Train  0.773563  15.527517  15.385382  20.080466\n",
       "   Test   0.700227  11.792307  13.584235  17.625317"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Degree =  4\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.901395</td>\n",
       "      <td>12.545540</td>\n",
       "      <td>9.538343</td>\n",
       "      <td>12.736276</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.760058</td>\n",
       "      <td>14.711685</td>\n",
       "      <td>15.136127</td>\n",
       "      <td>19.636559</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.876125</td>\n",
       "      <td>11.546491</td>\n",
       "      <td>10.740009</td>\n",
       "      <td>14.142372</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.660900</td>\n",
       "      <td>14.962774</td>\n",
       "      <td>16.820597</td>\n",
       "      <td>21.760667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.649216</td>\n",
       "      <td>19.957658</td>\n",
       "      <td>19.101548</td>\n",
       "      <td>24.993085</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.511005</td>\n",
       "      <td>15.725595</td>\n",
       "      <td>17.106490</td>\n",
       "      <td>22.510906</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.901395  12.545540   9.538343  12.736276\n",
       "   Test   0.760058  14.711685  15.136127  19.636559\n",
       "hf Train  0.876125  11.546491  10.740009  14.142372\n",
       "   Test   0.660900  14.962774  16.820597  21.760667\n",
       "ir Train  0.649216  19.957658  19.101548  24.993085\n",
       "   Test   0.511005  15.725595  17.106490  22.510906"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Degree =  5\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.947678</td>\n",
       "      <td>9.045667</td>\n",
       "      <td>6.677612</td>\n",
       "      <td>9.277588</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.767947</td>\n",
       "      <td>14.862630</td>\n",
       "      <td>14.803862</td>\n",
       "      <td>19.311061</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.898150</td>\n",
       "      <td>10.895324</td>\n",
       "      <td>9.623366</td>\n",
       "      <td>12.823663</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.585203</td>\n",
       "      <td>17.338641</td>\n",
       "      <td>18.305432</td>\n",
       "      <td>24.067228</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.827365</td>\n",
       "      <td>14.813403</td>\n",
       "      <td>13.453135</td>\n",
       "      <td>17.533335</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.306781</td>\n",
       "      <td>18.691178</td>\n",
       "      <td>18.848370</td>\n",
       "      <td>26.802555</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.947678   9.045667   6.677612   9.277588\n",
       "   Test   0.767947  14.862630  14.803862  19.311061\n",
       "hf Train  0.898150  10.895324   9.623366  12.823663\n",
       "   Test   0.585203  17.338641  18.305432  24.067228\n",
       "ir Train  0.827365  14.813403  13.453135  17.533335\n",
       "   Test   0.306781  18.691178  18.848370  26.802555"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Degree =  6\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.952808</td>\n",
       "      <td>8.593067</td>\n",
       "      <td>6.496335</td>\n",
       "      <td>8.811016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.580310</td>\n",
       "      <td>18.561757</td>\n",
       "      <td>18.589716</td>\n",
       "      <td>25.970273</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.909971</td>\n",
       "      <td>10.718606</td>\n",
       "      <td>9.192738</td>\n",
       "      <td>12.056518</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.151221</td>\n",
       "      <td>24.583222</td>\n",
       "      <td>23.826051</td>\n",
       "      <td>34.427481</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.908189</td>\n",
       "      <td>10.525882</td>\n",
       "      <td>9.361476</td>\n",
       "      <td>12.786375</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>-0.087280</td>\n",
       "      <td>23.513688</td>\n",
       "      <td>22.899492</td>\n",
       "      <td>33.566936</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.952808   8.593067   6.496335   8.811016\n",
       "   Test   0.580310  18.561757  18.589716  25.970273\n",
       "hf Train  0.909971  10.718606   9.192738  12.056518\n",
       "   Test   0.151221  24.583222  23.826051  34.427481\n",
       "ir Train  0.908189  10.525882   9.361476  12.786375\n",
       "   Test  -0.087280  23.513688  22.899492  33.566936"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ab:\n",
      "The best model has degree of 3.\n",
      "The best model has R2 = 0.7933202273384089.\n",
      "\n",
      "hf:\n",
      "The best model has degree of 4.\n",
      "The best model has R2 = 0.6608995319619955.\n",
      "\n",
      "ir:\n",
      "The best model has degree of 3.\n",
      "The best model has R2 = 0.7002273576394702.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "degrees = range(2,7)\n",
    "ab_scores, hf_scores, ir_scores = [], [], []\n",
    "linreg = LinearRegression()\n",
    "\n",
    "for deg in degrees:\n",
    "    print('\\nDegree = ', deg)\n",
    "    result,_ = display_all_results(linreg, X_df, y_df, poly_deg=deg);\n",
    "    ab_scores.append(result[0].r2[1])\n",
    "    hf_scores.append(result[1].r2[1])\n",
    "    ir_scores.append(result[2].r2[1])\n",
    "\n",
    "scores_list = [ab_scores, hf_scores, ir_scores]\n",
    "find_best_param(scores_list, degrees, 'degree')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Degree =  2\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.928443</td>\n",
       "      <td>10.310230</td>\n",
       "      <td>8.034766</td>\n",
       "      <td>10.842308</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.790201</td>\n",
       "      <td>11.929353</td>\n",
       "      <td>14.167058</td>\n",
       "      <td>18.333891</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.853046</td>\n",
       "      <td>12.920511</td>\n",
       "      <td>12.166673</td>\n",
       "      <td>15.418108</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.656704</td>\n",
       "      <td>14.182903</td>\n",
       "      <td>17.672000</td>\n",
       "      <td>21.905059</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.742417</td>\n",
       "      <td>15.765526</td>\n",
       "      <td>16.901706</td>\n",
       "      <td>21.404681</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.646182</td>\n",
       "      <td>12.014861</td>\n",
       "      <td>15.041473</td>\n",
       "      <td>19.059892</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.928443  10.310230   8.034766  10.842308\n",
       "   Test   0.790201  11.929353  14.167058  18.333891\n",
       "hf Train  0.853046  12.920511  12.166673  15.418108\n",
       "   Test   0.656704  14.182903  17.672000  21.905059\n",
       "ir Train  0.742417  15.765526  16.901706  21.404681\n",
       "   Test   0.646182  12.014861  15.041473  19.059892"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Degree =  3\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.938691</td>\n",
       "      <td>9.631045</td>\n",
       "      <td>7.223615</td>\n",
       "      <td>10.035931</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.805583</td>\n",
       "      <td>12.408493</td>\n",
       "      <td>13.439350</td>\n",
       "      <td>17.649004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.883283</td>\n",
       "      <td>11.418579</td>\n",
       "      <td>10.591613</td>\n",
       "      <td>13.740668</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.694339</td>\n",
       "      <td>14.135169</td>\n",
       "      <td>16.298434</td>\n",
       "      <td>20.669499</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.792263</td>\n",
       "      <td>15.181595</td>\n",
       "      <td>14.827330</td>\n",
       "      <td>19.222370</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.711362</td>\n",
       "      <td>11.543475</td>\n",
       "      <td>13.234511</td>\n",
       "      <td>17.215008</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.938691   9.631045   7.223615  10.035931\n",
       "   Test   0.805583  12.408493  13.439350  17.649004\n",
       "hf Train  0.883283  11.418579  10.591613  13.740668\n",
       "   Test   0.694339  14.135169  16.298434  20.669499\n",
       "ir Train  0.792263  15.181595  14.827330  19.222370\n",
       "   Test   0.711362  11.543475  13.234511  17.215008"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Degree =  4\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.946747</td>\n",
       "      <td>8.966736</td>\n",
       "      <td>6.655011</td>\n",
       "      <td>9.353334</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.799806</td>\n",
       "      <td>13.077525</td>\n",
       "      <td>13.727405</td>\n",
       "      <td>17.909315</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.904594</td>\n",
       "      <td>10.434330</td>\n",
       "      <td>9.451124</td>\n",
       "      <td>12.423092</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.692761</td>\n",
       "      <td>14.536302</td>\n",
       "      <td>16.195148</td>\n",
       "      <td>20.722785</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.839191</td>\n",
       "      <td>13.634081</td>\n",
       "      <td>12.773644</td>\n",
       "      <td>16.912379</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.694913</td>\n",
       "      <td>13.083641</td>\n",
       "      <td>13.402448</td>\n",
       "      <td>17.698738</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.946747   8.966736   6.655011   9.353334\n",
       "   Test   0.799806  13.077525  13.727405  17.909315\n",
       "hf Train  0.904594  10.434330   9.451124  12.423092\n",
       "   Test   0.692761  14.536302  16.195148  20.722785\n",
       "ir Train  0.839191  13.634081  12.773644  16.912379\n",
       "   Test   0.694913  13.083641  13.402448  17.698738"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Degree =  5\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.956887</td>\n",
       "      <td>8.149036</td>\n",
       "      <td>5.854546</td>\n",
       "      <td>8.415870</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.779042</td>\n",
       "      <td>13.934190</td>\n",
       "      <td>14.370312</td>\n",
       "      <td>18.815160</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.925327</td>\n",
       "      <td>9.277708</td>\n",
       "      <td>8.195403</td>\n",
       "      <td>10.990606</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.649857</td>\n",
       "      <td>15.716721</td>\n",
       "      <td>17.273981</td>\n",
       "      <td>22.122440</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.888803</td>\n",
       "      <td>11.585649</td>\n",
       "      <td>10.484527</td>\n",
       "      <td>14.063628</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.477850</td>\n",
       "      <td>16.328787</td>\n",
       "      <td>16.566853</td>\n",
       "      <td>23.154092</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.956887   8.149036   5.854546   8.415870\n",
       "   Test   0.779042  13.934190  14.370312  18.815160\n",
       "hf Train  0.925327   9.277708   8.195403  10.990606\n",
       "   Test   0.649857  15.716721  17.273981  22.122440\n",
       "ir Train  0.888803  11.585649  10.484527  14.063628\n",
       "   Test   0.477850  16.328787  16.566853  23.154092"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Degree =  6\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.970348</td>\n",
       "      <td>6.750935</td>\n",
       "      <td>4.792580</td>\n",
       "      <td>6.979420</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.335660</td>\n",
       "      <td>22.612346</td>\n",
       "      <td>20.522561</td>\n",
       "      <td>32.624865</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.950048</td>\n",
       "      <td>7.693948</td>\n",
       "      <td>6.526878</td>\n",
       "      <td>8.989149</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>-0.072901</td>\n",
       "      <td>27.886545</td>\n",
       "      <td>24.026781</td>\n",
       "      <td>38.724874</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.931422</td>\n",
       "      <td>9.214360</td>\n",
       "      <td>7.859736</td>\n",
       "      <td>11.044416</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>-1.245714</td>\n",
       "      <td>28.648175</td>\n",
       "      <td>26.246970</td>\n",
       "      <td>48.018375</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.970348   6.750935   4.792580   6.979420\n",
       "   Test   0.335660  22.612346  20.522561  32.624865\n",
       "hf Train  0.950048   7.693948   6.526878   8.989149\n",
       "   Test  -0.072901  27.886545  24.026781  38.724874\n",
       "ir Train  0.931422   9.214360   7.859736  11.044416\n",
       "   Test  -1.245714  28.648175  26.246970  48.018375"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ab:\n",
      "The best model has degree of 3.\n",
      "The best model has R2 = 0.8055832511619616.\n",
      "\n",
      "hf:\n",
      "The best model has degree of 3.\n",
      "The best model has R2 = 0.6943393775038769.\n",
      "\n",
      "ir:\n",
      "The best model has degree of 3.\n",
      "The best model has R2 = 0.7113616735074386.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "degrees = range(2,7)\n",
    "ab_scores, hf_scores, ir_scores = [], [], []\n",
    "linreg = LinearRegression()\n",
    "\n",
    "for deg in degrees:\n",
    "    print('\\nDegree = ', deg)\n",
    "    result,_ = display_all_results(linreg, X_df_added, y_df_added, poly_deg=deg);\n",
    "    ab_scores.append(result[0].r2[1])\n",
    "    hf_scores.append(result[1].r2[1])\n",
    "    ir_scores.append(result[2].r2[1])\n",
    "\n",
    "scores_list = [ab_scores, hf_scores, ir_scores]\n",
    "find_best_param(scores_list, degrees, 'degree')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**D. kNN**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "k = 1\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.270669</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.678463</td>\n",
       "      <td>17.175134</td>\n",
       "      <td>16.561574</td>\n",
       "      <td>22.731489</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.270279</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.469556</td>\n",
       "      <td>19.566608</td>\n",
       "      <td>20.546974</td>\n",
       "      <td>27.216222</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.259164</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.467840</td>\n",
       "      <td>17.389108</td>\n",
       "      <td>16.620756</td>\n",
       "      <td>23.483450</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  1.000000   0.270669   0.000000   0.000000\n",
       "   Test   0.678463  17.175134  16.561574  22.731489\n",
       "hf Train  1.000000   0.270279   0.000000   0.000000\n",
       "   Test   0.469556  19.566608  20.546974  27.216222\n",
       "ir Train  1.000000   0.259164   0.000000   0.000000\n",
       "   Test   0.467840  17.389108  16.620756  23.483450"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "k = 10\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.945282</td>\n",
       "      <td>9.230150</td>\n",
       "      <td>6.561840</td>\n",
       "      <td>9.487675</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.778792</td>\n",
       "      <td>13.967837</td>\n",
       "      <td>14.266087</td>\n",
       "      <td>18.854402</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.899476</td>\n",
       "      <td>10.673805</td>\n",
       "      <td>9.362343</td>\n",
       "      <td>12.739906</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.623361</td>\n",
       "      <td>15.636259</td>\n",
       "      <td>17.447701</td>\n",
       "      <td>22.933512</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.867125</td>\n",
       "      <td>11.748420</td>\n",
       "      <td>10.733435</td>\n",
       "      <td>15.382324</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.674155</td>\n",
       "      <td>13.459029</td>\n",
       "      <td>13.214304</td>\n",
       "      <td>18.375810</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.945282   9.230150   6.561840   9.487675\n",
       "   Test   0.778792  13.967837  14.266087  18.854402\n",
       "hf Train  0.899476  10.673805   9.362343  12.739906\n",
       "   Test   0.623361  15.636259  17.447701  22.933512\n",
       "ir Train  0.867125  11.748420  10.733435  15.382324\n",
       "   Test   0.674155  13.459029  13.214304  18.375810"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "k = 75\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.925163</td>\n",
       "      <td>10.524983</td>\n",
       "      <td>7.879761</td>\n",
       "      <td>11.095609</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.787250</td>\n",
       "      <td>13.304731</td>\n",
       "      <td>14.032500</td>\n",
       "      <td>18.490421</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.837995</td>\n",
       "      <td>12.366574</td>\n",
       "      <td>12.463764</td>\n",
       "      <td>16.173168</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.660431</td>\n",
       "      <td>14.455948</td>\n",
       "      <td>16.737630</td>\n",
       "      <td>21.775709</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.768558</td>\n",
       "      <td>13.167441</td>\n",
       "      <td>15.256832</td>\n",
       "      <td>20.301188</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.667178</td>\n",
       "      <td>11.600176</td>\n",
       "      <td>14.185887</td>\n",
       "      <td>18.571498</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.925163  10.524983   7.879761  11.095609\n",
       "   Test   0.787250  13.304731  14.032500  18.490421\n",
       "hf Train  0.837995  12.366574  12.463764  16.173168\n",
       "   Test   0.660431  14.455948  16.737630  21.775709\n",
       "ir Train  0.768558  13.167441  15.256832  20.301188\n",
       "   Test   0.667178  11.600176  14.185887  18.571498"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "k = 250\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.914665</td>\n",
       "      <td>10.643534</td>\n",
       "      <td>8.595766</td>\n",
       "      <td>11.848329</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.784774</td>\n",
       "      <td>13.034890</td>\n",
       "      <td>14.267299</td>\n",
       "      <td>18.597734</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.800040</td>\n",
       "      <td>11.626311</td>\n",
       "      <td>14.344648</td>\n",
       "      <td>17.968119</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.656171</td>\n",
       "      <td>13.627072</td>\n",
       "      <td>17.204302</td>\n",
       "      <td>21.911869</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.685698</td>\n",
       "      <td>13.799032</td>\n",
       "      <td>18.260358</td>\n",
       "      <td>23.657767</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.610633</td>\n",
       "      <td>10.844545</td>\n",
       "      <td>15.652690</td>\n",
       "      <td>20.087253</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.914665  10.643534   8.595766  11.848329\n",
       "   Test   0.784774  13.034890  14.267299  18.597734\n",
       "hf Train  0.800040  11.626311  14.344648  17.968119\n",
       "   Test   0.656171  13.627072  17.204302  21.911869\n",
       "ir Train  0.685698  13.799032  18.260358  23.657767\n",
       "   Test   0.610633  10.844545  15.652690  20.087253"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "k = 500\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.905050</td>\n",
       "      <td>10.230357</td>\n",
       "      <td>9.239336</td>\n",
       "      <td>12.498034</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.779981</td>\n",
       "      <td>12.472773</td>\n",
       "      <td>14.595691</td>\n",
       "      <td>18.803674</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.759647</td>\n",
       "      <td>10.775198</td>\n",
       "      <td>15.917175</td>\n",
       "      <td>19.699504</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.640673</td>\n",
       "      <td>12.512305</td>\n",
       "      <td>17.911766</td>\n",
       "      <td>22.400259</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.642454</td>\n",
       "      <td>13.960647</td>\n",
       "      <td>19.541348</td>\n",
       "      <td>25.232833</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.580464</td>\n",
       "      <td>10.277443</td>\n",
       "      <td>16.302003</td>\n",
       "      <td>20.850935</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.905050  10.230357   9.239336  12.498034\n",
       "   Test   0.779981  12.472773  14.595691  18.803674\n",
       "hf Train  0.759647  10.775198  15.917175  19.699504\n",
       "   Test   0.640673  12.512305  17.911766  22.400259\n",
       "ir Train  0.642454  13.960647  19.541348  25.232833\n",
       "   Test   0.580464  10.277443  16.302003  20.850935"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "k = 750\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.891408</td>\n",
       "      <td>9.783162</td>\n",
       "      <td>9.989823</td>\n",
       "      <td>13.365741</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.772741</td>\n",
       "      <td>11.785113</td>\n",
       "      <td>14.866803</td>\n",
       "      <td>19.110529</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.721782</td>\n",
       "      <td>10.175498</td>\n",
       "      <td>17.197446</td>\n",
       "      <td>21.194503</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.619432</td>\n",
       "      <td>11.555365</td>\n",
       "      <td>18.640482</td>\n",
       "      <td>23.052836</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.615571</td>\n",
       "      <td>13.863966</td>\n",
       "      <td>20.320217</td>\n",
       "      <td>26.164238</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.560100</td>\n",
       "      <td>9.803252</td>\n",
       "      <td>16.645006</td>\n",
       "      <td>21.350983</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.891408   9.783162   9.989823  13.365741\n",
       "   Test   0.772741  11.785113  14.866803  19.110529\n",
       "hf Train  0.721782  10.175498  17.197446  21.194503\n",
       "   Test   0.619432  11.555365  18.640482  23.052836\n",
       "ir Train  0.615571  13.863966  20.320217  26.164238\n",
       "   Test   0.560100   9.803252  16.645006  21.350983"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "k = 1000\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.874994</td>\n",
       "      <td>9.264391</td>\n",
       "      <td>10.715677</td>\n",
       "      <td>14.340357</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.762510</td>\n",
       "      <td>11.040825</td>\n",
       "      <td>15.219314</td>\n",
       "      <td>19.535970</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.684521</td>\n",
       "      <td>9.663783</td>\n",
       "      <td>18.372488</td>\n",
       "      <td>22.569206</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.590854</td>\n",
       "      <td>10.738913</td>\n",
       "      <td>19.466078</td>\n",
       "      <td>23.902706</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.590661</td>\n",
       "      <td>13.594430</td>\n",
       "      <td>21.091222</td>\n",
       "      <td>26.998599</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.533499</td>\n",
       "      <td>9.319936</td>\n",
       "      <td>17.140564</td>\n",
       "      <td>21.987053</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.874994   9.264391  10.715677  14.340357\n",
       "   Test   0.762510  11.040825  15.219314  19.535970\n",
       "hf Train  0.684521   9.663783  18.372488  22.569206\n",
       "   Test   0.590854  10.738913  19.466078  23.902706\n",
       "ir Train  0.590661  13.594430  21.091222  26.998599\n",
       "   Test   0.533499   9.319936  17.140564  21.987053"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ab:\n",
      "The best model has k of 75.\n",
      "The best model has R2 = 0.7872503962714331.\n",
      "\n",
      "hf:\n",
      "The best model has k of 75.\n",
      "The best model has R2 = 0.6604305914334088.\n",
      "\n",
      "ir:\n",
      "The best model has k of 10.\n",
      "The best model has R2 = 0.6741549638511204.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "k_values = [1, 10, 75, 250, 500, 750, 1000]\n",
    "ab_scores, hf_scores, ir_scores = [], [], []\n",
    "\n",
    "for val in k_values:\n",
    "    print('\\nk =', val)\n",
    "    kNN = KNeighborsRegressor(n_neighbors=val)\n",
    "    result,_ = display_all_results(kNN, X_df, y_df)\n",
    "    ab_scores.append(result[0].r2[1])\n",
    "    hf_scores.append(result[1].r2[1])\n",
    "    ir_scores.append(result[2].r2[1])\n",
    "\n",
    "scores_list = [ab_scores, hf_scores, ir_scores]\n",
    "find_best_param(scores_list, k_values, 'k')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "k = 1\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.270728</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.663801</td>\n",
       "      <td>17.926115</td>\n",
       "      <td>16.186274</td>\n",
       "      <td>23.208725</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.270308</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.588078</td>\n",
       "      <td>17.520518</td>\n",
       "      <td>17.158687</td>\n",
       "      <td>23.994822</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.259107</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.380926</td>\n",
       "      <td>16.583154</td>\n",
       "      <td>17.703968</td>\n",
       "      <td>25.211659</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  1.000000   0.270728   0.000000   0.000000\n",
       "   Test   0.663801  17.926115  16.186274  23.208725\n",
       "hf Train  1.000000   0.270308   0.000000   0.000000\n",
       "   Test   0.588078  17.520518  17.158687  23.994822\n",
       "ir Train  1.000000   0.259107   0.000000   0.000000\n",
       "   Test   0.380926  16.583154  17.703968  25.211659"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "k = 10\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.957935</td>\n",
       "      <td>7.951207</td>\n",
       "      <td>5.760661</td>\n",
       "      <td>8.312949</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.774396</td>\n",
       "      <td>14.262204</td>\n",
       "      <td>13.842188</td>\n",
       "      <td>19.011956</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.933720</td>\n",
       "      <td>8.603562</td>\n",
       "      <td>7.473064</td>\n",
       "      <td>10.354538</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.699214</td>\n",
       "      <td>14.918886</td>\n",
       "      <td>15.272554</td>\n",
       "      <td>20.504022</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.906927</td>\n",
       "      <td>9.894820</td>\n",
       "      <td>9.307621</td>\n",
       "      <td>12.866523</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.585610</td>\n",
       "      <td>12.343559</td>\n",
       "      <td>15.461013</td>\n",
       "      <td>20.626941</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.957935   7.951207   5.760661   8.312949\n",
       "   Test   0.774396  14.262204  13.842188  19.011956\n",
       "hf Train  0.933720   8.603562   7.473064  10.354538\n",
       "   Test   0.699214  14.918886  15.272554  20.504022\n",
       "ir Train  0.906927   9.894820   9.307621  12.866523\n",
       "   Test   0.585610  12.343559  15.461013  20.626941"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "k = 75\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.916054</td>\n",
       "      <td>10.293515</td>\n",
       "      <td>8.457556</td>\n",
       "      <td>11.743463</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.769018</td>\n",
       "      <td>13.118957</td>\n",
       "      <td>14.398338</td>\n",
       "      <td>19.237216</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.849166</td>\n",
       "      <td>10.789343</td>\n",
       "      <td>12.171727</td>\n",
       "      <td>15.620362</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.670157</td>\n",
       "      <td>13.721727</td>\n",
       "      <td>16.897021</td>\n",
       "      <td>21.471562</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.770100</td>\n",
       "      <td>12.397696</td>\n",
       "      <td>15.865135</td>\n",
       "      <td>20.221792</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.516476</td>\n",
       "      <td>11.208915</td>\n",
       "      <td>17.499839</td>\n",
       "      <td>22.281229</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.916054  10.293515   8.457556  11.743463\n",
       "   Test   0.769018  13.118957  14.398338  19.237216\n",
       "hf Train  0.849166  10.789343  12.171727  15.620362\n",
       "   Test   0.670157  13.721727  16.897021  21.471562\n",
       "ir Train  0.770100  12.397696  15.865135  20.221792\n",
       "   Test   0.516476  11.208915  17.499839  22.281229"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "k = 250\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.883796</td>\n",
       "      <td>10.438354</td>\n",
       "      <td>10.188283</td>\n",
       "      <td>13.816770</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.727856</td>\n",
       "      <td>12.498047</td>\n",
       "      <td>16.059968</td>\n",
       "      <td>20.881083</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.732583</td>\n",
       "      <td>10.301503</td>\n",
       "      <td>16.626212</td>\n",
       "      <td>20.798676</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.577043</td>\n",
       "      <td>11.228350</td>\n",
       "      <td>19.666966</td>\n",
       "      <td>24.314107</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.670122</td>\n",
       "      <td>12.812912</td>\n",
       "      <td>19.278609</td>\n",
       "      <td>24.222950</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.439519</td>\n",
       "      <td>9.652964</td>\n",
       "      <td>19.170622</td>\n",
       "      <td>23.988915</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.883796  10.438354  10.188283  13.816770\n",
       "   Test   0.727856  12.498047  16.059968  20.881083\n",
       "hf Train  0.732583  10.301503  16.626212  20.798676\n",
       "   Test   0.577043  11.228350  19.666966  24.314107\n",
       "ir Train  0.670122  12.812912  19.278609  24.222950\n",
       "   Test   0.439519   9.652964  19.170622  23.988915"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "k = 500\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.846393</td>\n",
       "      <td>10.021697</td>\n",
       "      <td>11.968478</td>\n",
       "      <td>15.885492</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.684972</td>\n",
       "      <td>11.654483</td>\n",
       "      <td>17.433367</td>\n",
       "      <td>22.466131</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.636111</td>\n",
       "      <td>9.151661</td>\n",
       "      <td>19.519485</td>\n",
       "      <td>24.261913</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.482793</td>\n",
       "      <td>9.388538</td>\n",
       "      <td>21.765265</td>\n",
       "      <td>26.887002</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.590096</td>\n",
       "      <td>12.476146</td>\n",
       "      <td>21.792528</td>\n",
       "      <td>27.001716</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.356863</td>\n",
       "      <td>8.883533</td>\n",
       "      <td>20.562417</td>\n",
       "      <td>25.696964</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.846393  10.021697  11.968478  15.885492\n",
       "   Test   0.684972  11.654483  17.433367  22.466131\n",
       "hf Train  0.636111   9.151661  19.519485  24.261913\n",
       "   Test   0.482793   9.388538  21.765265  26.887002\n",
       "ir Train  0.590096  12.476146  21.792528  27.001716\n",
       "   Test   0.356863   8.883533  20.562417  25.696964"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "k = 750\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.808628</td>\n",
       "      <td>9.534601</td>\n",
       "      <td>13.473515</td>\n",
       "      <td>17.731061</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.639734</td>\n",
       "      <td>10.808876</td>\n",
       "      <td>18.673569</td>\n",
       "      <td>24.025096</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.569033</td>\n",
       "      <td>8.227947</td>\n",
       "      <td>21.356790</td>\n",
       "      <td>26.403573</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.415114</td>\n",
       "      <td>8.250934</td>\n",
       "      <td>23.186845</td>\n",
       "      <td>28.592077</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.526811</td>\n",
       "      <td>11.892103</td>\n",
       "      <td>23.778674</td>\n",
       "      <td>29.011307</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.270223</td>\n",
       "      <td>8.298706</td>\n",
       "      <td>22.390715</td>\n",
       "      <td>27.373176</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.808628   9.534601  13.473515  17.731061\n",
       "   Test   0.639734  10.808876  18.673569  24.025096\n",
       "hf Train  0.569033   8.227947  21.356790  26.403573\n",
       "   Test   0.415114   8.250934  23.186845  28.592077\n",
       "ir Train  0.526811  11.892103  23.778674  29.011307\n",
       "   Test   0.270223   8.298706  22.390715  27.373176"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "k = 1000\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.767586</td>\n",
       "      <td>9.144878</td>\n",
       "      <td>15.103589</td>\n",
       "      <td>19.540088</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.588936</td>\n",
       "      <td>10.095918</td>\n",
       "      <td>20.147723</td>\n",
       "      <td>25.663025</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.514977</td>\n",
       "      <td>7.378218</td>\n",
       "      <td>22.771343</td>\n",
       "      <td>28.010580</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.359721</td>\n",
       "      <td>7.321765</td>\n",
       "      <td>24.330087</td>\n",
       "      <td>29.915394</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.475553</td>\n",
       "      <td>11.228812</td>\n",
       "      <td>25.419798</td>\n",
       "      <td>30.542256</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.206303</td>\n",
       "      <td>7.697991</td>\n",
       "      <td>23.920237</td>\n",
       "      <td>28.546811</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.767586   9.144878  15.103589  19.540088\n",
       "   Test   0.588936  10.095918  20.147723  25.663025\n",
       "hf Train  0.514977   7.378218  22.771343  28.010580\n",
       "   Test   0.359721   7.321765  24.330087  29.915394\n",
       "ir Train  0.475553  11.228812  25.419798  30.542256\n",
       "   Test   0.206303   7.697991  23.920237  28.546811"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ab:\n",
      "The best model has k of 10.\n",
      "The best model has R2 = 0.7743959737106147.\n",
      "\n",
      "hf:\n",
      "The best model has k of 10.\n",
      "The best model has R2 = 0.699213948625646.\n",
      "\n",
      "ir:\n",
      "The best model has k of 10.\n",
      "The best model has R2 = 0.5856100881336894.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "k_values = [1, 10, 75, 250, 500, 750, 1000]\n",
    "ab_scores, hf_scores, ir_scores = [], [], []\n",
    "\n",
    "for val in k_values:\n",
    "    print('\\nk =', val)\n",
    "    kNN = KNeighborsRegressor(n_neighbors=val)\n",
    "    result,_ = display_all_results(kNN, X_df_added, y_df_added)\n",
    "    ab_scores.append(result[0].r2[1])\n",
    "    hf_scores.append(result[1].r2[1])\n",
    "    ir_scores.append(result[2].r2[1])\n",
    "\n",
    "scores_list = [ab_scores, hf_scores, ir_scores]\n",
    "find_best_param(scores_list, k_values, 'k')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**E. Ridge**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0.01</th>\n",
       "      <td>0.775065</td>\n",
       "      <td>0.780862</td>\n",
       "      <td>0.793474</td>\n",
       "      <td>0.789975</td>\n",
       "      <td>0.777323</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.05</th>\n",
       "      <td>0.775065</td>\n",
       "      <td>0.780864</td>\n",
       "      <td>0.793717</td>\n",
       "      <td>0.791744</td>\n",
       "      <td>0.785153</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.10</th>\n",
       "      <td>0.775065</td>\n",
       "      <td>0.780866</td>\n",
       "      <td>0.793864</td>\n",
       "      <td>0.792507</td>\n",
       "      <td>0.788408</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.50</th>\n",
       "      <td>0.775066</td>\n",
       "      <td>0.780881</td>\n",
       "      <td>0.794191</td>\n",
       "      <td>0.794032</td>\n",
       "      <td>0.793153</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1.00</th>\n",
       "      <td>0.775067</td>\n",
       "      <td>0.780893</td>\n",
       "      <td>0.794220</td>\n",
       "      <td>0.794425</td>\n",
       "      <td>0.793836</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5.00</th>\n",
       "      <td>0.775072</td>\n",
       "      <td>0.780878</td>\n",
       "      <td>0.793962</td>\n",
       "      <td>0.794663</td>\n",
       "      <td>0.793617</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10.00</th>\n",
       "      <td>0.775066</td>\n",
       "      <td>0.780807</td>\n",
       "      <td>0.793710</td>\n",
       "      <td>0.794498</td>\n",
       "      <td>0.793149</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50.00</th>\n",
       "      <td>0.774761</td>\n",
       "      <td>0.780222</td>\n",
       "      <td>0.791792</td>\n",
       "      <td>0.792765</td>\n",
       "      <td>0.790269</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100.00</th>\n",
       "      <td>0.774124</td>\n",
       "      <td>0.779555</td>\n",
       "      <td>0.789606</td>\n",
       "      <td>0.790423</td>\n",
       "      <td>0.787027</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               1         2         3         4         5\n",
       "0.01    0.775065  0.780862  0.793474  0.789975  0.777323\n",
       "0.05    0.775065  0.780864  0.793717  0.791744  0.785153\n",
       "0.10    0.775065  0.780866  0.793864  0.792507  0.788408\n",
       "0.50    0.775066  0.780881  0.794191  0.794032  0.793153\n",
       "1.00    0.775067  0.780893  0.794220  0.794425  0.793836\n",
       "5.00    0.775072  0.780878  0.793962  0.794663  0.793617\n",
       "10.00   0.775066  0.780807  0.793710  0.794498  0.793149\n",
       "50.00   0.774761  0.780222  0.791792  0.792765  0.790269\n",
       "100.00  0.774124  0.779555  0.789606  0.790423  0.787027"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0.01</th>\n",
       "      <td>0.602819</td>\n",
       "      <td>0.636403</td>\n",
       "      <td>0.659930</td>\n",
       "      <td>0.658693</td>\n",
       "      <td>0.629463</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.05</th>\n",
       "      <td>0.602820</td>\n",
       "      <td>0.636436</td>\n",
       "      <td>0.660845</td>\n",
       "      <td>0.657979</td>\n",
       "      <td>0.641083</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.10</th>\n",
       "      <td>0.602821</td>\n",
       "      <td>0.636476</td>\n",
       "      <td>0.661426</td>\n",
       "      <td>0.657252</td>\n",
       "      <td>0.645908</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.50</th>\n",
       "      <td>0.602831</td>\n",
       "      <td>0.636750</td>\n",
       "      <td>0.662130</td>\n",
       "      <td>0.654824</td>\n",
       "      <td>0.653390</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1.00</th>\n",
       "      <td>0.602843</td>\n",
       "      <td>0.637013</td>\n",
       "      <td>0.661884</td>\n",
       "      <td>0.653645</td>\n",
       "      <td>0.655513</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5.00</th>\n",
       "      <td>0.602937</td>\n",
       "      <td>0.637910</td>\n",
       "      <td>0.661634</td>\n",
       "      <td>0.653029</td>\n",
       "      <td>0.657756</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10.00</th>\n",
       "      <td>0.603049</td>\n",
       "      <td>0.638177</td>\n",
       "      <td>0.662741</td>\n",
       "      <td>0.654850</td>\n",
       "      <td>0.656851</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50.00</th>\n",
       "      <td>0.603773</td>\n",
       "      <td>0.638196</td>\n",
       "      <td>0.667069</td>\n",
       "      <td>0.661815</td>\n",
       "      <td>0.651768</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100.00</th>\n",
       "      <td>0.604359</td>\n",
       "      <td>0.638013</td>\n",
       "      <td>0.666535</td>\n",
       "      <td>0.663434</td>\n",
       "      <td>0.649848</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               1         2         3         4         5\n",
       "0.01    0.602819  0.636403  0.659930  0.658693  0.629463\n",
       "0.05    0.602820  0.636436  0.660845  0.657979  0.641083\n",
       "0.10    0.602821  0.636476  0.661426  0.657252  0.645908\n",
       "0.50    0.602831  0.636750  0.662130  0.654824  0.653390\n",
       "1.00    0.602843  0.637013  0.661884  0.653645  0.655513\n",
       "5.00    0.602937  0.637910  0.661634  0.653029  0.657756\n",
       "10.00   0.603049  0.638177  0.662741  0.654850  0.656851\n",
       "50.00   0.603773  0.638196  0.667069  0.661815  0.651768\n",
       "100.00  0.604359  0.638013  0.666535  0.663434  0.649848"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0.01</th>\n",
       "      <td>0.544877</td>\n",
       "      <td>0.638312</td>\n",
       "      <td>0.701091</td>\n",
       "      <td>0.698530</td>\n",
       "      <td>0.576513</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.05</th>\n",
       "      <td>0.544869</td>\n",
       "      <td>0.638329</td>\n",
       "      <td>0.702185</td>\n",
       "      <td>0.699159</td>\n",
       "      <td>0.604853</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.10</th>\n",
       "      <td>0.544858</td>\n",
       "      <td>0.638352</td>\n",
       "      <td>0.702645</td>\n",
       "      <td>0.698655</td>\n",
       "      <td>0.617450</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.50</th>\n",
       "      <td>0.544772</td>\n",
       "      <td>0.638583</td>\n",
       "      <td>0.703379</td>\n",
       "      <td>0.695230</td>\n",
       "      <td>0.632445</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1.00</th>\n",
       "      <td>0.544665</td>\n",
       "      <td>0.638914</td>\n",
       "      <td>0.702876</td>\n",
       "      <td>0.694361</td>\n",
       "      <td>0.641207</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5.00</th>\n",
       "      <td>0.543804</td>\n",
       "      <td>0.640211</td>\n",
       "      <td>0.696778</td>\n",
       "      <td>0.698839</td>\n",
       "      <td>0.671412</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10.00</th>\n",
       "      <td>0.542727</td>\n",
       "      <td>0.639922</td>\n",
       "      <td>0.692507</td>\n",
       "      <td>0.701674</td>\n",
       "      <td>0.682187</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50.00</th>\n",
       "      <td>0.534310</td>\n",
       "      <td>0.634709</td>\n",
       "      <td>0.680213</td>\n",
       "      <td>0.698343</td>\n",
       "      <td>0.691880</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100.00</th>\n",
       "      <td>0.524884</td>\n",
       "      <td>0.630658</td>\n",
       "      <td>0.671443</td>\n",
       "      <td>0.690409</td>\n",
       "      <td>0.688081</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               1         2         3         4         5\n",
       "0.01    0.544877  0.638312  0.701091  0.698530  0.576513\n",
       "0.05    0.544869  0.638329  0.702185  0.699159  0.604853\n",
       "0.10    0.544858  0.638352  0.702645  0.698655  0.617450\n",
       "0.50    0.544772  0.638583  0.703379  0.695230  0.632445\n",
       "1.00    0.544665  0.638914  0.702876  0.694361  0.641207\n",
       "5.00    0.543804  0.640211  0.696778  0.698839  0.671412\n",
       "10.00   0.542727  0.639922  0.692507  0.701674  0.682187\n",
       "50.00   0.534310  0.634709  0.680213  0.698343  0.691880\n",
       "100.00  0.524884  0.630658  0.671443  0.690409  0.688081"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ab:\n",
      "The best model has degree 4 and Lambda = 5.\n",
      "The best model has R2 = 0.7946630553302625.\n",
      "\n",
      "hf:\n",
      "The best model has degree 3 and Lambda = 50.\n",
      "The best model has R2 = 0.6670693257898499.\n",
      "\n",
      "ir:\n",
      "The best model has degree 3 and Lambda = 0.5.\n",
      "The best model has R2 = 0.7033793863924822.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "lambdas = [.01,.05,.1,.5,1,5,10,50,100]\n",
    "degrees = np.arange(1,6)\n",
    "ab_ridge_scores = np.zeros((len(lambdas),len(degrees)))\n",
    "hf_ridge_scores = np.zeros((len(lambdas),len(degrees)))\n",
    "ir_ridge_scores = np.zeros((len(lambdas),len(degrees)))\n",
    "\n",
    "for ind1, alpha in enumerate(lambdas):\n",
    "    for ind2, degree in enumerate(degrees):\n",
    "        ridge = Ridge(alpha = alpha)\n",
    "        result,_ = display_all_results(ridge, X_df, y_df, \n",
    "                                     if_display=False, if_stand=True, \n",
    "                                     poly_deg=degree)\n",
    "        \n",
    "        ab_ridge_scores[ind1][ind2] = result[0].r2[1]\n",
    "        hf_ridge_scores[ind1][ind2] = result[1].r2[1]\n",
    "        ir_ridge_scores[ind1][ind2] = result[2].r2[1]\n",
    "\n",
    "display(pd.DataFrame(ab_ridge_scores, index=lambdas, columns=degrees))\n",
    "display(pd.DataFrame(hf_ridge_scores, index=lambdas, columns=degrees))\n",
    "display(pd.DataFrame(ir_ridge_scores, index=lambdas, columns=degrees))\n",
    "\n",
    "scores_list = [ab_ridge_scores, hf_ridge_scores, ir_ridge_scores]\n",
    "\n",
    "for ind, score in enumerate(scores_list):\n",
    "    best_score = np.max(score)\n",
    "    best_degree_ind = np.argmax(np.max(score, axis=0))\n",
    "    best_alpha_ind = np.argmax(np.max(score, axis=1))\n",
    "    best_degree = degrees[best_degree_ind]\n",
    "    best_alpha = lambdas[best_alpha_ind]\n",
    "    print(angs[ind] + ':')\n",
    "    print(\"The best model has degree {} and Lambda = {}.\".format(best_degree, best_alpha))                                                                      \n",
    "    print(\"The best model has R2 = {}.\\n\".format(best_score))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0.01</th>\n",
       "      <td>0.779339</td>\n",
       "      <td>0.790371</td>\n",
       "      <td>0.805645</td>\n",
       "      <td>0.801182</td>\n",
       "      <td>0.789101</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.05</th>\n",
       "      <td>0.779503</td>\n",
       "      <td>0.790552</td>\n",
       "      <td>0.805656</td>\n",
       "      <td>0.802608</td>\n",
       "      <td>0.794573</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.10</th>\n",
       "      <td>0.779540</td>\n",
       "      <td>0.790612</td>\n",
       "      <td>0.805617</td>\n",
       "      <td>0.803060</td>\n",
       "      <td>0.797167</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.50</th>\n",
       "      <td>0.779494</td>\n",
       "      <td>0.790641</td>\n",
       "      <td>0.805385</td>\n",
       "      <td>0.803472</td>\n",
       "      <td>0.801520</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1.00</th>\n",
       "      <td>0.779436</td>\n",
       "      <td>0.790594</td>\n",
       "      <td>0.805162</td>\n",
       "      <td>0.803444</td>\n",
       "      <td>0.802353</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5.00</th>\n",
       "      <td>0.779379</td>\n",
       "      <td>0.790285</td>\n",
       "      <td>0.804360</td>\n",
       "      <td>0.803391</td>\n",
       "      <td>0.802957</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10.00</th>\n",
       "      <td>0.779463</td>\n",
       "      <td>0.790099</td>\n",
       "      <td>0.803971</td>\n",
       "      <td>0.803426</td>\n",
       "      <td>0.802983</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50.00</th>\n",
       "      <td>0.779878</td>\n",
       "      <td>0.789866</td>\n",
       "      <td>0.802594</td>\n",
       "      <td>0.803025</td>\n",
       "      <td>0.802132</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100.00</th>\n",
       "      <td>0.779916</td>\n",
       "      <td>0.789703</td>\n",
       "      <td>0.801405</td>\n",
       "      <td>0.802116</td>\n",
       "      <td>0.800854</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               1         2         3         4         5\n",
       "0.01    0.779339  0.790371  0.805645  0.801182  0.789101\n",
       "0.05    0.779503  0.790552  0.805656  0.802608  0.794573\n",
       "0.10    0.779540  0.790612  0.805617  0.803060  0.797167\n",
       "0.50    0.779494  0.790641  0.805385  0.803472  0.801520\n",
       "1.00    0.779436  0.790594  0.805162  0.803444  0.802353\n",
       "5.00    0.779379  0.790285  0.804360  0.803391  0.802957\n",
       "10.00   0.779463  0.790099  0.803971  0.803426  0.802983\n",
       "50.00   0.779878  0.789866  0.802594  0.803025  0.802132\n",
       "100.00  0.779916  0.789703  0.801405  0.802116  0.800854"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0.01</th>\n",
       "      <td>0.616444</td>\n",
       "      <td>0.656601</td>\n",
       "      <td>0.694519</td>\n",
       "      <td>0.694894</td>\n",
       "      <td>0.678224</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.05</th>\n",
       "      <td>0.616260</td>\n",
       "      <td>0.656632</td>\n",
       "      <td>0.694876</td>\n",
       "      <td>0.694959</td>\n",
       "      <td>0.684240</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.10</th>\n",
       "      <td>0.616239</td>\n",
       "      <td>0.656627</td>\n",
       "      <td>0.695027</td>\n",
       "      <td>0.694263</td>\n",
       "      <td>0.688695</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.50</th>\n",
       "      <td>0.616535</td>\n",
       "      <td>0.656638</td>\n",
       "      <td>0.694898</td>\n",
       "      <td>0.691479</td>\n",
       "      <td>0.694641</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1.00</th>\n",
       "      <td>0.616860</td>\n",
       "      <td>0.656659</td>\n",
       "      <td>0.694444</td>\n",
       "      <td>0.690003</td>\n",
       "      <td>0.695454</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5.00</th>\n",
       "      <td>0.618099</td>\n",
       "      <td>0.656592</td>\n",
       "      <td>0.692940</td>\n",
       "      <td>0.686613</td>\n",
       "      <td>0.694527</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10.00</th>\n",
       "      <td>0.618961</td>\n",
       "      <td>0.656474</td>\n",
       "      <td>0.692459</td>\n",
       "      <td>0.685969</td>\n",
       "      <td>0.692457</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50.00</th>\n",
       "      <td>0.621723</td>\n",
       "      <td>0.655843</td>\n",
       "      <td>0.690697</td>\n",
       "      <td>0.686470</td>\n",
       "      <td>0.685369</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100.00</th>\n",
       "      <td>0.622843</td>\n",
       "      <td>0.655115</td>\n",
       "      <td>0.687969</td>\n",
       "      <td>0.686478</td>\n",
       "      <td>0.682851</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               1         2         3         4         5\n",
       "0.01    0.616444  0.656601  0.694519  0.694894  0.678224\n",
       "0.05    0.616260  0.656632  0.694876  0.694959  0.684240\n",
       "0.10    0.616239  0.656627  0.695027  0.694263  0.688695\n",
       "0.50    0.616535  0.656638  0.694898  0.691479  0.694641\n",
       "1.00    0.616860  0.656659  0.694444  0.690003  0.695454\n",
       "5.00    0.618099  0.656592  0.692940  0.686613  0.694527\n",
       "10.00   0.618961  0.656474  0.692459  0.685969  0.692457\n",
       "50.00   0.621723  0.655843  0.690697  0.686470  0.685369\n",
       "100.00  0.622843  0.655115  0.687969  0.686478  0.682851"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0.01</th>\n",
       "      <td>0.586467</td>\n",
       "      <td>0.646678</td>\n",
       "      <td>0.712595</td>\n",
       "      <td>0.705014</td>\n",
       "      <td>0.601489</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.05</th>\n",
       "      <td>0.586538</td>\n",
       "      <td>0.646853</td>\n",
       "      <td>0.713589</td>\n",
       "      <td>0.704072</td>\n",
       "      <td>0.627129</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.10</th>\n",
       "      <td>0.586474</td>\n",
       "      <td>0.646805</td>\n",
       "      <td>0.713577</td>\n",
       "      <td>0.702655</td>\n",
       "      <td>0.639527</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.50</th>\n",
       "      <td>0.586229</td>\n",
       "      <td>0.646481</td>\n",
       "      <td>0.711588</td>\n",
       "      <td>0.697803</td>\n",
       "      <td>0.654394</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1.00</th>\n",
       "      <td>0.586093</td>\n",
       "      <td>0.646339</td>\n",
       "      <td>0.709648</td>\n",
       "      <td>0.696381</td>\n",
       "      <td>0.661132</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5.00</th>\n",
       "      <td>0.585876</td>\n",
       "      <td>0.646625</td>\n",
       "      <td>0.702125</td>\n",
       "      <td>0.697882</td>\n",
       "      <td>0.681777</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10.00</th>\n",
       "      <td>0.585930</td>\n",
       "      <td>0.646658</td>\n",
       "      <td>0.698443</td>\n",
       "      <td>0.699854</td>\n",
       "      <td>0.688716</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50.00</th>\n",
       "      <td>0.583761</td>\n",
       "      <td>0.643512</td>\n",
       "      <td>0.690029</td>\n",
       "      <td>0.699923</td>\n",
       "      <td>0.695325</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100.00</th>\n",
       "      <td>0.578028</td>\n",
       "      <td>0.638849</td>\n",
       "      <td>0.682706</td>\n",
       "      <td>0.695331</td>\n",
       "      <td>0.692741</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               1         2         3         4         5\n",
       "0.01    0.586467  0.646678  0.712595  0.705014  0.601489\n",
       "0.05    0.586538  0.646853  0.713589  0.704072  0.627129\n",
       "0.10    0.586474  0.646805  0.713577  0.702655  0.639527\n",
       "0.50    0.586229  0.646481  0.711588  0.697803  0.654394\n",
       "1.00    0.586093  0.646339  0.709648  0.696381  0.661132\n",
       "5.00    0.585876  0.646625  0.702125  0.697882  0.681777\n",
       "10.00   0.585930  0.646658  0.698443  0.699854  0.688716\n",
       "50.00   0.583761  0.643512  0.690029  0.699923  0.695325\n",
       "100.00  0.578028  0.638849  0.682706  0.695331  0.692741"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ab:\n",
      "The best model has degree 3 and Lambda = 0.05.\n",
      "The best model has R2 = 0.8056564691399584.\n",
      "\n",
      "hf:\n",
      "The best model has degree 5 and Lambda = 1.\n",
      "The best model has R2 = 0.6954541564287371.\n",
      "\n",
      "ir:\n",
      "The best model has degree 3 and Lambda = 0.05.\n",
      "The best model has R2 = 0.7135891878438536.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "lambdas = [.01,.05,.1,.5,1,5,10,50,100]\n",
    "degrees = np.arange(1,6)\n",
    "ab_ridge_scores = np.zeros((len(lambdas),len(degrees)))\n",
    "hf_ridge_scores = np.zeros((len(lambdas),len(degrees)))\n",
    "ir_ridge_scores = np.zeros((len(lambdas),len(degrees)))\n",
    "\n",
    "for ind1, alpha in enumerate(lambdas):\n",
    "    for ind2, degree in enumerate(degrees):\n",
    "        ridge = Ridge(alpha = alpha)\n",
    "        result,_ = display_all_results(ridge, X_df_added, y_df_added,\n",
    "                                     if_display=False, if_stand=True, \n",
    "                                     poly_deg=degree)\n",
    "        \n",
    "        ab_ridge_scores[ind1][ind2] = result[0].r2[1]\n",
    "        hf_ridge_scores[ind1][ind2] = result[1].r2[1]\n",
    "        ir_ridge_scores[ind1][ind2] = result[2].r2[1]\n",
    "\n",
    "display(pd.DataFrame(ab_ridge_scores, index=lambdas, columns=degrees))\n",
    "display(pd.DataFrame(hf_ridge_scores, index=lambdas, columns=degrees))\n",
    "display(pd.DataFrame(ir_ridge_scores, index=lambdas, columns=degrees))\n",
    "\n",
    "scores_list = [ab_ridge_scores, hf_ridge_scores, ir_ridge_scores]\n",
    "\n",
    "for ind, score in enumerate(scores_list):\n",
    "    best_score = np.max(score)\n",
    "    best_degree_ind = np.argmax(np.max(score, axis=0))\n",
    "    best_alpha_ind = np.argmax(np.max(score, axis=1))\n",
    "    best_degree = degrees[best_degree_ind]\n",
    "    best_alpha = lambdas[best_alpha_ind]\n",
    "    print(angs[ind] + ':')\n",
    "    print(\"The best model has degree {} and Lambda = {}.\".format(best_degree, best_alpha))                                                                      \n",
    "    print(\"The best model has R2 = {}.\\n\".format(best_score))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**F. LASSO**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0.01</th>\n",
       "      <td>0.775109</td>\n",
       "      <td>0.781135</td>\n",
       "      <td>0.794017</td>\n",
       "      <td>0.794750</td>\n",
       "      <td>0.792898</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.05</th>\n",
       "      <td>0.774966</td>\n",
       "      <td>0.780674</td>\n",
       "      <td>0.791327</td>\n",
       "      <td>0.792349</td>\n",
       "      <td>0.791589</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.10</th>\n",
       "      <td>0.774661</td>\n",
       "      <td>0.780156</td>\n",
       "      <td>0.788851</td>\n",
       "      <td>0.790071</td>\n",
       "      <td>0.790393</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.50</th>\n",
       "      <td>0.772185</td>\n",
       "      <td>0.776919</td>\n",
       "      <td>0.781929</td>\n",
       "      <td>0.780797</td>\n",
       "      <td>0.781533</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1.00</th>\n",
       "      <td>0.767553</td>\n",
       "      <td>0.770684</td>\n",
       "      <td>0.772111</td>\n",
       "      <td>0.769390</td>\n",
       "      <td>0.770190</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5.00</th>\n",
       "      <td>0.727008</td>\n",
       "      <td>0.727008</td>\n",
       "      <td>0.692852</td>\n",
       "      <td>0.692066</td>\n",
       "      <td>0.688991</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10.00</th>\n",
       "      <td>0.657677</td>\n",
       "      <td>0.657677</td>\n",
       "      <td>0.524965</td>\n",
       "      <td>0.524916</td>\n",
       "      <td>0.507041</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              1         2         3         4         5\n",
       "0.01   0.775109  0.781135  0.794017  0.794750  0.792898\n",
       "0.05   0.774966  0.780674  0.791327  0.792349  0.791589\n",
       "0.10   0.774661  0.780156  0.788851  0.790071  0.790393\n",
       "0.50   0.772185  0.776919  0.781929  0.780797  0.781533\n",
       "1.00   0.767553  0.770684  0.772111  0.769390  0.770190\n",
       "5.00   0.727008  0.727008  0.692852  0.692066  0.688991\n",
       "10.00  0.657677  0.657677  0.524965  0.524916  0.507041"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0.01</th>\n",
       "      <td>0.602945</td>\n",
       "      <td>0.637375</td>\n",
       "      <td>0.658504</td>\n",
       "      <td>0.649264</td>\n",
       "      <td>0.654407</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.05</th>\n",
       "      <td>0.603184</td>\n",
       "      <td>0.637524</td>\n",
       "      <td>0.660632</td>\n",
       "      <td>0.652710</td>\n",
       "      <td>0.648170</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.10</th>\n",
       "      <td>0.603445</td>\n",
       "      <td>0.638094</td>\n",
       "      <td>0.662052</td>\n",
       "      <td>0.654081</td>\n",
       "      <td>0.647320</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.50</th>\n",
       "      <td>0.604944</td>\n",
       "      <td>0.629086</td>\n",
       "      <td>0.642175</td>\n",
       "      <td>0.645688</td>\n",
       "      <td>0.648051</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1.00</th>\n",
       "      <td>0.605124</td>\n",
       "      <td>0.626448</td>\n",
       "      <td>0.631084</td>\n",
       "      <td>0.629086</td>\n",
       "      <td>0.636235</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5.00</th>\n",
       "      <td>0.582814</td>\n",
       "      <td>0.582816</td>\n",
       "      <td>0.549937</td>\n",
       "      <td>0.556732</td>\n",
       "      <td>0.544786</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10.00</th>\n",
       "      <td>0.498154</td>\n",
       "      <td>0.496995</td>\n",
       "      <td>0.404436</td>\n",
       "      <td>0.410607</td>\n",
       "      <td>0.376350</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              1         2         3         4         5\n",
       "0.01   0.602945  0.637375  0.658504  0.649264  0.654407\n",
       "0.05   0.603184  0.637524  0.660632  0.652710  0.648170\n",
       "0.10   0.603445  0.638094  0.662052  0.654081  0.647320\n",
       "0.50   0.604944  0.629086  0.642175  0.645688  0.648051\n",
       "1.00   0.605124  0.626448  0.631084  0.629086  0.636235\n",
       "5.00   0.582814  0.582816  0.549937  0.556732  0.544786\n",
       "10.00  0.498154  0.496995  0.404436  0.410607  0.376350"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0.01</th>\n",
       "      <td>0.544503</td>\n",
       "      <td>0.636264</td>\n",
       "      <td>0.692386</td>\n",
       "      <td>0.690612</td>\n",
       "      <td>0.672849</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.05</th>\n",
       "      <td>0.542877</td>\n",
       "      <td>0.636688</td>\n",
       "      <td>0.682427</td>\n",
       "      <td>0.689826</td>\n",
       "      <td>0.668406</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.10</th>\n",
       "      <td>0.540569</td>\n",
       "      <td>0.636454</td>\n",
       "      <td>0.676009</td>\n",
       "      <td>0.687418</td>\n",
       "      <td>0.680220</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.50</th>\n",
       "      <td>0.510870</td>\n",
       "      <td>0.631286</td>\n",
       "      <td>0.646571</td>\n",
       "      <td>0.655153</td>\n",
       "      <td>0.647349</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1.00</th>\n",
       "      <td>0.484399</td>\n",
       "      <td>0.580630</td>\n",
       "      <td>0.593550</td>\n",
       "      <td>0.616546</td>\n",
       "      <td>0.623451</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5.00</th>\n",
       "      <td>0.416243</td>\n",
       "      <td>0.521021</td>\n",
       "      <td>0.468887</td>\n",
       "      <td>0.473800</td>\n",
       "      <td>0.473529</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10.00</th>\n",
       "      <td>0.338867</td>\n",
       "      <td>0.390363</td>\n",
       "      <td>0.272261</td>\n",
       "      <td>0.279209</td>\n",
       "      <td>0.278518</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              1         2         3         4         5\n",
       "0.01   0.544503  0.636264  0.692386  0.690612  0.672849\n",
       "0.05   0.542877  0.636688  0.682427  0.689826  0.668406\n",
       "0.10   0.540569  0.636454  0.676009  0.687418  0.680220\n",
       "0.50   0.510870  0.631286  0.646571  0.655153  0.647349\n",
       "1.00   0.484399  0.580630  0.593550  0.616546  0.623451\n",
       "5.00   0.416243  0.521021  0.468887  0.473800  0.473529\n",
       "10.00  0.338867  0.390363  0.272261  0.279209  0.278518"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ab:\n",
      "The best model has degree 4 and Lambda = 0.01.\n",
      "The best model has R2 = 0.7947496261482627.\n",
      "\n",
      "hf:\n",
      "The best model has degree 3 and Lambda = 0.1.\n",
      "The best model has R2 = 0.6620516783088833.\n",
      "\n",
      "ir:\n",
      "The best model has degree 3 and Lambda = 0.01.\n",
      "The best model has R2 = 0.6923856081113988.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "lambdas = [.01,.05,.1,.5,1,5,10]\n",
    "degrees = np.arange(1,6)\n",
    "ab_lasso_scores = np.zeros((len(lambdas),len(degrees)))\n",
    "hf_lasso_scores = np.zeros((len(lambdas),len(degrees)))\n",
    "ir_lasso_scores = np.zeros((len(lambdas),len(degrees)))\n",
    "\n",
    "for ind1, alpha in enumerate(lambdas):\n",
    "    for ind2, degree in enumerate(degrees):\n",
    "        lasso = Lasso(alpha=alpha)\n",
    "        result,_ = display_all_results(lasso, X_df, y_df, \n",
    "                                     if_display=False, if_stand=True, \n",
    "                                     poly_deg=degree)\n",
    "        \n",
    "        ab_lasso_scores[ind1][ind2] = result[0].r2[1]\n",
    "        hf_lasso_scores[ind1][ind2] = result[1].r2[1]\n",
    "        ir_lasso_scores[ind1][ind2] = result[2].r2[1]\n",
    "\n",
    "display(pd.DataFrame(ab_lasso_scores, index=lambdas, columns=degrees))\n",
    "display(pd.DataFrame(hf_lasso_scores, index=lambdas, columns=degrees))\n",
    "display(pd.DataFrame(ir_lasso_scores, index=lambdas, columns=degrees))\n",
    "\n",
    "scores_list = [ab_lasso_scores, hf_lasso_scores, ir_lasso_scores]\n",
    "\n",
    "for ind, score in enumerate(scores_list):\n",
    "    best_score = np.max(score)\n",
    "    best_degree_ind = np.argmax(np.max(score, axis=0))\n",
    "    best_alpha_ind = np.argmax(np.max(score, axis=1))\n",
    "    best_degree = degrees[best_degree_ind]\n",
    "    best_alpha = lambdas[best_alpha_ind]\n",
    "    print(angs[ind] + ':')\n",
    "    print(\"The best model has degree {} and Lambda = {}.\".format(best_degree, best_alpha))                                                                      \n",
    "    print(\"The best model has R2 = {}.\\n\".format(best_score))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0.01</th>\n",
       "      <td>0.779119</td>\n",
       "      <td>0.789635</td>\n",
       "      <td>0.803561</td>\n",
       "      <td>0.803659</td>\n",
       "      <td>0.802627</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.05</th>\n",
       "      <td>0.779186</td>\n",
       "      <td>0.789338</td>\n",
       "      <td>0.800218</td>\n",
       "      <td>0.800828</td>\n",
       "      <td>0.800438</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.10</th>\n",
       "      <td>0.779117</td>\n",
       "      <td>0.788600</td>\n",
       "      <td>0.797330</td>\n",
       "      <td>0.798258</td>\n",
       "      <td>0.799138</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.50</th>\n",
       "      <td>0.777495</td>\n",
       "      <td>0.784789</td>\n",
       "      <td>0.789073</td>\n",
       "      <td>0.787980</td>\n",
       "      <td>0.788906</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1.00</th>\n",
       "      <td>0.770715</td>\n",
       "      <td>0.775967</td>\n",
       "      <td>0.777334</td>\n",
       "      <td>0.775840</td>\n",
       "      <td>0.776503</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5.00</th>\n",
       "      <td>0.725592</td>\n",
       "      <td>0.725592</td>\n",
       "      <td>0.691094</td>\n",
       "      <td>0.690424</td>\n",
       "      <td>0.687228</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10.00</th>\n",
       "      <td>0.656157</td>\n",
       "      <td>0.656156</td>\n",
       "      <td>0.522837</td>\n",
       "      <td>0.522790</td>\n",
       "      <td>0.504810</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              1         2         3         4         5\n",
       "0.01   0.779119  0.789635  0.803561  0.803659  0.802627\n",
       "0.05   0.779186  0.789338  0.800218  0.800828  0.800438\n",
       "0.10   0.779117  0.788600  0.797330  0.798258  0.799138\n",
       "0.50   0.777495  0.784789  0.789073  0.787980  0.788906\n",
       "1.00   0.770715  0.775967  0.777334  0.775840  0.776503\n",
       "5.00   0.725592  0.725592  0.691094  0.690424  0.687228\n",
       "10.00  0.656157  0.656156  0.522837  0.522790  0.504810"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0.01</th>\n",
       "      <td>0.618571</td>\n",
       "      <td>0.656976</td>\n",
       "      <td>0.693268</td>\n",
       "      <td>0.688790</td>\n",
       "      <td>0.690049</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.05</th>\n",
       "      <td>0.621759</td>\n",
       "      <td>0.656656</td>\n",
       "      <td>0.691952</td>\n",
       "      <td>0.690097</td>\n",
       "      <td>0.687100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.10</th>\n",
       "      <td>0.623666</td>\n",
       "      <td>0.655164</td>\n",
       "      <td>0.686706</td>\n",
       "      <td>0.687112</td>\n",
       "      <td>0.684236</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.50</th>\n",
       "      <td>0.628017</td>\n",
       "      <td>0.645855</td>\n",
       "      <td>0.659005</td>\n",
       "      <td>0.666185</td>\n",
       "      <td>0.668133</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1.00</th>\n",
       "      <td>0.628140</td>\n",
       "      <td>0.644823</td>\n",
       "      <td>0.647316</td>\n",
       "      <td>0.643878</td>\n",
       "      <td>0.650485</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5.00</th>\n",
       "      <td>0.589109</td>\n",
       "      <td>0.589106</td>\n",
       "      <td>0.557178</td>\n",
       "      <td>0.563974</td>\n",
       "      <td>0.554447</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10.00</th>\n",
       "      <td>0.497926</td>\n",
       "      <td>0.496965</td>\n",
       "      <td>0.404584</td>\n",
       "      <td>0.410871</td>\n",
       "      <td>0.377001</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              1         2         3         4         5\n",
       "0.01   0.618571  0.656976  0.693268  0.688790  0.690049\n",
       "0.05   0.621759  0.656656  0.691952  0.690097  0.687100\n",
       "0.10   0.623666  0.655164  0.686706  0.687112  0.684236\n",
       "0.50   0.628017  0.645855  0.659005  0.666185  0.668133\n",
       "1.00   0.628140  0.644823  0.647316  0.643878  0.650485\n",
       "5.00   0.589109  0.589106  0.557178  0.563974  0.554447\n",
       "10.00  0.497926  0.496965  0.404584  0.410871  0.377001"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0.01</th>\n",
       "      <td>0.585287</td>\n",
       "      <td>0.644917</td>\n",
       "      <td>0.698714</td>\n",
       "      <td>0.692851</td>\n",
       "      <td>0.678573</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.05</th>\n",
       "      <td>0.584840</td>\n",
       "      <td>0.650377</td>\n",
       "      <td>0.690849</td>\n",
       "      <td>0.693854</td>\n",
       "      <td>0.673450</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.10</th>\n",
       "      <td>0.581924</td>\n",
       "      <td>0.651922</td>\n",
       "      <td>0.681489</td>\n",
       "      <td>0.688877</td>\n",
       "      <td>0.679603</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0.50</th>\n",
       "      <td>0.540373</td>\n",
       "      <td>0.629923</td>\n",
       "      <td>0.648876</td>\n",
       "      <td>0.659081</td>\n",
       "      <td>0.653771</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1.00</th>\n",
       "      <td>0.518787</td>\n",
       "      <td>0.583766</td>\n",
       "      <td>0.605829</td>\n",
       "      <td>0.620793</td>\n",
       "      <td>0.630065</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5.00</th>\n",
       "      <td>0.407538</td>\n",
       "      <td>0.513806</td>\n",
       "      <td>0.464434</td>\n",
       "      <td>0.469021</td>\n",
       "      <td>0.468557</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10.00</th>\n",
       "      <td>0.332317</td>\n",
       "      <td>0.385794</td>\n",
       "      <td>0.267615</td>\n",
       "      <td>0.274663</td>\n",
       "      <td>0.273660</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              1         2         3         4         5\n",
       "0.01   0.585287  0.644917  0.698714  0.692851  0.678573\n",
       "0.05   0.584840  0.650377  0.690849  0.693854  0.673450\n",
       "0.10   0.581924  0.651922  0.681489  0.688877  0.679603\n",
       "0.50   0.540373  0.629923  0.648876  0.659081  0.653771\n",
       "1.00   0.518787  0.583766  0.605829  0.620793  0.630065\n",
       "5.00   0.407538  0.513806  0.464434  0.469021  0.468557\n",
       "10.00  0.332317  0.385794  0.267615  0.274663  0.273660"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ab:\n",
      "The best model has degree 4 and Lambda = 0.01.\n",
      "The best model has R2 = 0.8036594067228682.\n",
      "\n",
      "hf:\n",
      "The best model has degree 3 and Lambda = 0.01.\n",
      "The best model has R2 = 0.6932682670274342.\n",
      "\n",
      "ir:\n",
      "The best model has degree 3 and Lambda = 0.01.\n",
      "The best model has R2 = 0.6987143671261664.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "lambdas = [.01,.05,.1,.5,1,5,10]\n",
    "degrees = np.arange(1,6)\n",
    "ab_lasso_scores = np.zeros((len(lambdas),len(degrees)))\n",
    "hf_lasso_scores = np.zeros((len(lambdas),len(degrees)))\n",
    "ir_lasso_scores = np.zeros((len(lambdas),len(degrees)))\n",
    "\n",
    "for ind1, alpha in enumerate(lambdas):\n",
    "    for ind2, degree in enumerate(degrees):\n",
    "        lasso = Lasso(alpha=alpha)\n",
    "        result,_ = display_all_results(lasso, X_df_added, y_df_added,\n",
    "                                     if_display=False, if_stand=True, \n",
    "                                     poly_deg=degree)\n",
    "        \n",
    "        ab_lasso_scores[ind1][ind2] = result[0].r2[1]\n",
    "        hf_lasso_scores[ind1][ind2] = result[1].r2[1]\n",
    "        ir_lasso_scores[ind1][ind2] = result[2].r2[1]\n",
    "\n",
    "display(pd.DataFrame(ab_lasso_scores, index=lambdas, columns=degrees))\n",
    "display(pd.DataFrame(hf_lasso_scores, index=lambdas, columns=degrees))\n",
    "display(pd.DataFrame(ir_lasso_scores, index=lambdas, columns=degrees))\n",
    "\n",
    "scores_list = [ab_lasso_scores, hf_lasso_scores, ir_lasso_scores]\n",
    "\n",
    "for ind, score in enumerate(scores_list):\n",
    "    best_score = np.max(score)\n",
    "    best_degree_ind = np.argmax(np.max(score, axis=0))\n",
    "    best_alpha_ind = np.argmax(np.max(score, axis=1))\n",
    "    best_degree = degrees[best_degree_ind]\n",
    "    best_alpha = lambdas[best_alpha_ind]\n",
    "    print(angs[ind] + ':')\n",
    "    print(\"The best model has degree {} and Lambda = {}.\".format(best_degree, best_alpha))                                                                      \n",
    "    print(\"The best model has R2 = {}.\\n\".format(best_score))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**G. Elastic Net**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# lambdas = [.01,.05,.1,.5,1,5,10]\n",
    "# ratios = [.1, .5, .7, .9, .95, .99]\n",
    "# degrees = np.arange(1,11)\n",
    "# ab_scores, hf_scores, ir_scores = [], [], []\n",
    "# ab_models, hf_models, ir_models = [], [], []\n",
    "\n",
    "# for deg in degrees:\n",
    "#     print('\\nDegree = ', deg)\n",
    "#     en = ElasticNetCV(cv=5, fit_intercept=False, alphas=lambdas, l1_ratio=ratios)\n",
    "#     result, models = display_all_results(en, df[sens], df, poly_deg=deg)\n",
    "#     ab_scores.append(result[0].r2[1])\n",
    "#     ab_models.append(models[0])\n",
    "#     hf_scores.append(result[1].r2[1])\n",
    "#     hf_models.append(models[1])\n",
    "#     ir_scores.append(result[2].r2[1])\n",
    "#     ir_models.append(models[2])\n",
    "    \n",
    "# scores_list = [ab_scores, hf_scores, ir_scores]\n",
    "# find_best_param(scores_list, degrees, 'degree')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**H. Decision Tree**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.639681</td>\n",
       "      <td>10.079009</td>\n",
       "      <td>19.729670</td>\n",
       "      <td>24.346551</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.522333</td>\n",
       "      <td>10.700861</td>\n",
       "      <td>22.758666</td>\n",
       "      <td>27.706091</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.563725</td>\n",
       "      <td>11.493524</td>\n",
       "      <td>20.711009</td>\n",
       "      <td>26.540602</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.379369</td>\n",
       "      <td>14.882129</td>\n",
       "      <td>22.828766</td>\n",
       "      <td>29.439111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.501876</td>\n",
       "      <td>13.460402</td>\n",
       "      <td>22.638948</td>\n",
       "      <td>29.783013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.430273</td>\n",
       "      <td>11.378256</td>\n",
       "      <td>17.689481</td>\n",
       "      <td>24.298213</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.639681  10.079009  19.729670  24.346551\n",
       "   Test   0.522333  10.700861  22.758666  27.706091\n",
       "hf Train  0.563725  11.493524  20.711009  26.540602\n",
       "   Test   0.379369  14.882129  22.828766  29.439111\n",
       "ir Train  0.501876  13.460402  22.638948  29.783013\n",
       "   Test   0.430273  11.378256  17.689481  24.298213"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.811509</td>\n",
       "      <td>15.472368</td>\n",
       "      <td>12.888541</td>\n",
       "      <td>17.609209</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.632528</td>\n",
       "      <td>13.997110</td>\n",
       "      <td>18.846128</td>\n",
       "      <td>24.301017</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.692377</td>\n",
       "      <td>14.117120</td>\n",
       "      <td>17.660714</td>\n",
       "      <td>22.286417</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.535240</td>\n",
       "      <td>16.348643</td>\n",
       "      <td>20.080416</td>\n",
       "      <td>25.475476</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.641930</td>\n",
       "      <td>14.052029</td>\n",
       "      <td>19.346855</td>\n",
       "      <td>25.251309</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.494775</td>\n",
       "      <td>13.654335</td>\n",
       "      <td>17.203533</td>\n",
       "      <td>22.881438</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.811509  15.472368  12.888541  17.609209\n",
       "   Test   0.632528  13.997110  18.846128  24.301017\n",
       "hf Train  0.692377  14.117120  17.660714  22.286417\n",
       "   Test   0.535240  16.348643  20.080416  25.475476\n",
       "ir Train  0.641930  14.052029  19.346855  25.251309\n",
       "   Test   0.494775  13.654335  17.203533  22.881438"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.873953</td>\n",
       "      <td>13.345052</td>\n",
       "      <td>10.570488</td>\n",
       "      <td>14.399897</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.720564</td>\n",
       "      <td>13.801018</td>\n",
       "      <td>15.986107</td>\n",
       "      <td>21.191119</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.760445</td>\n",
       "      <td>13.879898</td>\n",
       "      <td>15.460667</td>\n",
       "      <td>19.666765</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.596499</td>\n",
       "      <td>15.355888</td>\n",
       "      <td>18.598683</td>\n",
       "      <td>23.737233</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.687894</td>\n",
       "      <td>13.724964</td>\n",
       "      <td>17.896823</td>\n",
       "      <td>23.574959</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.547752</td>\n",
       "      <td>13.622054</td>\n",
       "      <td>15.609055</td>\n",
       "      <td>21.648582</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.873953  13.345052  10.570488  14.399897\n",
       "   Test   0.720564  13.801018  15.986107  21.191119\n",
       "hf Train  0.760445  13.879898  15.460667  19.666765\n",
       "   Test   0.596499  15.355888  18.598683  23.737233\n",
       "ir Train  0.687894  13.724964  17.896823  23.574959\n",
       "   Test   0.547752  13.622054  15.609055  21.648582"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.907112</td>\n",
       "      <td>11.708424</td>\n",
       "      <td>8.863613</td>\n",
       "      <td>12.361542</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.763346</td>\n",
       "      <td>13.400826</td>\n",
       "      <td>14.779995</td>\n",
       "      <td>19.501576</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.808200</td>\n",
       "      <td>13.702454</td>\n",
       "      <td>13.509600</td>\n",
       "      <td>17.597686</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.610192</td>\n",
       "      <td>15.541913</td>\n",
       "      <td>17.602971</td>\n",
       "      <td>23.330999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.724240</td>\n",
       "      <td>14.901807</td>\n",
       "      <td>16.832647</td>\n",
       "      <td>22.159797</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.559353</td>\n",
       "      <td>13.101883</td>\n",
       "      <td>15.545916</td>\n",
       "      <td>21.369101</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.907112  11.708424   8.863613  12.361542\n",
       "   Test   0.763346  13.400826  14.779995  19.501576\n",
       "hf Train  0.808200  13.702454  13.509600  17.597686\n",
       "   Test   0.610192  15.541913  17.602971  23.330999\n",
       "ir Train  0.724240  14.901807  16.832647  22.159797\n",
       "   Test   0.559353  13.101883  15.545916  21.369101"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.923017</td>\n",
       "      <td>10.830834</td>\n",
       "      <td>8.101531</td>\n",
       "      <td>11.253628</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.768775</td>\n",
       "      <td>13.539145</td>\n",
       "      <td>14.717024</td>\n",
       "      <td>19.276572</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.836900</td>\n",
       "      <td>13.151763</td>\n",
       "      <td>12.334235</td>\n",
       "      <td>16.227749</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.604406</td>\n",
       "      <td>15.586443</td>\n",
       "      <td>17.579045</td>\n",
       "      <td>23.503513</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.755743</td>\n",
       "      <td>14.679541</td>\n",
       "      <td>15.418583</td>\n",
       "      <td>20.855650</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.604190</td>\n",
       "      <td>13.211350</td>\n",
       "      <td>14.669321</td>\n",
       "      <td>20.252776</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.923017  10.830834   8.101531  11.253628\n",
       "   Test   0.768775  13.539145  14.717024  19.276572\n",
       "hf Train  0.836900  13.151763  12.334235  16.227749\n",
       "   Test   0.604406  15.586443  17.579045  23.503513\n",
       "ir Train  0.755743  14.679541  15.418583  20.855650\n",
       "   Test   0.604190  13.211350  14.669321  20.252776"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.935270</td>\n",
       "      <td>9.932410</td>\n",
       "      <td>7.381882</td>\n",
       "      <td>10.319233</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.768827</td>\n",
       "      <td>13.791039</td>\n",
       "      <td>14.699396</td>\n",
       "      <td>19.274405</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.865232</td>\n",
       "      <td>12.149262</td>\n",
       "      <td>11.088142</td>\n",
       "      <td>14.751066</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.591203</td>\n",
       "      <td>16.081100</td>\n",
       "      <td>17.882996</td>\n",
       "      <td>23.892506</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.791134</td>\n",
       "      <td>14.415538</td>\n",
       "      <td>13.992408</td>\n",
       "      <td>19.285607</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.595086</td>\n",
       "      <td>13.553450</td>\n",
       "      <td>14.584232</td>\n",
       "      <td>20.484357</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.935270   9.932410   7.381882  10.319233\n",
       "   Test   0.768827  13.791039  14.699396  19.274405\n",
       "hf Train  0.865232  12.149262  11.088142  14.751066\n",
       "   Test   0.591203  16.081100  17.882996  23.892506\n",
       "ir Train  0.791134  14.415538  13.992408  19.285607\n",
       "   Test   0.595086  13.553450  14.584232  20.484357"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.947434</td>\n",
       "      <td>9.066582</td>\n",
       "      <td>6.635309</td>\n",
       "      <td>9.299251</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.765342</td>\n",
       "      <td>13.918009</td>\n",
       "      <td>14.798577</td>\n",
       "      <td>19.419153</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.889062</td>\n",
       "      <td>11.237882</td>\n",
       "      <td>9.914960</td>\n",
       "      <td>13.383557</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.569634</td>\n",
       "      <td>16.644248</td>\n",
       "      <td>18.348375</td>\n",
       "      <td>24.514728</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.827182</td>\n",
       "      <td>13.766712</td>\n",
       "      <td>12.274573</td>\n",
       "      <td>17.542594</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.569279</td>\n",
       "      <td>13.713434</td>\n",
       "      <td>14.850286</td>\n",
       "      <td>21.127065</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.947434   9.066582   6.635309   9.299251\n",
       "   Test   0.765342  13.918009  14.798577  19.419153\n",
       "hf Train  0.889062  11.237882   9.914960  13.383557\n",
       "   Test   0.569634  16.644248  18.348375  24.514728\n",
       "ir Train  0.827182  13.766712  12.274573  17.542594\n",
       "   Test   0.569279  13.713434  14.850286  21.127065"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.959824</td>\n",
       "      <td>7.915598</td>\n",
       "      <td>5.681986</td>\n",
       "      <td>8.129751</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.754650</td>\n",
       "      <td>14.639901</td>\n",
       "      <td>14.849875</td>\n",
       "      <td>19.856631</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.912428</td>\n",
       "      <td>10.058343</td>\n",
       "      <td>8.581950</td>\n",
       "      <td>11.890855</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.554451</td>\n",
       "      <td>17.242083</td>\n",
       "      <td>18.574571</td>\n",
       "      <td>24.943417</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.852632</td>\n",
       "      <td>12.684696</td>\n",
       "      <td>11.023932</td>\n",
       "      <td>16.199517</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.576055</td>\n",
       "      <td>14.255814</td>\n",
       "      <td>14.740912</td>\n",
       "      <td>20.960217</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.959824   7.915598   5.681986   8.129751\n",
       "   Test   0.754650  14.639901  14.849875  19.856631\n",
       "hf Train  0.912428  10.058343   8.581950  11.890855\n",
       "   Test   0.554451  17.242083  18.574571  24.943417\n",
       "ir Train  0.852632  12.684696  11.023932  16.199517\n",
       "   Test   0.576055  14.255814  14.740912  20.960217"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.970418</td>\n",
       "      <td>6.756389</td>\n",
       "      <td>4.735049</td>\n",
       "      <td>6.976047</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.743741</td>\n",
       "      <td>15.288516</td>\n",
       "      <td>15.188612</td>\n",
       "      <td>20.293264</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.933464</td>\n",
       "      <td>8.668381</td>\n",
       "      <td>7.328227</td>\n",
       "      <td>10.364728</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.544232</td>\n",
       "      <td>17.835999</td>\n",
       "      <td>18.971319</td>\n",
       "      <td>25.227822</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.878063</td>\n",
       "      <td>11.506015</td>\n",
       "      <td>9.796571</td>\n",
       "      <td>14.735580</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.552217</td>\n",
       "      <td>14.874883</td>\n",
       "      <td>14.963821</td>\n",
       "      <td>21.541447</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.970418   6.756389   4.735049   6.976047\n",
       "   Test   0.743741  15.288516  15.188612  20.293264\n",
       "hf Train  0.933464   8.668381   7.328227  10.364728\n",
       "   Test   0.544232  17.835999  18.971319  25.227822\n",
       "ir Train  0.878063  11.506015   9.796571  14.735580\n",
       "   Test   0.552217  14.874883  14.963821  21.541447"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.979245</td>\n",
       "      <td>5.648848</td>\n",
       "      <td>3.840348</td>\n",
       "      <td>5.843275</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.733526</td>\n",
       "      <td>15.883151</td>\n",
       "      <td>15.398961</td>\n",
       "      <td>20.693792</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.950468</td>\n",
       "      <td>7.526911</td>\n",
       "      <td>5.977192</td>\n",
       "      <td>8.942812</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.526431</td>\n",
       "      <td>18.328829</td>\n",
       "      <td>18.947412</td>\n",
       "      <td>25.715783</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.900467</td>\n",
       "      <td>10.519037</td>\n",
       "      <td>8.580386</td>\n",
       "      <td>13.313261</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.515736</td>\n",
       "      <td>15.491907</td>\n",
       "      <td>15.359973</td>\n",
       "      <td>22.401757</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.979245   5.648848   3.840348   5.843275\n",
       "   Test   0.733526  15.883151  15.398961  20.693792\n",
       "hf Train  0.950468   7.526911   5.977192   8.942812\n",
       "   Test   0.526431  18.328829  18.947412  25.715783\n",
       "ir Train  0.900467  10.519037   8.580386  13.313261\n",
       "   Test   0.515736  15.491907  15.359973  22.401757"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.986819</td>\n",
       "      <td>4.528793</td>\n",
       "      <td>2.967330</td>\n",
       "      <td>4.656679</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.729211</td>\n",
       "      <td>16.068177</td>\n",
       "      <td>15.364801</td>\n",
       "      <td>20.860643</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.965374</td>\n",
       "      <td>6.158298</td>\n",
       "      <td>4.720288</td>\n",
       "      <td>7.477042</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.507598</td>\n",
       "      <td>18.779981</td>\n",
       "      <td>19.643203</td>\n",
       "      <td>26.222129</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.918130</td>\n",
       "      <td>9.552977</td>\n",
       "      <td>7.380957</td>\n",
       "      <td>12.074317</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.518677</td>\n",
       "      <td>15.319196</td>\n",
       "      <td>15.386745</td>\n",
       "      <td>22.333633</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.986819   4.528793   2.967330   4.656679\n",
       "   Test   0.729211  16.068177  15.364801  20.860643\n",
       "hf Train  0.965374   6.158298   4.720288   7.477042\n",
       "   Test   0.507598  18.779981  19.643203  26.222129\n",
       "ir Train  0.918130   9.552977   7.380957  12.074317\n",
       "   Test   0.518677  15.319196  15.386745  22.333633"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.991588</td>\n",
       "      <td>3.480460</td>\n",
       "      <td>2.218500</td>\n",
       "      <td>3.720075</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.709304</td>\n",
       "      <td>16.848507</td>\n",
       "      <td>15.797408</td>\n",
       "      <td>21.613824</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.976450</td>\n",
       "      <td>4.910137</td>\n",
       "      <td>3.593145</td>\n",
       "      <td>6.166299</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.508675</td>\n",
       "      <td>19.132245</td>\n",
       "      <td>19.540915</td>\n",
       "      <td>26.193445</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.934348</td>\n",
       "      <td>8.519367</td>\n",
       "      <td>6.256097</td>\n",
       "      <td>10.812460</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.484295</td>\n",
       "      <td>15.963369</td>\n",
       "      <td>16.164667</td>\n",
       "      <td>23.117542</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.991588   3.480460   2.218500   3.720075\n",
       "   Test   0.709304  16.848507  15.797408  21.613824\n",
       "hf Train  0.976450   4.910137   3.593145   6.166299\n",
       "   Test   0.508675  19.132245  19.540915  26.193445\n",
       "ir Train  0.934348   8.519367   6.256097  10.812460\n",
       "   Test   0.484295  15.963369  16.164667  23.117542"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.994753</td>\n",
       "      <td>2.617675</td>\n",
       "      <td>1.647428</td>\n",
       "      <td>2.938072</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.704294</td>\n",
       "      <td>17.047014</td>\n",
       "      <td>15.910358</td>\n",
       "      <td>21.799294</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.985097</td>\n",
       "      <td>3.683804</td>\n",
       "      <td>2.497696</td>\n",
       "      <td>4.905319</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.492048</td>\n",
       "      <td>19.292477</td>\n",
       "      <td>19.881732</td>\n",
       "      <td>26.632943</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.950738</td>\n",
       "      <td>7.292563</td>\n",
       "      <td>5.088952</td>\n",
       "      <td>9.366061</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.453710</td>\n",
       "      <td>16.681806</td>\n",
       "      <td>16.684430</td>\n",
       "      <td>23.793174</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.994753   2.617675   1.647428   2.938072\n",
       "   Test   0.704294  17.047014  15.910358  21.799294\n",
       "hf Train  0.985097   3.683804   2.497696   4.905319\n",
       "   Test   0.492048  19.292477  19.881732  26.632943\n",
       "ir Train  0.950738   7.292563   5.088952   9.366061\n",
       "   Test   0.453710  16.681806  16.684430  23.793174"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.996747</td>\n",
       "      <td>1.912333</td>\n",
       "      <td>1.195463</td>\n",
       "      <td>2.313326</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.685710</td>\n",
       "      <td>17.732956</td>\n",
       "      <td>16.397206</td>\n",
       "      <td>22.473875</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.990086</td>\n",
       "      <td>2.819078</td>\n",
       "      <td>1.769216</td>\n",
       "      <td>4.000966</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.486538</td>\n",
       "      <td>19.604448</td>\n",
       "      <td>20.035085</td>\n",
       "      <td>26.777023</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.963838</td>\n",
       "      <td>6.252854</td>\n",
       "      <td>4.147879</td>\n",
       "      <td>8.024633</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.415931</td>\n",
       "      <td>17.130801</td>\n",
       "      <td>17.324245</td>\n",
       "      <td>24.602151</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.996747   1.912333   1.195463   2.313326\n",
       "   Test   0.685710  17.732956  16.397206  22.473875\n",
       "hf Train  0.990086   2.819078   1.769216   4.000966\n",
       "   Test   0.486538  19.604448  20.035085  26.777023\n",
       "ir Train  0.963838   6.252854   4.147879   8.024633\n",
       "   Test   0.415931  17.130801  17.324245  24.602151"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.997876</td>\n",
       "      <td>1.415077</td>\n",
       "      <td>0.865252</td>\n",
       "      <td>1.869399</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.686124</td>\n",
       "      <td>17.823236</td>\n",
       "      <td>16.509482</td>\n",
       "      <td>22.459068</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.993227</td>\n",
       "      <td>2.135472</td>\n",
       "      <td>1.206447</td>\n",
       "      <td>3.306931</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.477996</td>\n",
       "      <td>19.686700</td>\n",
       "      <td>20.177447</td>\n",
       "      <td>26.998840</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.976989</td>\n",
       "      <td>5.016687</td>\n",
       "      <td>3.103440</td>\n",
       "      <td>6.401323</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.385686</td>\n",
       "      <td>18.202967</td>\n",
       "      <td>17.741757</td>\n",
       "      <td>25.231095</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.997876   1.415077   0.865252   1.869399\n",
       "   Test   0.686124  17.823236  16.509482  22.459068\n",
       "hf Train  0.993227   2.135472   1.206447   3.306931\n",
       "   Test   0.477996  19.686700  20.177447  26.998840\n",
       "ir Train  0.976989   5.016687   3.103440   6.401323\n",
       "   Test   0.385686  18.202967  17.741757  25.231095"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.998570</td>\n",
       "      <td>1.090708</td>\n",
       "      <td>0.625983</td>\n",
       "      <td>1.533694</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.695730</td>\n",
       "      <td>17.548725</td>\n",
       "      <td>16.229508</td>\n",
       "      <td>22.112724</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.995674</td>\n",
       "      <td>1.624431</td>\n",
       "      <td>0.841414</td>\n",
       "      <td>2.642818</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.476814</td>\n",
       "      <td>19.588980</td>\n",
       "      <td>20.129032</td>\n",
       "      <td>27.029367</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.984673</td>\n",
       "      <td>4.043022</td>\n",
       "      <td>2.343562</td>\n",
       "      <td>5.224262</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.371957</td>\n",
       "      <td>18.029060</td>\n",
       "      <td>17.923814</td>\n",
       "      <td>25.511470</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.998570   1.090708   0.625983   1.533694\n",
       "   Test   0.695730  17.548725  16.229508  22.112724\n",
       "hf Train  0.995674   1.624431   0.841414   2.642818\n",
       "   Test   0.476814  19.588980  20.129032  27.029367\n",
       "ir Train  0.984673   4.043022   2.343562   5.224262\n",
       "   Test   0.371957  18.029060  17.923814  25.511470"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.999089</td>\n",
       "      <td>0.847492</td>\n",
       "      <td>0.445374</td>\n",
       "      <td>1.224240</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.691387</td>\n",
       "      <td>17.519069</td>\n",
       "      <td>16.407749</td>\n",
       "      <td>22.269975</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.997056</td>\n",
       "      <td>1.243823</td>\n",
       "      <td>0.601229</td>\n",
       "      <td>2.180147</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.485972</td>\n",
       "      <td>19.651031</td>\n",
       "      <td>20.058619</td>\n",
       "      <td>26.791774</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.989826</td>\n",
       "      <td>3.149553</td>\n",
       "      <td>1.726915</td>\n",
       "      <td>4.256341</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.357499</td>\n",
       "      <td>18.437835</td>\n",
       "      <td>18.254114</td>\n",
       "      <td>25.803446</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.999089   0.847492   0.445374   1.224240\n",
       "   Test   0.691387  17.519069  16.407749  22.269975\n",
       "hf Train  0.997056   1.243823   0.601229   2.180147\n",
       "   Test   0.485972  19.651031  20.058619  26.791774\n",
       "ir Train  0.989826   3.149553   1.726915   4.256341\n",
       "   Test   0.357499  18.437835  18.254114  25.803446"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.999500</td>\n",
       "      <td>0.637480</td>\n",
       "      <td>0.305315</td>\n",
       "      <td>0.907321</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.697066</td>\n",
       "      <td>17.314852</td>\n",
       "      <td>16.219227</td>\n",
       "      <td>22.064126</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.998036</td>\n",
       "      <td>0.986554</td>\n",
       "      <td>0.432952</td>\n",
       "      <td>1.780898</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.468525</td>\n",
       "      <td>19.927785</td>\n",
       "      <td>20.416348</td>\n",
       "      <td>27.242665</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.993168</td>\n",
       "      <td>2.557132</td>\n",
       "      <td>1.288790</td>\n",
       "      <td>3.487933</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.343639</td>\n",
       "      <td>19.258499</td>\n",
       "      <td>18.581088</td>\n",
       "      <td>26.080275</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.999500   0.637480   0.305315   0.907321\n",
       "   Test   0.697066  17.314852  16.219227  22.064126\n",
       "hf Train  0.998036   0.986554   0.432952   1.780898\n",
       "   Test   0.468525  19.927785  20.416348  27.242665\n",
       "ir Train  0.993168   2.557132   1.288790   3.487933\n",
       "   Test   0.343639  19.258499  18.581088  26.080275"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.999714</td>\n",
       "      <td>0.499455</td>\n",
       "      <td>0.202389</td>\n",
       "      <td>0.686171</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.681243</td>\n",
       "      <td>17.654027</td>\n",
       "      <td>16.535641</td>\n",
       "      <td>22.633007</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.998856</td>\n",
       "      <td>0.725951</td>\n",
       "      <td>0.280992</td>\n",
       "      <td>1.359147</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.456032</td>\n",
       "      <td>20.132108</td>\n",
       "      <td>20.582496</td>\n",
       "      <td>27.560974</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.995663</td>\n",
       "      <td>1.949241</td>\n",
       "      <td>0.936828</td>\n",
       "      <td>2.778942</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.358326</td>\n",
       "      <td>19.021596</td>\n",
       "      <td>18.408977</td>\n",
       "      <td>25.786850</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.999714   0.499455   0.202389   0.686171\n",
       "   Test   0.681243  17.654027  16.535641  22.633007\n",
       "hf Train  0.998856   0.725951   0.280992   1.359147\n",
       "   Test   0.456032  20.132108  20.582496  27.560974\n",
       "ir Train  0.995663   1.949241   0.936828   2.778942\n",
       "   Test   0.358326  19.021596  18.408977  25.786850"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.999847</td>\n",
       "      <td>0.405331</td>\n",
       "      <td>0.127907</td>\n",
       "      <td>0.502041</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.689802</td>\n",
       "      <td>17.676675</td>\n",
       "      <td>16.372481</td>\n",
       "      <td>22.327075</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.999323</td>\n",
       "      <td>0.570791</td>\n",
       "      <td>0.194044</td>\n",
       "      <td>1.045817</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.460945</td>\n",
       "      <td>20.378715</td>\n",
       "      <td>20.470992</td>\n",
       "      <td>27.436247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.997137</td>\n",
       "      <td>1.491291</td>\n",
       "      <td>0.692388</td>\n",
       "      <td>2.257760</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.349607</td>\n",
       "      <td>18.860585</td>\n",
       "      <td>18.601303</td>\n",
       "      <td>25.961440</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.999847   0.405331   0.127907   0.502041\n",
       "   Test   0.689802  17.676675  16.372481  22.327075\n",
       "hf Train  0.999323   0.570791   0.194044   1.045817\n",
       "   Test   0.460945  20.378715  20.470992  27.436247\n",
       "ir Train  0.997137   1.491291   0.692388   2.257760\n",
       "   Test   0.349607  18.860585  18.601303  25.961440"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ab:\n",
      "The best model has depth of 6.\n",
      "The best model has R2 = 0.7688269891757941.\n",
      "\n",
      "hf:\n",
      "The best model has depth of 4.\n",
      "The best model has R2 = 0.6101921165973727.\n",
      "\n",
      "ir:\n",
      "The best model has depth of 5.\n",
      "The best model has R2 = 0.6041895435296984.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "depths = list(range(1, 21))\n",
    "ab_scores, hf_scores, ir_scores = [], [], []\n",
    "\n",
    "for depth in depths:\n",
    "    dt = DecisionTreeRegressor(max_depth = depth)\n",
    "    result, _ = display_all_results(dt, X_df, y_df, poly_deg=5)\n",
    "    ab_scores.append(result[0].r2[1])\n",
    "    hf_scores.append(result[1].r2[1])\n",
    "    ir_scores.append(result[2].r2[1])\n",
    "    \n",
    "scores_list = [ab_scores, hf_scores, ir_scores]\n",
    "find_best_param(scores_list, depths, 'depth')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.638356</td>\n",
       "      <td>10.069008</td>\n",
       "      <td>19.760894</td>\n",
       "      <td>24.374538</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.520265</td>\n",
       "      <td>10.676689</td>\n",
       "      <td>22.775552</td>\n",
       "      <td>27.723879</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.563232</td>\n",
       "      <td>11.495636</td>\n",
       "      <td>20.758679</td>\n",
       "      <td>26.580700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.378456</td>\n",
       "      <td>14.876020</td>\n",
       "      <td>22.883147</td>\n",
       "      <td>29.474469</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.500261</td>\n",
       "      <td>13.382972</td>\n",
       "      <td>22.677199</td>\n",
       "      <td>29.814100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.410046</td>\n",
       "      <td>11.604096</td>\n",
       "      <td>17.887664</td>\n",
       "      <td>24.611573</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.638356  10.069008  19.760894  24.374538\n",
       "   Test   0.520265  10.676689  22.775552  27.723879\n",
       "hf Train  0.563232  11.495636  20.758679  26.580700\n",
       "   Test   0.378456  14.876020  22.883147  29.474469\n",
       "ir Train  0.500261  13.382972  22.677199  29.814100\n",
       "   Test   0.410046  11.604096  17.887664  24.611573"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.810719</td>\n",
       "      <td>15.473151</td>\n",
       "      <td>12.919438</td>\n",
       "      <td>17.633934</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.630297</td>\n",
       "      <td>13.986396</td>\n",
       "      <td>18.904819</td>\n",
       "      <td>24.337709</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.692340</td>\n",
       "      <td>14.125832</td>\n",
       "      <td>17.678504</td>\n",
       "      <td>22.308803</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.534935</td>\n",
       "      <td>16.354651</td>\n",
       "      <td>20.097220</td>\n",
       "      <td>25.495708</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.642407</td>\n",
       "      <td>13.987175</td>\n",
       "      <td>19.348301</td>\n",
       "      <td>25.219979</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.480912</td>\n",
       "      <td>13.729902</td>\n",
       "      <td>17.286913</td>\n",
       "      <td>23.086110</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.810719  15.473151  12.919438  17.633934\n",
       "   Test   0.630297  13.986396  18.904819  24.337709\n",
       "hf Train  0.692340  14.125832  17.678504  22.308803\n",
       "   Test   0.534935  16.354651  20.097220  25.495708\n",
       "ir Train  0.642407  13.987175  19.348301  25.219979\n",
       "   Test   0.480912  13.729902  17.286913  23.086110"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.873406</td>\n",
       "      <td>13.351629</td>\n",
       "      <td>10.596546</td>\n",
       "      <td>14.421258</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.718908</td>\n",
       "      <td>13.794343</td>\n",
       "      <td>16.033788</td>\n",
       "      <td>21.221566</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.760616</td>\n",
       "      <td>13.890368</td>\n",
       "      <td>15.502760</td>\n",
       "      <td>19.678319</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.596606</td>\n",
       "      <td>15.595939</td>\n",
       "      <td>18.559299</td>\n",
       "      <td>23.745149</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.698172</td>\n",
       "      <td>13.532657</td>\n",
       "      <td>17.800971</td>\n",
       "      <td>23.170207</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.589206</td>\n",
       "      <td>13.138301</td>\n",
       "      <td>15.207657</td>\n",
       "      <td>20.537245</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.873406  13.351629  10.596546  14.421258\n",
       "   Test   0.718908  13.794343  16.033788  21.221566\n",
       "hf Train  0.760616  13.890368  15.502760  19.678319\n",
       "   Test   0.596606  15.595939  18.559299  23.745149\n",
       "ir Train  0.698172  13.532657  17.800971  23.170207\n",
       "   Test   0.589206  13.138301  15.207657  20.537245"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.906886</td>\n",
       "      <td>11.711221</td>\n",
       "      <td>8.910220</td>\n",
       "      <td>12.368120</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.762990</td>\n",
       "      <td>13.357744</td>\n",
       "      <td>14.823951</td>\n",
       "      <td>19.486644</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.811025</td>\n",
       "      <td>13.407742</td>\n",
       "      <td>13.535714</td>\n",
       "      <td>17.484087</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.606444</td>\n",
       "      <td>15.624184</td>\n",
       "      <td>17.779037</td>\n",
       "      <td>23.453815</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.743489</td>\n",
       "      <td>13.039987</td>\n",
       "      <td>16.487302</td>\n",
       "      <td>21.360093</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.555297</td>\n",
       "      <td>14.131815</td>\n",
       "      <td>15.780245</td>\n",
       "      <td>21.368066</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.906886  11.711221   8.910220  12.368120\n",
       "   Test   0.762990  13.357744  14.823951  19.486644\n",
       "hf Train  0.811025  13.407742  13.535714  17.484087\n",
       "   Test   0.606444  15.624184  17.779037  23.453815\n",
       "ir Train  0.743489  13.039987  16.487302  21.360093\n",
       "   Test   0.555297  14.131815  15.780245  21.368066"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.926053</td>\n",
       "      <td>10.596920</td>\n",
       "      <td>7.940387</td>\n",
       "      <td>11.021915</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.773462</td>\n",
       "      <td>13.387373</td>\n",
       "      <td>14.448834</td>\n",
       "      <td>19.051288</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.847362</td>\n",
       "      <td>12.339260</td>\n",
       "      <td>11.944157</td>\n",
       "      <td>15.713489</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.601411</td>\n",
       "      <td>15.972320</td>\n",
       "      <td>17.706295</td>\n",
       "      <td>23.603303</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.782442</td>\n",
       "      <td>13.488497</td>\n",
       "      <td>15.037620</td>\n",
       "      <td>19.671526</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.547725</td>\n",
       "      <td>14.352358</td>\n",
       "      <td>15.085996</td>\n",
       "      <td>21.549222</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.926053  10.596920   7.940387  11.021915\n",
       "   Test   0.773462  13.387373  14.448834  19.051288\n",
       "hf Train  0.847362  12.339260  11.944157  15.713489\n",
       "   Test   0.601411  15.972320  17.706295  23.603303\n",
       "ir Train  0.782442  13.488497  15.037620  19.671526\n",
       "   Test   0.547725  14.352358  15.085996  21.549222"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.939771</td>\n",
       "      <td>9.549532</td>\n",
       "      <td>7.084320</td>\n",
       "      <td>9.947173</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.778031</td>\n",
       "      <td>13.533125</td>\n",
       "      <td>14.188678</td>\n",
       "      <td>18.858157</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.876176</td>\n",
       "      <td>11.337870</td>\n",
       "      <td>10.629511</td>\n",
       "      <td>14.152846</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.595798</td>\n",
       "      <td>16.463439</td>\n",
       "      <td>17.751661</td>\n",
       "      <td>23.768919</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.819450</td>\n",
       "      <td>12.715751</td>\n",
       "      <td>13.342843</td>\n",
       "      <td>17.920440</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.548035</td>\n",
       "      <td>14.950049</td>\n",
       "      <td>14.841446</td>\n",
       "      <td>21.541837</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.939771   9.549532   7.084320   9.947173\n",
       "   Test   0.778031  13.533125  14.188678  18.858157\n",
       "hf Train  0.876176  11.337870  10.629511  14.152846\n",
       "   Test   0.595798  16.463439  17.751661  23.768919\n",
       "ir Train  0.819450  12.715751  13.342843  17.920440\n",
       "   Test   0.548035  14.950049  14.841446  21.541837"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "7\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.952773</td>\n",
       "      <td>8.558584</td>\n",
       "      <td>6.272122</td>\n",
       "      <td>8.808285</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.773831</td>\n",
       "      <td>13.578869</td>\n",
       "      <td>14.179602</td>\n",
       "      <td>19.035762</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.903355</td>\n",
       "      <td>10.137690</td>\n",
       "      <td>9.208198</td>\n",
       "      <td>12.503466</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.619378</td>\n",
       "      <td>16.177199</td>\n",
       "      <td>17.130787</td>\n",
       "      <td>23.065189</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.850422</td>\n",
       "      <td>12.563766</td>\n",
       "      <td>11.660114</td>\n",
       "      <td>16.311138</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.511461</td>\n",
       "      <td>15.680311</td>\n",
       "      <td>15.048891</td>\n",
       "      <td>22.396494</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.952773   8.558584   6.272122   8.808285\n",
       "   Test   0.773831  13.578869  14.179602  19.035762\n",
       "hf Train  0.903355  10.137690   9.208198  12.503466\n",
       "   Test   0.619378  16.177199  17.130787  23.065189\n",
       "ir Train  0.850422  12.563766  11.660114  16.311138\n",
       "   Test   0.511461  15.680311  15.048891  22.396494"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.965185</td>\n",
       "      <td>7.360692</td>\n",
       "      <td>5.287978</td>\n",
       "      <td>7.562750</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.769089</td>\n",
       "      <td>13.789873</td>\n",
       "      <td>14.165260</td>\n",
       "      <td>19.234281</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.929101</td>\n",
       "      <td>8.718941</td>\n",
       "      <td>7.690449</td>\n",
       "      <td>10.709320</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.619483</td>\n",
       "      <td>16.388025</td>\n",
       "      <td>17.109926</td>\n",
       "      <td>23.062018</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.882391</td>\n",
       "      <td>11.314551</td>\n",
       "      <td>9.956992</td>\n",
       "      <td>14.463428</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.477990</td>\n",
       "      <td>16.478918</td>\n",
       "      <td>15.470249</td>\n",
       "      <td>23.150985</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.965185   7.360692   5.287978   7.562750\n",
       "   Test   0.769089  13.789873  14.165260  19.234281\n",
       "hf Train  0.929101   8.718941   7.690449  10.709320\n",
       "   Test   0.619483  16.388025  17.109926  23.062018\n",
       "ir Train  0.882391  11.314551   9.956992  14.463428\n",
       "   Test   0.477990  16.478918  15.470249  23.150985"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.975867</td>\n",
       "      <td>6.034240</td>\n",
       "      <td>4.327523</td>\n",
       "      <td>6.296550</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.758206</td>\n",
       "      <td>14.764236</td>\n",
       "      <td>14.195013</td>\n",
       "      <td>19.682309</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.949333</td>\n",
       "      <td>7.422259</td>\n",
       "      <td>6.307713</td>\n",
       "      <td>9.053239</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.607110</td>\n",
       "      <td>16.678193</td>\n",
       "      <td>17.334598</td>\n",
       "      <td>23.433973</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.910180</td>\n",
       "      <td>10.174673</td>\n",
       "      <td>8.446803</td>\n",
       "      <td>12.639727</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.520108</td>\n",
       "      <td>15.950140</td>\n",
       "      <td>15.000136</td>\n",
       "      <td>22.197402</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.975867   6.034240   4.327523   6.296550\n",
       "   Test   0.758206  14.764236  14.195013  19.682309\n",
       "hf Train  0.949333   7.422259   6.307713   9.053239\n",
       "   Test   0.607110  16.678193  17.334598  23.433973\n",
       "ir Train  0.910180  10.174673   8.446803  12.639727\n",
       "   Test   0.520108  15.950140  15.000136  22.197402"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.984064</td>\n",
       "      <td>4.861447</td>\n",
       "      <td>3.415717</td>\n",
       "      <td>5.116716</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.759326</td>\n",
       "      <td>14.751826</td>\n",
       "      <td>14.241753</td>\n",
       "      <td>19.636684</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.964889</td>\n",
       "      <td>6.086913</td>\n",
       "      <td>5.014489</td>\n",
       "      <td>7.536371</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.594178</td>\n",
       "      <td>16.978861</td>\n",
       "      <td>17.539738</td>\n",
       "      <td>23.816495</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.932451</td>\n",
       "      <td>8.955855</td>\n",
       "      <td>7.017200</td>\n",
       "      <td>10.961262</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.507473</td>\n",
       "      <td>16.262322</td>\n",
       "      <td>15.120450</td>\n",
       "      <td>22.487720</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.984064   4.861447   3.415717   5.116716\n",
       "   Test   0.759326  14.751826  14.241753  19.636684\n",
       "hf Train  0.964889   6.086913   5.014489   7.536371\n",
       "   Test   0.594178  16.978861  17.539738  23.816495\n",
       "ir Train  0.932451   8.955855   7.017200  10.961262\n",
       "   Test   0.507473  16.262322  15.120450  22.487720"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.990081</td>\n",
       "      <td>3.769892</td>\n",
       "      <td>2.609308</td>\n",
       "      <td>4.036777</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.747231</td>\n",
       "      <td>14.830844</td>\n",
       "      <td>14.582305</td>\n",
       "      <td>20.124026</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.976045</td>\n",
       "      <td>4.941993</td>\n",
       "      <td>3.888488</td>\n",
       "      <td>6.224971</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.585722</td>\n",
       "      <td>17.246981</td>\n",
       "      <td>17.656602</td>\n",
       "      <td>24.063368</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.948809</td>\n",
       "      <td>7.918275</td>\n",
       "      <td>5.822210</td>\n",
       "      <td>9.542175</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.502016</td>\n",
       "      <td>16.859553</td>\n",
       "      <td>15.191103</td>\n",
       "      <td>22.611946</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.990081   3.769892   2.609308   4.036777\n",
       "   Test   0.747231  14.830844  14.582305  20.124026\n",
       "hf Train  0.976045   4.941993   3.888488   6.224971\n",
       "   Test   0.585722  17.246981  17.656602  24.063368\n",
       "ir Train  0.948809   7.918275   5.822210   9.542175\n",
       "   Test   0.502016  16.859553  15.191103  22.611946"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.994293</td>\n",
       "      <td>2.795997</td>\n",
       "      <td>1.878721</td>\n",
       "      <td>3.062086</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.746084</td>\n",
       "      <td>15.094781</td>\n",
       "      <td>14.588767</td>\n",
       "      <td>20.169642</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.984366</td>\n",
       "      <td>3.902790</td>\n",
       "      <td>2.889035</td>\n",
       "      <td>5.028934</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.573620</td>\n",
       "      <td>17.708525</td>\n",
       "      <td>18.044026</td>\n",
       "      <td>24.412294</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.961058</td>\n",
       "      <td>6.692314</td>\n",
       "      <td>4.818268</td>\n",
       "      <td>8.322644</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.455576</td>\n",
       "      <td>17.360685</td>\n",
       "      <td>15.786637</td>\n",
       "      <td>23.642792</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.994293   2.795997   1.878721   3.062086\n",
       "   Test   0.746084  15.094781  14.588767  20.169642\n",
       "hf Train  0.984366   3.902790   2.889035   5.028934\n",
       "   Test   0.573620  17.708525  18.044026  24.412294\n",
       "ir Train  0.961058   6.692314   4.818268   8.322644\n",
       "   Test   0.455576  17.360685  15.786637  23.642792"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "13\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.996649</td>\n",
       "      <td>2.095437</td>\n",
       "      <td>1.312279</td>\n",
       "      <td>2.346185</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.747457</td>\n",
       "      <td>14.980626</td>\n",
       "      <td>14.661400</td>\n",
       "      <td>20.115059</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.990045</td>\n",
       "      <td>3.033737</td>\n",
       "      <td>2.066364</td>\n",
       "      <td>4.012996</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.565365</td>\n",
       "      <td>17.808477</td>\n",
       "      <td>18.212412</td>\n",
       "      <td>24.647477</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.972177</td>\n",
       "      <td>5.495069</td>\n",
       "      <td>3.797890</td>\n",
       "      <td>7.034815</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.430667</td>\n",
       "      <td>17.989462</td>\n",
       "      <td>16.384268</td>\n",
       "      <td>24.177617</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.996649   2.095437   1.312279   2.346185\n",
       "   Test   0.747457  14.980626  14.661400  20.115059\n",
       "hf Train  0.990045   3.033737   2.066364   4.012996\n",
       "   Test   0.565365  17.808477  18.212412  24.647477\n",
       "ir Train  0.972177   5.495069   3.797890   7.034815\n",
       "   Test   0.430667  17.989462  16.384268  24.177617"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "14\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.998075</td>\n",
       "      <td>1.522597</td>\n",
       "      <td>0.899398</td>\n",
       "      <td>1.778154</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.734339</td>\n",
       "      <td>15.477313</td>\n",
       "      <td>15.000749</td>\n",
       "      <td>20.630865</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.993552</td>\n",
       "      <td>2.378636</td>\n",
       "      <td>1.471861</td>\n",
       "      <td>3.229703</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.552296</td>\n",
       "      <td>17.835076</td>\n",
       "      <td>18.570178</td>\n",
       "      <td>25.015310</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.980023</td>\n",
       "      <td>4.546646</td>\n",
       "      <td>3.057370</td>\n",
       "      <td>5.960875</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.464506</td>\n",
       "      <td>17.234642</td>\n",
       "      <td>16.091635</td>\n",
       "      <td>23.448100</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.998075   1.522597   0.899398   1.778154\n",
       "   Test   0.734339  15.477313  15.000749  20.630865\n",
       "hf Train  0.993552   2.378636   1.471861   3.229703\n",
       "   Test   0.552296  17.835076  18.570178  25.015310\n",
       "ir Train  0.980023   4.546646   3.057370   5.960875\n",
       "   Test   0.464506  17.234642  16.091635  23.448100"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "15\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.998864</td>\n",
       "      <td>1.095048</td>\n",
       "      <td>0.611127</td>\n",
       "      <td>1.366117</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.734698</td>\n",
       "      <td>15.437069</td>\n",
       "      <td>15.037907</td>\n",
       "      <td>20.616910</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.996080</td>\n",
       "      <td>1.778160</td>\n",
       "      <td>0.992465</td>\n",
       "      <td>2.518302</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.554952</td>\n",
       "      <td>17.871056</td>\n",
       "      <td>18.548798</td>\n",
       "      <td>24.940992</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.985639</td>\n",
       "      <td>3.701696</td>\n",
       "      <td>2.351087</td>\n",
       "      <td>5.054060</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.440894</td>\n",
       "      <td>17.633854</td>\n",
       "      <td>16.725303</td>\n",
       "      <td>23.959483</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.998864   1.095048   0.611127   1.366117\n",
       "   Test   0.734698  15.437069  15.037907  20.616910\n",
       "hf Train  0.996080   1.778160   0.992465   2.518302\n",
       "   Test   0.554952  17.871056  18.548798  24.940992\n",
       "ir Train  0.985639   3.701696   2.351087   5.054060\n",
       "   Test   0.440894  17.633854  16.725303  23.959483"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "16\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.999279</td>\n",
       "      <td>0.831285</td>\n",
       "      <td>0.423723</td>\n",
       "      <td>1.088652</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.753076</td>\n",
       "      <td>15.001666</td>\n",
       "      <td>14.513122</td>\n",
       "      <td>19.890004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.997727</td>\n",
       "      <td>1.297470</td>\n",
       "      <td>0.668675</td>\n",
       "      <td>1.917507</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.562885</td>\n",
       "      <td>17.623422</td>\n",
       "      <td>18.461397</td>\n",
       "      <td>24.717692</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.990227</td>\n",
       "      <td>2.940138</td>\n",
       "      <td>1.816513</td>\n",
       "      <td>4.169293</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.379480</td>\n",
       "      <td>18.602066</td>\n",
       "      <td>17.461563</td>\n",
       "      <td>25.241090</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.999279   0.831285   0.423723   1.088652\n",
       "   Test   0.753076  15.001666  14.513122  19.890004\n",
       "hf Train  0.997727   1.297470   0.668675   1.917507\n",
       "   Test   0.562885  17.623422  18.461397  24.717692\n",
       "ir Train  0.990227   2.940138   1.816513   4.169293\n",
       "   Test   0.379480  18.602066  17.461563  25.241090"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "17\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.999546</td>\n",
       "      <td>0.661258</td>\n",
       "      <td>0.288028</td>\n",
       "      <td>0.863805</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.728336</td>\n",
       "      <td>15.475097</td>\n",
       "      <td>15.093148</td>\n",
       "      <td>20.862629</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.998672</td>\n",
       "      <td>0.963906</td>\n",
       "      <td>0.429312</td>\n",
       "      <td>1.465708</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.564193</td>\n",
       "      <td>17.623053</td>\n",
       "      <td>18.316394</td>\n",
       "      <td>24.680680</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.992833</td>\n",
       "      <td>2.428697</td>\n",
       "      <td>1.413838</td>\n",
       "      <td>3.570348</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.400240</td>\n",
       "      <td>18.398544</td>\n",
       "      <td>16.958047</td>\n",
       "      <td>24.815277</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.999546   0.661258   0.288028   0.863805\n",
       "   Test   0.728336  15.475097  15.093148  20.862629\n",
       "hf Train  0.998672   0.963906   0.429312   1.465708\n",
       "   Test   0.564193  17.623053  18.316394  24.680680\n",
       "ir Train  0.992833   2.428697   1.413838   3.570348\n",
       "   Test   0.400240  18.398544  16.958047  24.815277"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "18\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.999749</td>\n",
       "      <td>0.509392</td>\n",
       "      <td>0.190971</td>\n",
       "      <td>0.641612</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.743857</td>\n",
       "      <td>15.354397</td>\n",
       "      <td>14.846805</td>\n",
       "      <td>20.257925</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.999190</td>\n",
       "      <td>0.760306</td>\n",
       "      <td>0.287024</td>\n",
       "      <td>1.144575</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.559269</td>\n",
       "      <td>17.858926</td>\n",
       "      <td>18.488508</td>\n",
       "      <td>24.819714</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.994979</td>\n",
       "      <td>1.964825</td>\n",
       "      <td>1.089990</td>\n",
       "      <td>2.988317</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.447620</td>\n",
       "      <td>17.668167</td>\n",
       "      <td>16.537777</td>\n",
       "      <td>23.814926</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.999749   0.509392   0.190971   0.641612\n",
       "   Test   0.743857  15.354397  14.846805  20.257925\n",
       "hf Train  0.999190   0.760306   0.287024   1.144575\n",
       "   Test   0.559269  17.858926  18.488508  24.819714\n",
       "ir Train  0.994979   1.964825   1.089990   2.988317\n",
       "   Test   0.447620  17.668167  16.537777  23.814926"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "19\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.999875</td>\n",
       "      <td>0.406066</td>\n",
       "      <td>0.120018</td>\n",
       "      <td>0.453115</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.746327</td>\n",
       "      <td>14.926237</td>\n",
       "      <td>14.718004</td>\n",
       "      <td>20.159990</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.999524</td>\n",
       "      <td>0.617647</td>\n",
       "      <td>0.190529</td>\n",
       "      <td>0.877075</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.554881</td>\n",
       "      <td>17.898344</td>\n",
       "      <td>18.645560</td>\n",
       "      <td>24.942986</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.996556</td>\n",
       "      <td>1.604086</td>\n",
       "      <td>0.831035</td>\n",
       "      <td>2.474861</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.401498</td>\n",
       "      <td>18.376620</td>\n",
       "      <td>17.108967</td>\n",
       "      <td>24.789225</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.999875   0.406066   0.120018   0.453115\n",
       "   Test   0.746327  14.926237  14.718004  20.159990\n",
       "hf Train  0.999524   0.617647   0.190529   0.877075\n",
       "   Test   0.554881  17.898344  18.645560  24.942986\n",
       "ir Train  0.996556   1.604086   0.831035   2.474861\n",
       "   Test   0.401498  18.376620  17.108967  24.789225"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "20\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.999938</td>\n",
       "      <td>0.336955</td>\n",
       "      <td>0.072938</td>\n",
       "      <td>0.318350</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.752897</td>\n",
       "      <td>14.833377</td>\n",
       "      <td>14.522581</td>\n",
       "      <td>19.897201</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.999713</td>\n",
       "      <td>0.509972</td>\n",
       "      <td>0.128308</td>\n",
       "      <td>0.681362</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.570250</td>\n",
       "      <td>17.446432</td>\n",
       "      <td>18.158508</td>\n",
       "      <td>24.508588</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.997661</td>\n",
       "      <td>1.292750</td>\n",
       "      <td>0.633437</td>\n",
       "      <td>2.039812</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.441500</td>\n",
       "      <td>18.122585</td>\n",
       "      <td>16.868506</td>\n",
       "      <td>23.946498</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.999938   0.336955   0.072938   0.318350\n",
       "   Test   0.752897  14.833377  14.522581  19.897201\n",
       "hf Train  0.999713   0.509972   0.128308   0.681362\n",
       "   Test   0.570250  17.446432  18.158508  24.508588\n",
       "ir Train  0.997661   1.292750   0.633437   2.039812\n",
       "   Test   0.441500  18.122585  16.868506  23.946498"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ab:\n",
      "The best model has depth of 6.\n",
      "The best model has R2 = 0.7780312883067406.\n",
      "\n",
      "hf:\n",
      "The best model has depth of 8.\n",
      "The best model has R2 = 0.6194828913274988.\n",
      "\n",
      "ir:\n",
      "The best model has depth of 3.\n",
      "The best model has R2 = 0.5892061618840542.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "depths = list(range(1, 21))\n",
    "ab_scores, hf_scores, ir_scores = [], [], []\n",
    "\n",
    "for depth in depths:\n",
    "    print(depth)\n",
    "    dt = DecisionTreeRegressor(max_depth = depth)\n",
    "    result, _ = display_all_results(dt, X_df_added, y_df_added, poly_deg=5)\n",
    "    ab_scores.append(result[0].r2[1])\n",
    "    hf_scores.append(result[1].r2[1])\n",
    "    ir_scores.append(result[2].r2[1])\n",
    "    \n",
    "scores_list = [ab_scores, hf_scores, ir_scores]\n",
    "find_best_param(scores_list, depths, 'depth')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**I. Random Forest**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.964760</td>\n",
       "      <td>7.392968</td>\n",
       "      <td>5.483649</td>\n",
       "      <td>7.614031</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.794959</td>\n",
       "      <td>12.978763</td>\n",
       "      <td>13.805650</td>\n",
       "      <td>18.152329</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.925808</td>\n",
       "      <td>8.789922</td>\n",
       "      <td>8.320427</td>\n",
       "      <td>10.944857</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.644144</td>\n",
       "      <td>14.822792</td>\n",
       "      <td>16.830980</td>\n",
       "      <td>22.291793</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.888974</td>\n",
       "      <td>10.248660</td>\n",
       "      <td>10.401959</td>\n",
       "      <td>14.060901</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.669399</td>\n",
       "      <td>12.628248</td>\n",
       "      <td>13.505799</td>\n",
       "      <td>18.509436</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.964760   7.392968   5.483649   7.614031\n",
       "   Test   0.794959  12.978763  13.805650  18.152329\n",
       "hf Train  0.925808   8.789922   8.320427  10.944857\n",
       "   Test   0.644144  14.822792  16.830980  22.291793\n",
       "ir Train  0.888974  10.248660  10.401959  14.060901\n",
       "   Test   0.669399  12.628248  13.505799  18.509436"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "forest = RandomForestRegressor(n_estimators=100, max_depth=8)\n",
    "display_all_results(forest, X_df, y_df, poly_deg=3);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.973134</td>\n",
       "      <td>6.360463</td>\n",
       "      <td>4.738184</td>\n",
       "      <td>6.643495</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.805563</td>\n",
       "      <td>12.404694</td>\n",
       "      <td>13.298312</td>\n",
       "      <td>17.649919</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.950976</td>\n",
       "      <td>7.071727</td>\n",
       "      <td>6.712307</td>\n",
       "      <td>8.905242</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.704424</td>\n",
       "      <td>13.995740</td>\n",
       "      <td>15.054805</td>\n",
       "      <td>20.325673</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.909037</td>\n",
       "      <td>9.209326</td>\n",
       "      <td>9.540736</td>\n",
       "      <td>12.719892</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.692686</td>\n",
       "      <td>12.174204</td>\n",
       "      <td>13.053333</td>\n",
       "      <td>17.763208</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.973134   6.360463   4.738184   6.643495\n",
       "   Test   0.805563  12.404694  13.298312  17.649919\n",
       "hf Train  0.950976   7.071727   6.712307   8.905242\n",
       "   Test   0.704424  13.995740  15.054805  20.325673\n",
       "ir Train  0.909037   9.209326   9.540736  12.719892\n",
       "   Test   0.692686  12.174204  13.053333  17.763208"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "forest = RandomForestRegressor(n_estimators=100, max_depth=8)\n",
    "display_all_results(forest, X_df_added, y_df_added, poly_deg=3);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Depth = 1 Max_feature = 0.25\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.720502</td>\n",
       "      <td>7.590537</td>\n",
       "      <td>17.118741</td>\n",
       "      <td>21.428189</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.615403</td>\n",
       "      <td>9.008633</td>\n",
       "      <td>20.228698</td>\n",
       "      <td>24.823103</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.617175</td>\n",
       "      <td>9.964450</td>\n",
       "      <td>19.720600</td>\n",
       "      <td>24.885194</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.476940</td>\n",
       "      <td>12.902428</td>\n",
       "      <td>21.113600</td>\n",
       "      <td>27.038700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.534889</td>\n",
       "      <td>11.135274</td>\n",
       "      <td>23.278237</td>\n",
       "      <td>28.762630</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.574702</td>\n",
       "      <td>7.564767</td>\n",
       "      <td>15.941114</td>\n",
       "      <td>20.896671</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.720502   7.590537  17.118741  21.428189\n",
       "   Test   0.615403   9.008633  20.228698  24.823103\n",
       "hf Train  0.617175   9.964450  19.720600  24.885194\n",
       "   Test   0.476940  12.902428  21.113600  27.038700\n",
       "ir Train  0.534889  11.135274  23.278237  28.762630\n",
       "   Test   0.574702   7.564767  15.941114  20.896671"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Depth = 1 Max_feature = 0.5\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.689394</td>\n",
       "      <td>8.633887</td>\n",
       "      <td>18.186182</td>\n",
       "      <td>22.589200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.580124</td>\n",
       "      <td>9.953207</td>\n",
       "      <td>21.253947</td>\n",
       "      <td>25.936663</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.603440</td>\n",
       "      <td>10.539541</td>\n",
       "      <td>19.955937</td>\n",
       "      <td>25.327660</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.449659</td>\n",
       "      <td>13.493184</td>\n",
       "      <td>21.716479</td>\n",
       "      <td>27.734859</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.540100</td>\n",
       "      <td>11.624084</td>\n",
       "      <td>22.756532</td>\n",
       "      <td>28.601041</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.557939</td>\n",
       "      <td>8.341179</td>\n",
       "      <td>16.141908</td>\n",
       "      <td>21.304500</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.689394   8.633887  18.186182  22.589200\n",
       "   Test   0.580124   9.953207  21.253947  25.936663\n",
       "hf Train  0.603440  10.539541  19.955937  25.327660\n",
       "   Test   0.449659  13.493184  21.716479  27.734859\n",
       "ir Train  0.540100  11.624084  22.756532  28.601041\n",
       "   Test   0.557939   8.341179  16.141908  21.304500"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Depth = 1 Max_feature = 0.75\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.661797</td>\n",
       "      <td>9.537060</td>\n",
       "      <td>19.020801</td>\n",
       "      <td>23.571338</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.550978</td>\n",
       "      <td>10.698497</td>\n",
       "      <td>21.892982</td>\n",
       "      <td>26.821755</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.590585</td>\n",
       "      <td>10.913793</td>\n",
       "      <td>20.238965</td>\n",
       "      <td>25.734900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.428361</td>\n",
       "      <td>13.806665</td>\n",
       "      <td>22.163047</td>\n",
       "      <td>28.266432</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.536680</td>\n",
       "      <td>12.004167</td>\n",
       "      <td>22.472296</td>\n",
       "      <td>28.707191</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.515913</td>\n",
       "      <td>9.484228</td>\n",
       "      <td>16.650564</td>\n",
       "      <td>22.294193</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.661797   9.537060  19.020801  23.571338\n",
       "   Test   0.550978  10.698497  21.892982  26.821755\n",
       "hf Train  0.590585  10.913793  20.238965  25.734900\n",
       "   Test   0.428361  13.806665  22.163047  28.266432\n",
       "ir Train  0.536680  12.004167  22.472296  28.707191\n",
       "   Test   0.515913   9.484228  16.650564  22.294193"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Depth = 1 Max_feature = 1\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.486022</td>\n",
       "      <td>3.916005</td>\n",
       "      <td>23.902939</td>\n",
       "      <td>29.058151</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.420057</td>\n",
       "      <td>4.377001</td>\n",
       "      <td>24.889542</td>\n",
       "      <td>30.482183</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.269271</td>\n",
       "      <td>3.271693</td>\n",
       "      <td>28.723440</td>\n",
       "      <td>34.381041</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.223160</td>\n",
       "      <td>3.103359</td>\n",
       "      <td>27.900957</td>\n",
       "      <td>32.951567</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.337710</td>\n",
       "      <td>5.027632</td>\n",
       "      <td>29.439059</td>\n",
       "      <td>34.322140</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.219402</td>\n",
       "      <td>3.595175</td>\n",
       "      <td>24.904097</td>\n",
       "      <td>28.310274</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2  mean_std        mae       rmse\n",
       "ab Train  0.486022  3.916005  23.902939  29.058151\n",
       "   Test   0.420057  4.377001  24.889542  30.482183\n",
       "hf Train  0.269271  3.271693  28.723440  34.381041\n",
       "   Test   0.223160  3.103359  27.900957  32.951567\n",
       "ir Train  0.337710  5.027632  29.439059  34.322140\n",
       "   Test   0.219402  3.595175  24.904097  28.310274"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Depth = 2 Max_feature = 0.25\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.865203</td>\n",
       "      <td>11.957360</td>\n",
       "      <td>11.201687</td>\n",
       "      <td>14.881132</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.698724</td>\n",
       "      <td>12.224666</td>\n",
       "      <td>17.097634</td>\n",
       "      <td>21.970270</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.744216</td>\n",
       "      <td>11.651506</td>\n",
       "      <td>16.108325</td>\n",
       "      <td>20.341255</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.600393</td>\n",
       "      <td>13.990292</td>\n",
       "      <td>18.444101</td>\n",
       "      <td>23.633429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.666587</td>\n",
       "      <td>12.610266</td>\n",
       "      <td>19.124489</td>\n",
       "      <td>24.352368</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.620595</td>\n",
       "      <td>10.694340</td>\n",
       "      <td>15.222939</td>\n",
       "      <td>19.737021</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.865203  11.957360  11.201687  14.881132\n",
       "   Test   0.698724  12.224666  17.097634  21.970270\n",
       "hf Train  0.744216  11.651506  16.108325  20.341255\n",
       "   Test   0.600393  13.990292  18.444101  23.633429\n",
       "ir Train  0.666587  12.610266  19.124489  24.352368\n",
       "   Test   0.620595  10.694340  15.222939  19.737021"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Depth = 2 Max_feature = 0.5\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.858336</td>\n",
       "      <td>12.655095</td>\n",
       "      <td>11.333757</td>\n",
       "      <td>15.255452</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.693980</td>\n",
       "      <td>12.762776</td>\n",
       "      <td>17.171184</td>\n",
       "      <td>22.142599</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.734596</td>\n",
       "      <td>12.499215</td>\n",
       "      <td>16.478790</td>\n",
       "      <td>20.720246</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.586194</td>\n",
       "      <td>14.702072</td>\n",
       "      <td>18.903744</td>\n",
       "      <td>24.049637</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.672393</td>\n",
       "      <td>12.897355</td>\n",
       "      <td>18.836580</td>\n",
       "      <td>24.139404</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.578231</td>\n",
       "      <td>11.682418</td>\n",
       "      <td>16.075551</td>\n",
       "      <td>20.809773</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.858336  12.655095  11.333757  15.255452\n",
       "   Test   0.693980  12.762776  17.171184  22.142599\n",
       "hf Train  0.734596  12.499215  16.478790  20.720246\n",
       "   Test   0.586194  14.702072  18.903744  24.049637\n",
       "ir Train  0.672393  12.897355  18.836580  24.139404\n",
       "   Test   0.578231  11.682418  16.075551  20.809773"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Depth = 2 Max_feature = 0.75\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.841365</td>\n",
       "      <td>13.771787</td>\n",
       "      <td>11.992914</td>\n",
       "      <td>16.143420</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.670568</td>\n",
       "      <td>13.109826</td>\n",
       "      <td>17.844933</td>\n",
       "      <td>22.973974</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.724799</td>\n",
       "      <td>12.850210</td>\n",
       "      <td>16.786114</td>\n",
       "      <td>21.099183</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.580202</td>\n",
       "      <td>14.891956</td>\n",
       "      <td>19.117552</td>\n",
       "      <td>24.223151</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.670908</td>\n",
       "      <td>13.060473</td>\n",
       "      <td>18.797640</td>\n",
       "      <td>24.194069</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.568139</td>\n",
       "      <td>11.966590</td>\n",
       "      <td>16.222671</td>\n",
       "      <td>21.057274</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.841365  13.771787  11.992914  16.143420\n",
       "   Test   0.670568  13.109826  17.844933  22.973974\n",
       "hf Train  0.724799  12.850210  16.786114  21.099183\n",
       "   Test   0.580202  14.891956  19.117552  24.223151\n",
       "ir Train  0.670908  13.060473  18.797640  24.194069\n",
       "   Test   0.568139  11.966590  16.222671  21.057274"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Depth = 2 Max_feature = 1\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.751252</td>\n",
       "      <td>6.452241</td>\n",
       "      <td>16.100536</td>\n",
       "      <td>20.215100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.649330</td>\n",
       "      <td>7.548941</td>\n",
       "      <td>19.220959</td>\n",
       "      <td>23.702971</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.554351</td>\n",
       "      <td>6.872592</td>\n",
       "      <td>22.321916</td>\n",
       "      <td>26.849581</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.479777</td>\n",
       "      <td>7.828762</td>\n",
       "      <td>22.408142</td>\n",
       "      <td>26.965273</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.523726</td>\n",
       "      <td>8.936228</td>\n",
       "      <td>24.306518</td>\n",
       "      <td>29.105725</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.470651</td>\n",
       "      <td>6.297020</td>\n",
       "      <td>19.542963</td>\n",
       "      <td>23.313165</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2  mean_std        mae       rmse\n",
       "ab Train  0.751252  6.452241  16.100536  20.215100\n",
       "   Test   0.649330  7.548941  19.220959  23.702971\n",
       "hf Train  0.554351  6.872592  22.321916  26.849581\n",
       "   Test   0.479777  7.828762  22.408142  26.965273\n",
       "ir Train  0.523726  8.936228  24.306518  29.105725\n",
       "   Test   0.470651  6.297020  19.542963  23.313165"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Depth = 3 Max_feature = 0.25\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.903361</td>\n",
       "      <td>11.176553</td>\n",
       "      <td>9.069901</td>\n",
       "      <td>12.600028</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.745948</td>\n",
       "      <td>12.414461</td>\n",
       "      <td>15.401442</td>\n",
       "      <td>20.175056</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.795180</td>\n",
       "      <td>12.027715</td>\n",
       "      <td>14.419963</td>\n",
       "      <td>18.202344</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.635253</td>\n",
       "      <td>14.066148</td>\n",
       "      <td>17.715918</td>\n",
       "      <td>22.579076</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.723630</td>\n",
       "      <td>12.313109</td>\n",
       "      <td>17.412420</td>\n",
       "      <td>22.171520</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.630099</td>\n",
       "      <td>11.473532</td>\n",
       "      <td>14.953666</td>\n",
       "      <td>19.488244</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.903361  11.176553   9.069901  12.600028\n",
       "   Test   0.745948  12.414461  15.401442  20.175056\n",
       "hf Train  0.795180  12.027715  14.419963  18.202344\n",
       "   Test   0.635253  14.066148  17.715918  22.579076\n",
       "ir Train  0.723630  12.313109  17.412420  22.171520\n",
       "   Test   0.630099  11.473532  14.953666  19.488244"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Depth = 3 Max_feature = 0.5\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.902602</td>\n",
       "      <td>11.444668</td>\n",
       "      <td>9.125138</td>\n",
       "      <td>12.649425</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.747694</td>\n",
       "      <td>12.842985</td>\n",
       "      <td>15.286590</td>\n",
       "      <td>20.105594</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.793802</td>\n",
       "      <td>12.340864</td>\n",
       "      <td>14.495041</td>\n",
       "      <td>18.263447</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.631293</td>\n",
       "      <td>14.354822</td>\n",
       "      <td>17.882971</td>\n",
       "      <td>22.701321</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.722177</td>\n",
       "      <td>12.555051</td>\n",
       "      <td>17.332384</td>\n",
       "      <td>22.229727</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.629825</td>\n",
       "      <td>11.647069</td>\n",
       "      <td>14.808193</td>\n",
       "      <td>19.495472</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.902602  11.444668   9.125138  12.649425\n",
       "   Test   0.747694  12.842985  15.286590  20.105594\n",
       "hf Train  0.793802  12.340864  14.495041  18.263447\n",
       "   Test   0.631293  14.354822  17.882971  22.701321\n",
       "ir Train  0.722177  12.555051  17.332384  22.229727\n",
       "   Test   0.629825  11.647069  14.808193  19.495472"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Depth = 3 Max_feature = 0.75\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.894127</td>\n",
       "      <td>11.934624</td>\n",
       "      <td>9.599760</td>\n",
       "      <td>13.188272</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.741868</td>\n",
       "      <td>13.234671</td>\n",
       "      <td>15.475954</td>\n",
       "      <td>20.336400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.790936</td>\n",
       "      <td>12.441365</td>\n",
       "      <td>14.583049</td>\n",
       "      <td>18.389948</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.631375</td>\n",
       "      <td>14.427480</td>\n",
       "      <td>17.901622</td>\n",
       "      <td>22.698774</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.725135</td>\n",
       "      <td>12.494843</td>\n",
       "      <td>17.246796</td>\n",
       "      <td>22.111066</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.620630</td>\n",
       "      <td>11.831958</td>\n",
       "      <td>15.068993</td>\n",
       "      <td>19.736107</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.894127  11.934624   9.599760  13.188272\n",
       "   Test   0.741868  13.234671  15.475954  20.336400\n",
       "hf Train  0.790936  12.441365  14.583049  18.389948\n",
       "   Test   0.631375  14.427480  17.901622  22.698774\n",
       "ir Train  0.725135  12.494843  17.246796  22.111066\n",
       "   Test   0.620630  11.831958  15.068993  19.736107"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Depth = 3 Max_feature = 1\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.849866</td>\n",
       "      <td>8.273533</td>\n",
       "      <td>12.493521</td>\n",
       "      <td>15.704902</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.728558</td>\n",
       "      <td>9.844297</td>\n",
       "      <td>16.912981</td>\n",
       "      <td>20.854111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.679184</td>\n",
       "      <td>8.204612</td>\n",
       "      <td>18.762929</td>\n",
       "      <td>22.780794</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.566409</td>\n",
       "      <td>9.451363</td>\n",
       "      <td>20.240214</td>\n",
       "      <td>24.617857</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.626828</td>\n",
       "      <td>10.925755</td>\n",
       "      <td>20.699960</td>\n",
       "      <td>25.763490</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.575720</td>\n",
       "      <td>8.513303</td>\n",
       "      <td>16.449971</td>\n",
       "      <td>20.871636</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.849866   8.273533  12.493521  15.704902\n",
       "   Test   0.728558   9.844297  16.912981  20.854111\n",
       "hf Train  0.679184   8.204612  18.762929  22.780794\n",
       "   Test   0.566409   9.451363  20.240214  24.617857\n",
       "ir Train  0.626828  10.925755  20.699960  25.763490\n",
       "   Test   0.575720   8.513303  16.449971  20.871636"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Depth = 4 Max_feature = 0.25\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.925195</td>\n",
       "      <td>10.283050</td>\n",
       "      <td>7.954500</td>\n",
       "      <td>11.085610</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.777155</td>\n",
       "      <td>12.340685</td>\n",
       "      <td>14.524216</td>\n",
       "      <td>18.895344</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.838936</td>\n",
       "      <td>11.518412</td>\n",
       "      <td>12.648602</td>\n",
       "      <td>16.141375</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.647011</td>\n",
       "      <td>14.492842</td>\n",
       "      <td>17.162245</td>\n",
       "      <td>22.212145</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.773945</td>\n",
       "      <td>11.922225</td>\n",
       "      <td>15.744255</td>\n",
       "      <td>20.051996</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.656617</td>\n",
       "      <td>11.552136</td>\n",
       "      <td>14.503805</td>\n",
       "      <td>18.776703</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.925195  10.283050   7.954500  11.085610\n",
       "   Test   0.777155  12.340685  14.524216  18.895344\n",
       "hf Train  0.838936  11.518412  12.648602  16.141375\n",
       "   Test   0.647011  14.492842  17.162245  22.212145\n",
       "ir Train  0.773945  11.922225  15.744255  20.051996\n",
       "   Test   0.656617  11.552136  14.503805  18.776703"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Depth = 4 Max_feature = 0.5\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.924951</td>\n",
       "      <td>10.351523</td>\n",
       "      <td>7.943792</td>\n",
       "      <td>11.103677</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.782363</td>\n",
       "      <td>12.382583</td>\n",
       "      <td>14.321073</td>\n",
       "      <td>18.673231</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.844473</td>\n",
       "      <td>11.374200</td>\n",
       "      <td>12.444960</td>\n",
       "      <td>15.861506</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.652604</td>\n",
       "      <td>14.484659</td>\n",
       "      <td>17.044816</td>\n",
       "      <td>22.035490</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.772891</td>\n",
       "      <td>12.017608</td>\n",
       "      <td>15.753998</td>\n",
       "      <td>20.098683</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.654933</td>\n",
       "      <td>11.812190</td>\n",
       "      <td>14.417269</td>\n",
       "      <td>18.822701</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.924951  10.351523   7.943792  11.103677\n",
       "   Test   0.782363  12.382583  14.321073  18.673231\n",
       "hf Train  0.844473  11.374200  12.444960  15.861506\n",
       "   Test   0.652604  14.484659  17.044816  22.035490\n",
       "ir Train  0.772891  12.017608  15.753998  20.098683\n",
       "   Test   0.654933  11.812190  14.417269  18.822701"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Depth = 4 Max_feature = 0.75\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.923407</td>\n",
       "      <td>10.483243</td>\n",
       "      <td>8.014072</td>\n",
       "      <td>11.217361</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.783211</td>\n",
       "      <td>12.443112</td>\n",
       "      <td>14.247792</td>\n",
       "      <td>18.636810</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.844143</td>\n",
       "      <td>11.473060</td>\n",
       "      <td>12.441049</td>\n",
       "      <td>15.878282</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.652491</td>\n",
       "      <td>14.622636</td>\n",
       "      <td>17.027156</td>\n",
       "      <td>22.039055</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.769263</td>\n",
       "      <td>12.175132</td>\n",
       "      <td>15.783211</td>\n",
       "      <td>20.258577</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.648367</td>\n",
       "      <td>12.246043</td>\n",
       "      <td>14.390251</td>\n",
       "      <td>19.000929</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.923407  10.483243   8.014072  11.217361\n",
       "   Test   0.783211  12.443112  14.247792  18.636810\n",
       "hf Train  0.844143  11.473060  12.441049  15.878282\n",
       "   Test   0.652491  14.622636  17.027156  22.039055\n",
       "ir Train  0.769263  12.175132  15.783211  20.258577\n",
       "   Test   0.648367  12.246043  14.390251  19.000929"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Depth = 4 Max_feature = 1\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.892499</td>\n",
       "      <td>8.845042</td>\n",
       "      <td>10.327467</td>\n",
       "      <td>13.289276</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.757709</td>\n",
       "      <td>11.012494</td>\n",
       "      <td>15.633144</td>\n",
       "      <td>19.702542</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.748924</td>\n",
       "      <td>9.137089</td>\n",
       "      <td>16.522490</td>\n",
       "      <td>20.153173</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.615361</td>\n",
       "      <td>11.130934</td>\n",
       "      <td>18.767932</td>\n",
       "      <td>23.186603</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.676538</td>\n",
       "      <td>11.120360</td>\n",
       "      <td>19.206793</td>\n",
       "      <td>23.986222</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.604383</td>\n",
       "      <td>9.085283</td>\n",
       "      <td>15.783802</td>\n",
       "      <td>20.154303</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.892499   8.845042  10.327467  13.289276\n",
       "   Test   0.757709  11.012494  15.633144  19.702542\n",
       "hf Train  0.748924   9.137089  16.522490  20.153173\n",
       "   Test   0.615361  11.130934  18.767932  23.186603\n",
       "ir Train  0.676538  11.120360  19.206793  23.986222\n",
       "   Test   0.604383   9.085283  15.783802  20.154303"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Depth = 5 Max_feature = 0.25\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.939110</td>\n",
       "      <td>9.393805</td>\n",
       "      <td>7.094067</td>\n",
       "      <td>10.001566</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.792544</td>\n",
       "      <td>12.394438</td>\n",
       "      <td>13.999180</td>\n",
       "      <td>18.231236</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.872664</td>\n",
       "      <td>10.679115</td>\n",
       "      <td>11.114932</td>\n",
       "      <td>14.352137</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.664115</td>\n",
       "      <td>14.425939</td>\n",
       "      <td>16.435180</td>\n",
       "      <td>21.667338</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.815582</td>\n",
       "      <td>11.445714</td>\n",
       "      <td>14.234369</td>\n",
       "      <td>18.111405</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.669122</td>\n",
       "      <td>11.794313</td>\n",
       "      <td>14.135210</td>\n",
       "      <td>18.431658</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.939110   9.393805   7.094067  10.001566\n",
       "   Test   0.792544  12.394438  13.999180  18.231236\n",
       "hf Train  0.872664  10.679115  11.114932  14.352137\n",
       "   Test   0.664115  14.425939  16.435180  21.667338\n",
       "ir Train  0.815582  11.445714  14.234369  18.111405\n",
       "   Test   0.669122  11.794313  14.135210  18.431658"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Depth = 5 Max_feature = 0.5\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.940132</td>\n",
       "      <td>9.343021</td>\n",
       "      <td>6.988385</td>\n",
       "      <td>9.917269</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.794659</td>\n",
       "      <td>12.204345</td>\n",
       "      <td>13.850231</td>\n",
       "      <td>18.138064</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.877942</td>\n",
       "      <td>10.465058</td>\n",
       "      <td>10.840198</td>\n",
       "      <td>14.051533</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.666923</td>\n",
       "      <td>14.478149</td>\n",
       "      <td>16.379252</td>\n",
       "      <td>21.576565</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.815455</td>\n",
       "      <td>11.684294</td>\n",
       "      <td>14.144429</td>\n",
       "      <td>18.117627</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.655352</td>\n",
       "      <td>12.191458</td>\n",
       "      <td>14.260672</td>\n",
       "      <td>18.811261</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.940132   9.343021   6.988385   9.917269\n",
       "   Test   0.794659  12.204345  13.850231  18.138064\n",
       "hf Train  0.877942  10.465058  10.840198  14.051533\n",
       "   Test   0.666923  14.478149  16.379252  21.576565\n",
       "ir Train  0.815455  11.684294  14.144429  18.117627\n",
       "   Test   0.655352  12.191458  14.260672  18.811261"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Depth = 5 Max_feature = 0.75\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.939459</td>\n",
       "      <td>9.428081</td>\n",
       "      <td>7.069285</td>\n",
       "      <td>9.972849</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.795931</td>\n",
       "      <td>12.278886</td>\n",
       "      <td>13.788196</td>\n",
       "      <td>18.081828</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.881427</td>\n",
       "      <td>10.353412</td>\n",
       "      <td>10.716697</td>\n",
       "      <td>13.849470</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.671479</td>\n",
       "      <td>14.424226</td>\n",
       "      <td>16.241508</td>\n",
       "      <td>21.428498</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.810146</td>\n",
       "      <td>11.936685</td>\n",
       "      <td>14.232930</td>\n",
       "      <td>18.376396</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.639693</td>\n",
       "      <td>12.671946</td>\n",
       "      <td>14.412903</td>\n",
       "      <td>19.233877</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.939459   9.428081   7.069285   9.972849\n",
       "   Test   0.795931  12.278886  13.788196  18.081828\n",
       "hf Train  0.881427  10.353412  10.716697  13.849470\n",
       "   Test   0.671479  14.424226  16.241508  21.428498\n",
       "ir Train  0.810146  11.936685  14.232930  18.376396\n",
       "   Test   0.639693  12.671946  14.412903  19.233877"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Depth = 5 Max_feature = 1\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.913584</td>\n",
       "      <td>9.111526</td>\n",
       "      <td>9.184607</td>\n",
       "      <td>11.914958</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.772639</td>\n",
       "      <td>11.800433</td>\n",
       "      <td>15.045242</td>\n",
       "      <td>19.085853</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.801260</td>\n",
       "      <td>9.593973</td>\n",
       "      <td>14.486768</td>\n",
       "      <td>17.930146</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.635085</td>\n",
       "      <td>12.510500</td>\n",
       "      <td>17.895769</td>\n",
       "      <td>22.584284</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.722614</td>\n",
       "      <td>11.216193</td>\n",
       "      <td>17.590905</td>\n",
       "      <td>22.212245</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.632319</td>\n",
       "      <td>9.847915</td>\n",
       "      <td>15.154338</td>\n",
       "      <td>19.429700</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.913584   9.111526   9.184607  11.914958\n",
       "   Test   0.772639  11.800433  15.045242  19.085853\n",
       "hf Train  0.801260   9.593973  14.486768  17.930146\n",
       "   Test   0.635085  12.510500  17.895769  22.584284\n",
       "ir Train  0.722614  11.216193  17.590905  22.212245\n",
       "   Test   0.632319   9.847915  15.154338  19.429700"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Depth = 6 Max_feature = 0.25\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.950464</td>\n",
       "      <td>8.566674</td>\n",
       "      <td>6.343540</td>\n",
       "      <td>9.020989</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.798803</td>\n",
       "      <td>12.393890</td>\n",
       "      <td>13.737693</td>\n",
       "      <td>17.954138</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.900074</td>\n",
       "      <td>9.676873</td>\n",
       "      <td>9.745285</td>\n",
       "      <td>12.713917</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.670831</td>\n",
       "      <td>14.470920</td>\n",
       "      <td>16.073450</td>\n",
       "      <td>21.449611</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.850642</td>\n",
       "      <td>10.899970</td>\n",
       "      <td>12.724806</td>\n",
       "      <td>16.299150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.684987</td>\n",
       "      <td>11.845417</td>\n",
       "      <td>13.611857</td>\n",
       "      <td>17.984345</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.950464   8.566674   6.343540   9.020989\n",
       "   Test   0.798803  12.393890  13.737693  17.954138\n",
       "hf Train  0.900074   9.676873   9.745285  12.713917\n",
       "   Test   0.670831  14.470920  16.073450  21.449611\n",
       "ir Train  0.850642  10.899970  12.724806  16.299150\n",
       "   Test   0.684987  11.845417  13.611857  17.984345"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Depth = 6 Max_feature = 0.5\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.952247</td>\n",
       "      <td>8.434981</td>\n",
       "      <td>6.223038</td>\n",
       "      <td>8.857203</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.801736</td>\n",
       "      <td>12.242942</td>\n",
       "      <td>13.580285</td>\n",
       "      <td>17.822777</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.906300</td>\n",
       "      <td>9.411670</td>\n",
       "      <td>9.433510</td>\n",
       "      <td>12.311460</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.679532</td>\n",
       "      <td>14.374483</td>\n",
       "      <td>15.864244</td>\n",
       "      <td>21.164245</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.853588</td>\n",
       "      <td>10.949202</td>\n",
       "      <td>12.544354</td>\n",
       "      <td>16.137561</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.679759</td>\n",
       "      <td>12.012696</td>\n",
       "      <td>13.672079</td>\n",
       "      <td>18.132966</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.952247   8.434981   6.223038   8.857203\n",
       "   Test   0.801736  12.242942  13.580285  17.822777\n",
       "hf Train  0.906300   9.411670   9.433510  12.311460\n",
       "   Test   0.679532  14.374483  15.864244  21.164245\n",
       "ir Train  0.853588  10.949202  12.544354  16.137561\n",
       "   Test   0.679759  12.012696  13.672079  18.132966"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Depth = 6 Max_feature = 0.75\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.952378</td>\n",
       "      <td>8.426558</td>\n",
       "      <td>6.226907</td>\n",
       "      <td>8.845002</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.801651</td>\n",
       "      <td>12.275270</td>\n",
       "      <td>13.558290</td>\n",
       "      <td>17.826608</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.908127</td>\n",
       "      <td>9.343654</td>\n",
       "      <td>9.321848</td>\n",
       "      <td>12.190854</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.683121</td>\n",
       "      <td>14.268207</td>\n",
       "      <td>15.812006</td>\n",
       "      <td>21.045388</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.851369</td>\n",
       "      <td>11.045147</td>\n",
       "      <td>12.545360</td>\n",
       "      <td>16.259409</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.671229</td>\n",
       "      <td>12.384856</td>\n",
       "      <td>13.709414</td>\n",
       "      <td>18.372875</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.952378   8.426558   6.226907   8.845002\n",
       "   Test   0.801651  12.275270  13.558290  17.826608\n",
       "hf Train  0.908127   9.343654   9.321848  12.190854\n",
       "   Test   0.683121  14.268207  15.812006  21.045388\n",
       "ir Train  0.851369  11.045147  12.545360  16.259409\n",
       "   Test   0.671229  12.384856  13.709414  18.372875"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Depth = 6 Max_feature = 1\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.927785</td>\n",
       "      <td>9.052424</td>\n",
       "      <td>8.189713</td>\n",
       "      <td>10.892063</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.782198</td>\n",
       "      <td>12.140334</td>\n",
       "      <td>14.537874</td>\n",
       "      <td>18.680338</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.833113</td>\n",
       "      <td>9.737979</td>\n",
       "      <td>13.105285</td>\n",
       "      <td>16.430561</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.643092</td>\n",
       "      <td>13.041104</td>\n",
       "      <td>17.476105</td>\n",
       "      <td>22.335128</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.763652</td>\n",
       "      <td>11.199989</td>\n",
       "      <td>16.101132</td>\n",
       "      <td>20.503388</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.666862</td>\n",
       "      <td>9.969730</td>\n",
       "      <td>14.305192</td>\n",
       "      <td>18.494491</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.927785   9.052424   8.189713  10.892063\n",
       "   Test   0.782198  12.140334  14.537874  18.680338\n",
       "hf Train  0.833113   9.737979  13.105285  16.430561\n",
       "   Test   0.643092  13.041104  17.476105  22.335128\n",
       "ir Train  0.763652  11.199989  16.101132  20.503388\n",
       "   Test   0.666862   9.969730  14.305192  18.494491"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Depth = 7 Max_feature = 0.25\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.960554</td>\n",
       "      <td>7.700693</td>\n",
       "      <td>5.654249</td>\n",
       "      <td>8.050043</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.801520</td>\n",
       "      <td>12.492472</td>\n",
       "      <td>13.539634</td>\n",
       "      <td>17.832489</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.924116</td>\n",
       "      <td>8.625460</td>\n",
       "      <td>8.463446</td>\n",
       "      <td>11.079406</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.686001</td>\n",
       "      <td>14.193518</td>\n",
       "      <td>15.540793</td>\n",
       "      <td>20.949548</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.883889</td>\n",
       "      <td>9.971252</td>\n",
       "      <td>11.111283</td>\n",
       "      <td>14.371010</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.701605</td>\n",
       "      <td>11.737753</td>\n",
       "      <td>13.171968</td>\n",
       "      <td>17.503558</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.960554   7.700693   5.654249   8.050043\n",
       "   Test   0.801520  12.492472  13.539634  17.832489\n",
       "hf Train  0.924116   8.625460   8.463446  11.079406\n",
       "   Test   0.686001  14.193518  15.540793  20.949548\n",
       "ir Train  0.883889   9.971252  11.111283  14.371010\n",
       "   Test   0.701605  11.737753  13.171968  17.503558"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Depth = 7 Max_feature = 0.5\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.962696</td>\n",
       "      <td>7.498248</td>\n",
       "      <td>5.507165</td>\n",
       "      <td>7.828386</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.804159</td>\n",
       "      <td>12.357663</td>\n",
       "      <td>13.415820</td>\n",
       "      <td>17.713547</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.928774</td>\n",
       "      <td>8.329263</td>\n",
       "      <td>8.125792</td>\n",
       "      <td>10.733981</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.688637</td>\n",
       "      <td>14.256521</td>\n",
       "      <td>15.517116</td>\n",
       "      <td>20.861420</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.885920</td>\n",
       "      <td>9.950292</td>\n",
       "      <td>10.983599</td>\n",
       "      <td>14.244775</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.695515</td>\n",
       "      <td>11.889787</td>\n",
       "      <td>13.308057</td>\n",
       "      <td>17.681253</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.962696   7.498248   5.507165   7.828386\n",
       "   Test   0.804159  12.357663  13.415820  17.713547\n",
       "hf Train  0.928774   8.329263   8.125792  10.733981\n",
       "   Test   0.688637  14.256521  15.517116  20.861420\n",
       "ir Train  0.885920   9.950292  10.983599  14.244775\n",
       "   Test   0.695515  11.889787  13.308057  17.681253"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Depth = 7 Max_feature = 0.75\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.963505</td>\n",
       "      <td>7.412588</td>\n",
       "      <td>5.469100</td>\n",
       "      <td>7.743082</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.805860</td>\n",
       "      <td>12.229366</td>\n",
       "      <td>13.373697</td>\n",
       "      <td>17.636427</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.932573</td>\n",
       "      <td>8.148352</td>\n",
       "      <td>7.958405</td>\n",
       "      <td>10.443754</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.698200</td>\n",
       "      <td>14.078304</td>\n",
       "      <td>15.269016</td>\n",
       "      <td>20.538543</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.884316</td>\n",
       "      <td>10.005291</td>\n",
       "      <td>11.008477</td>\n",
       "      <td>14.344553</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.690223</td>\n",
       "      <td>12.117036</td>\n",
       "      <td>13.266939</td>\n",
       "      <td>17.834247</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.963505   7.412588   5.469100   7.743082\n",
       "   Test   0.805860  12.229366  13.373697  17.636427\n",
       "hf Train  0.932573   8.148352   7.958405  10.443754\n",
       "   Test   0.698200  14.078304  15.269016  20.538543\n",
       "ir Train  0.884316  10.005291  11.008477  14.344553\n",
       "   Test   0.690223  12.117036  13.266939  17.834247"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Depth = 7 Max_feature = 1\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.940716</td>\n",
       "      <td>8.599513</td>\n",
       "      <td>7.302233</td>\n",
       "      <td>9.868803</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.787157</td>\n",
       "      <td>12.473048</td>\n",
       "      <td>14.312030</td>\n",
       "      <td>18.466446</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.862946</td>\n",
       "      <td>9.585632</td>\n",
       "      <td>11.824838</td>\n",
       "      <td>14.889700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.654164</td>\n",
       "      <td>13.520594</td>\n",
       "      <td>16.990966</td>\n",
       "      <td>21.985964</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.799767</td>\n",
       "      <td>10.680787</td>\n",
       "      <td>14.722644</td>\n",
       "      <td>18.871993</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.686362</td>\n",
       "      <td>10.322762</td>\n",
       "      <td>13.902020</td>\n",
       "      <td>17.945053</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.940716   8.599513   7.302233   9.868803\n",
       "   Test   0.787157  12.473048  14.312030  18.466446\n",
       "hf Train  0.862946   9.585632  11.824838  14.889700\n",
       "   Test   0.654164  13.520594  16.990966  21.985964\n",
       "ir Train  0.799767  10.680787  14.722644  18.871993\n",
       "   Test   0.686362  10.322762  13.902020  17.945053"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Depth = 8 Max_feature = 0.25\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.970501</td>\n",
       "      <td>6.686317</td>\n",
       "      <td>4.921889</td>\n",
       "      <td>6.961419</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.804048</td>\n",
       "      <td>12.480838</td>\n",
       "      <td>13.407745</td>\n",
       "      <td>17.718560</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.943346</td>\n",
       "      <td>7.480816</td>\n",
       "      <td>7.260133</td>\n",
       "      <td>9.573151</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.693967</td>\n",
       "      <td>14.157033</td>\n",
       "      <td>15.273012</td>\n",
       "      <td>20.682102</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.910119</td>\n",
       "      <td>9.048862</td>\n",
       "      <td>9.683197</td>\n",
       "      <td>12.644006</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.716459</td>\n",
       "      <td>11.609915</td>\n",
       "      <td>12.758325</td>\n",
       "      <td>17.062338</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.970501   6.686317   4.921889   6.961419\n",
       "   Test   0.804048  12.480838  13.407745  17.718560\n",
       "hf Train  0.943346   7.480816   7.260133   9.573151\n",
       "   Test   0.693967  14.157033  15.273012  20.682102\n",
       "ir Train  0.910119   9.048862   9.683197  12.644006\n",
       "   Test   0.716459  11.609915  12.758325  17.062338"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Depth = 8 Max_feature = 0.5\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.972589</td>\n",
       "      <td>6.437274</td>\n",
       "      <td>4.768502</td>\n",
       "      <td>6.710591</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.806735</td>\n",
       "      <td>12.281560</td>\n",
       "      <td>13.308506</td>\n",
       "      <td>17.596642</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.948648</td>\n",
       "      <td>7.187160</td>\n",
       "      <td>6.889895</td>\n",
       "      <td>9.114226</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.699990</td>\n",
       "      <td>14.065203</td>\n",
       "      <td>15.131642</td>\n",
       "      <td>20.477541</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.910229</td>\n",
       "      <td>8.982491</td>\n",
       "      <td>9.666556</td>\n",
       "      <td>12.636273</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.701804</td>\n",
       "      <td>11.928445</td>\n",
       "      <td>13.036398</td>\n",
       "      <td>17.497720</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.972589   6.437274   4.768502   6.710591\n",
       "   Test   0.806735  12.281560  13.308506  17.596642\n",
       "hf Train  0.948648   7.187160   6.889895   9.114226\n",
       "   Test   0.699990  14.065203  15.131642  20.477541\n",
       "ir Train  0.910229   8.982491   9.666556  12.636273\n",
       "   Test   0.701804  11.928445  13.036398  17.497720"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Depth = 8 Max_feature = 0.75\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.973082</td>\n",
       "      <td>6.390758</td>\n",
       "      <td>4.752973</td>\n",
       "      <td>6.649905</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.807394</td>\n",
       "      <td>12.338693</td>\n",
       "      <td>13.227625</td>\n",
       "      <td>17.566636</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.949787</td>\n",
       "      <td>7.140564</td>\n",
       "      <td>6.787074</td>\n",
       "      <td>9.012592</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.700763</td>\n",
       "      <td>14.054035</td>\n",
       "      <td>15.150864</td>\n",
       "      <td>20.451147</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.910971</td>\n",
       "      <td>9.089815</td>\n",
       "      <td>9.531867</td>\n",
       "      <td>12.583899</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.704410</td>\n",
       "      <td>11.924665</td>\n",
       "      <td>12.880017</td>\n",
       "      <td>17.421096</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.973082   6.390758   4.752973   6.649905\n",
       "   Test   0.807394  12.338693  13.227625  17.566636\n",
       "hf Train  0.949787   7.140564   6.787074   9.012592\n",
       "   Test   0.700763  14.054035  15.150864  20.451147\n",
       "ir Train  0.910971   9.089815   9.531867  12.583899\n",
       "   Test   0.704410  11.924665  12.880017  17.421096"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Depth = 8 Max_feature = 1\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.950520</td>\n",
       "      <td>8.158339</td>\n",
       "      <td>6.614947</td>\n",
       "      <td>9.015887</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.790510</td>\n",
       "      <td>12.773951</td>\n",
       "      <td>14.117354</td>\n",
       "      <td>18.320417</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.886546</td>\n",
       "      <td>9.159897</td>\n",
       "      <td>10.630490</td>\n",
       "      <td>13.547252</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.659644</td>\n",
       "      <td>13.682279</td>\n",
       "      <td>16.779217</td>\n",
       "      <td>21.811055</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.838211</td>\n",
       "      <td>10.103451</td>\n",
       "      <td>13.195621</td>\n",
       "      <td>16.963884</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.701967</td>\n",
       "      <td>10.572442</td>\n",
       "      <td>13.487952</td>\n",
       "      <td>17.492930</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.950520   8.158339   6.614947   9.015887\n",
       "   Test   0.790510  12.773951  14.117354  18.320417\n",
       "hf Train  0.886546   9.159897  10.630490  13.547252\n",
       "   Test   0.659644  13.682279  16.779217  21.811055\n",
       "ir Train  0.838211  10.103451  13.195621  16.963884\n",
       "   Test   0.701967  10.572442  13.487952  17.492930"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Depth = 9 Max_feature = 0.25\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.978249</td>\n",
       "      <td>5.756103</td>\n",
       "      <td>4.257410</td>\n",
       "      <td>5.977718</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.804757</td>\n",
       "      <td>12.417485</td>\n",
       "      <td>13.325088</td>\n",
       "      <td>17.686488</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.958384</td>\n",
       "      <td>6.497738</td>\n",
       "      <td>6.192879</td>\n",
       "      <td>8.204808</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.697423</td>\n",
       "      <td>14.134861</td>\n",
       "      <td>15.154036</td>\n",
       "      <td>20.564988</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.932625</td>\n",
       "      <td>8.004688</td>\n",
       "      <td>8.338584</td>\n",
       "      <td>10.947115</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.719040</td>\n",
       "      <td>11.826028</td>\n",
       "      <td>12.550737</td>\n",
       "      <td>16.984486</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.978249   5.756103   4.257410   5.977718\n",
       "   Test   0.804757  12.417485  13.325088  17.686488\n",
       "hf Train  0.958384   6.497738   6.192879   8.204808\n",
       "   Test   0.697423  14.134861  15.154036  20.564988\n",
       "ir Train  0.932625   8.004688   8.338584  10.947115\n",
       "   Test   0.719040  11.826028  12.550737  16.984486"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Depth = 9 Max_feature = 0.5\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.979967</td>\n",
       "      <td>5.509438</td>\n",
       "      <td>4.115281</td>\n",
       "      <td>5.736755</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.809197</td>\n",
       "      <td>12.310736</td>\n",
       "      <td>13.171532</td>\n",
       "      <td>17.484223</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.961924</td>\n",
       "      <td>6.233851</td>\n",
       "      <td>5.918297</td>\n",
       "      <td>7.848110</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.702816</td>\n",
       "      <td>14.050257</td>\n",
       "      <td>14.995288</td>\n",
       "      <td>20.380878</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.931197</td>\n",
       "      <td>8.105440</td>\n",
       "      <td>8.378350</td>\n",
       "      <td>11.062501</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.713601</td>\n",
       "      <td>11.810008</td>\n",
       "      <td>12.683530</td>\n",
       "      <td>17.148091</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.979967   5.509438   4.115281   5.736755\n",
       "   Test   0.809197  12.310736  13.171532  17.484223\n",
       "hf Train  0.961924   6.233851   5.918297   7.848110\n",
       "   Test   0.702816  14.050257  14.995288  20.380878\n",
       "ir Train  0.931197   8.105440   8.378350  11.062501\n",
       "   Test   0.713601  11.810008  12.683530  17.148091"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Depth = 9 Max_feature = 0.75\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.980635</td>\n",
       "      <td>5.412677</td>\n",
       "      <td>4.056275</td>\n",
       "      <td>5.640357</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.809461</td>\n",
       "      <td>12.335417</td>\n",
       "      <td>13.154031</td>\n",
       "      <td>17.472124</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.962969</td>\n",
       "      <td>6.188140</td>\n",
       "      <td>5.794523</td>\n",
       "      <td>7.739639</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.707158</td>\n",
       "      <td>14.029934</td>\n",
       "      <td>14.892381</td>\n",
       "      <td>20.231448</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.930659</td>\n",
       "      <td>8.138119</td>\n",
       "      <td>8.331446</td>\n",
       "      <td>11.105651</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.708758</td>\n",
       "      <td>11.969918</td>\n",
       "      <td>12.689310</td>\n",
       "      <td>17.292472</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.980635   5.412677   4.056275   5.640357\n",
       "   Test   0.809461  12.335417  13.154031  17.472124\n",
       "hf Train  0.962969   6.188140   5.794523   7.739639\n",
       "   Test   0.707158  14.029934  14.892381  20.231448\n",
       "ir Train  0.930659   8.138119   8.331446  11.105651\n",
       "   Test   0.708758  11.969918  12.689310  17.292472"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Depth = 9 Max_feature = 1\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.960087</td>\n",
       "      <td>7.422870</td>\n",
       "      <td>5.881088</td>\n",
       "      <td>8.097557</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.793104</td>\n",
       "      <td>12.684985</td>\n",
       "      <td>13.972549</td>\n",
       "      <td>18.206629</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.909914</td>\n",
       "      <td>8.479776</td>\n",
       "      <td>9.448239</td>\n",
       "      <td>12.071718</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.675912</td>\n",
       "      <td>13.745391</td>\n",
       "      <td>16.271573</td>\n",
       "      <td>21.283422</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.867164</td>\n",
       "      <td>9.599823</td>\n",
       "      <td>11.931958</td>\n",
       "      <td>15.371226</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.709800</td>\n",
       "      <td>10.634214</td>\n",
       "      <td>13.254123</td>\n",
       "      <td>17.261524</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.960087   7.422870   5.881088   8.097557\n",
       "   Test   0.793104  12.684985  13.972549  18.206629\n",
       "hf Train  0.909914   8.479776   9.448239  12.071718\n",
       "   Test   0.675912  13.745391  16.271573  21.283422\n",
       "ir Train  0.867164   9.599823  11.931958  15.371226\n",
       "   Test   0.709800  10.634214  13.254123  17.261524"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Depth = 10 Max_feature = 0.25\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.984327</td>\n",
       "      <td>4.892671</td>\n",
       "      <td>3.667358</td>\n",
       "      <td>5.074212</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.807480</td>\n",
       "      <td>12.373028</td>\n",
       "      <td>13.230832</td>\n",
       "      <td>17.562695</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.970127</td>\n",
       "      <td>5.518422</td>\n",
       "      <td>5.267520</td>\n",
       "      <td>6.951562</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.703889</td>\n",
       "      <td>14.026863</td>\n",
       "      <td>15.002313</td>\n",
       "      <td>20.344063</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.949526</td>\n",
       "      <td>6.960457</td>\n",
       "      <td>7.182710</td>\n",
       "      <td>9.475083</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.724721</td>\n",
       "      <td>11.727674</td>\n",
       "      <td>12.432190</td>\n",
       "      <td>16.811911</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.984327   4.892671   3.667358   5.074212\n",
       "   Test   0.807480  12.373028  13.230832  17.562695\n",
       "hf Train  0.970127   5.518422   5.267520   6.951562\n",
       "   Test   0.703889  14.026863  15.002313  20.344063\n",
       "ir Train  0.949526   6.960457   7.182710   9.475083\n",
       "   Test   0.724721  11.727674  12.432190  16.811911"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Depth = 10 Max_feature = 0.5\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.985428</td>\n",
       "      <td>4.686904</td>\n",
       "      <td>3.527231</td>\n",
       "      <td>4.892846</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.810291</td>\n",
       "      <td>12.278618</td>\n",
       "      <td>13.124159</td>\n",
       "      <td>17.434025</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.971547</td>\n",
       "      <td>5.377413</td>\n",
       "      <td>5.078788</td>\n",
       "      <td>6.784239</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.705746</td>\n",
       "      <td>13.995294</td>\n",
       "      <td>14.893462</td>\n",
       "      <td>20.280170</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.949007</td>\n",
       "      <td>7.082387</td>\n",
       "      <td>7.140659</td>\n",
       "      <td>9.523682</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.725758</td>\n",
       "      <td>11.781772</td>\n",
       "      <td>12.403824</td>\n",
       "      <td>16.780218</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.985428   4.686904   3.527231   4.892846\n",
       "   Test   0.810291  12.278618  13.124159  17.434025\n",
       "hf Train  0.971547   5.377413   5.078788   6.784239\n",
       "   Test   0.705746  13.995294  14.893462  20.280170\n",
       "ir Train  0.949007   7.082387   7.140659   9.523682\n",
       "   Test   0.725758  11.781772  12.403824  16.780218"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Depth = 10 Max_feature = 0.75\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.985639</td>\n",
       "      <td>4.657013</td>\n",
       "      <td>3.512499</td>\n",
       "      <td>4.857264</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.808777</td>\n",
       "      <td>12.337719</td>\n",
       "      <td>13.143353</td>\n",
       "      <td>17.503461</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.973370</td>\n",
       "      <td>5.256930</td>\n",
       "      <td>4.924952</td>\n",
       "      <td>6.563343</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.707947</td>\n",
       "      <td>13.925694</td>\n",
       "      <td>14.809216</td>\n",
       "      <td>20.204161</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.948508</td>\n",
       "      <td>7.100277</td>\n",
       "      <td>7.112953</td>\n",
       "      <td>9.570153</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.709261</td>\n",
       "      <td>12.113733</td>\n",
       "      <td>12.661646</td>\n",
       "      <td>17.277554</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.985639   4.657013   3.512499   4.857264\n",
       "   Test   0.808777  12.337719  13.143353  17.503461\n",
       "hf Train  0.973370   5.256930   4.924952   6.563343\n",
       "   Test   0.707947  13.925694  14.809216  20.204161\n",
       "ir Train  0.948508   7.100277   7.112953   9.570153\n",
       "   Test   0.709261  12.113733  12.661646  17.277554"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Depth = 10 Max_feature = 1\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.969820</td>\n",
       "      <td>6.571941</td>\n",
       "      <td>5.141696</td>\n",
       "      <td>7.041340</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.792469</td>\n",
       "      <td>12.874955</td>\n",
       "      <td>13.883946</td>\n",
       "      <td>18.234537</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.926476</td>\n",
       "      <td>7.897516</td>\n",
       "      <td>8.426953</td>\n",
       "      <td>10.905783</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.668919</td>\n",
       "      <td>13.905537</td>\n",
       "      <td>16.394564</td>\n",
       "      <td>21.511828</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.894361</td>\n",
       "      <td>8.913779</td>\n",
       "      <td>10.593518</td>\n",
       "      <td>13.707633</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.715307</td>\n",
       "      <td>10.920192</td>\n",
       "      <td>13.065793</td>\n",
       "      <td>17.096936</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.969820   6.571941   5.141696   7.041340\n",
       "   Test   0.792469  12.874955  13.883946  18.234537\n",
       "hf Train  0.926476   7.897516   8.426953  10.905783\n",
       "   Test   0.668919  13.905537  16.394564  21.511828\n",
       "ir Train  0.894361   8.913779  10.593518  13.707633\n",
       "   Test   0.715307  10.920192  13.065793  17.096936"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0.25</th>\n",
       "      <th>0.5</th>\n",
       "      <th>0.75</th>\n",
       "      <th>1.0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.615403</td>\n",
       "      <td>0.580124</td>\n",
       "      <td>0.550978</td>\n",
       "      <td>0.420057</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.698724</td>\n",
       "      <td>0.693980</td>\n",
       "      <td>0.670568</td>\n",
       "      <td>0.649330</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.745948</td>\n",
       "      <td>0.747694</td>\n",
       "      <td>0.741868</td>\n",
       "      <td>0.728558</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.777155</td>\n",
       "      <td>0.782363</td>\n",
       "      <td>0.783211</td>\n",
       "      <td>0.757709</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.792544</td>\n",
       "      <td>0.794659</td>\n",
       "      <td>0.795931</td>\n",
       "      <td>0.772639</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.798803</td>\n",
       "      <td>0.801736</td>\n",
       "      <td>0.801651</td>\n",
       "      <td>0.782198</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.801520</td>\n",
       "      <td>0.804159</td>\n",
       "      <td>0.805860</td>\n",
       "      <td>0.787157</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.804048</td>\n",
       "      <td>0.806735</td>\n",
       "      <td>0.807394</td>\n",
       "      <td>0.790510</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0.804757</td>\n",
       "      <td>0.809197</td>\n",
       "      <td>0.809461</td>\n",
       "      <td>0.793104</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0.807480</td>\n",
       "      <td>0.810291</td>\n",
       "      <td>0.808777</td>\n",
       "      <td>0.792469</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        0.25      0.50      0.75      1.00\n",
       "1   0.615403  0.580124  0.550978  0.420057\n",
       "2   0.698724  0.693980  0.670568  0.649330\n",
       "3   0.745948  0.747694  0.741868  0.728558\n",
       "4   0.777155  0.782363  0.783211  0.757709\n",
       "5   0.792544  0.794659  0.795931  0.772639\n",
       "6   0.798803  0.801736  0.801651  0.782198\n",
       "7   0.801520  0.804159  0.805860  0.787157\n",
       "8   0.804048  0.806735  0.807394  0.790510\n",
       "9   0.804757  0.809197  0.809461  0.793104\n",
       "10  0.807480  0.810291  0.808777  0.792469"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0.25</th>\n",
       "      <th>0.5</th>\n",
       "      <th>0.75</th>\n",
       "      <th>1.0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.476940</td>\n",
       "      <td>0.449659</td>\n",
       "      <td>0.428361</td>\n",
       "      <td>0.223160</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.600393</td>\n",
       "      <td>0.586194</td>\n",
       "      <td>0.580202</td>\n",
       "      <td>0.479777</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.635253</td>\n",
       "      <td>0.631293</td>\n",
       "      <td>0.631375</td>\n",
       "      <td>0.566409</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.647011</td>\n",
       "      <td>0.652604</td>\n",
       "      <td>0.652491</td>\n",
       "      <td>0.615361</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.664115</td>\n",
       "      <td>0.666923</td>\n",
       "      <td>0.671479</td>\n",
       "      <td>0.635085</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.670831</td>\n",
       "      <td>0.679532</td>\n",
       "      <td>0.683121</td>\n",
       "      <td>0.643092</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.686001</td>\n",
       "      <td>0.688637</td>\n",
       "      <td>0.698200</td>\n",
       "      <td>0.654164</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.693967</td>\n",
       "      <td>0.699990</td>\n",
       "      <td>0.700763</td>\n",
       "      <td>0.659644</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0.697423</td>\n",
       "      <td>0.702816</td>\n",
       "      <td>0.707158</td>\n",
       "      <td>0.675912</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0.703889</td>\n",
       "      <td>0.705746</td>\n",
       "      <td>0.707947</td>\n",
       "      <td>0.668919</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        0.25      0.50      0.75      1.00\n",
       "1   0.476940  0.449659  0.428361  0.223160\n",
       "2   0.600393  0.586194  0.580202  0.479777\n",
       "3   0.635253  0.631293  0.631375  0.566409\n",
       "4   0.647011  0.652604  0.652491  0.615361\n",
       "5   0.664115  0.666923  0.671479  0.635085\n",
       "6   0.670831  0.679532  0.683121  0.643092\n",
       "7   0.686001  0.688637  0.698200  0.654164\n",
       "8   0.693967  0.699990  0.700763  0.659644\n",
       "9   0.697423  0.702816  0.707158  0.675912\n",
       "10  0.703889  0.705746  0.707947  0.668919"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0.25</th>\n",
       "      <th>0.5</th>\n",
       "      <th>0.75</th>\n",
       "      <th>1.0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.574702</td>\n",
       "      <td>0.557939</td>\n",
       "      <td>0.515913</td>\n",
       "      <td>0.219402</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.620595</td>\n",
       "      <td>0.578231</td>\n",
       "      <td>0.568139</td>\n",
       "      <td>0.470651</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.630099</td>\n",
       "      <td>0.629825</td>\n",
       "      <td>0.620630</td>\n",
       "      <td>0.575720</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.656617</td>\n",
       "      <td>0.654933</td>\n",
       "      <td>0.648367</td>\n",
       "      <td>0.604383</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.669122</td>\n",
       "      <td>0.655352</td>\n",
       "      <td>0.639693</td>\n",
       "      <td>0.632319</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0.684987</td>\n",
       "      <td>0.679759</td>\n",
       "      <td>0.671229</td>\n",
       "      <td>0.666862</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0.701605</td>\n",
       "      <td>0.695515</td>\n",
       "      <td>0.690223</td>\n",
       "      <td>0.686362</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0.716459</td>\n",
       "      <td>0.701804</td>\n",
       "      <td>0.704410</td>\n",
       "      <td>0.701967</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0.719040</td>\n",
       "      <td>0.713601</td>\n",
       "      <td>0.708758</td>\n",
       "      <td>0.709800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0.724721</td>\n",
       "      <td>0.725758</td>\n",
       "      <td>0.709261</td>\n",
       "      <td>0.715307</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        0.25      0.50      0.75      1.00\n",
       "1   0.574702  0.557939  0.515913  0.219402\n",
       "2   0.620595  0.578231  0.568139  0.470651\n",
       "3   0.630099  0.629825  0.620630  0.575720\n",
       "4   0.656617  0.654933  0.648367  0.604383\n",
       "5   0.669122  0.655352  0.639693  0.632319\n",
       "6   0.684987  0.679759  0.671229  0.666862\n",
       "7   0.701605  0.695515  0.690223  0.686362\n",
       "8   0.716459  0.701804  0.704410  0.701967\n",
       "9   0.719040  0.713601  0.708758  0.709800\n",
       "10  0.724721  0.725758  0.709261  0.715307"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "ename": "IndexError",
     "evalue": "list index out of range",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-219-984b854eed0a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     25\u001b[0m     \u001b[0mbest_alpha_ind\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0margmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mscore\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     26\u001b[0m     \u001b[0mbest_degree\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdegrees\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mbest_degree_ind\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 27\u001b[0;31m     \u001b[0mbest_alpha\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlambdas\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mbest_alpha_ind\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     28\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mangs\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mind\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m':'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     29\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"The best model has depth = {} and max_feature = {}.\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbest_degree\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbest_alpha\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mIndexError\u001b[0m: list index out of range"
     ]
    }
   ],
   "source": [
    "depths = list(range(1, 11))\n",
    "max_features = [0.25, 0.5, 0.75, 1]\n",
    "ab_lasso_scores = np.zeros((len(depths),len(max_features)))\n",
    "hf_lasso_scores = np.zeros((len(depths),len(max_features)))\n",
    "ir_lasso_scores = np.zeros((len(depths),len(max_features)))\n",
    "\n",
    "for ind1, depth in enumerate(depths):\n",
    "    for ind2, max_feature in enumerate(max_features):\n",
    "        print('Depth =', depth, 'Max_feature =', max_feature)\n",
    "        forest = RandomForestRegressor(n_estimators=100, max_depth=depth, \n",
    "                                       max_features=max_feature)\n",
    "        result, _ = display_all_results(forest, X_df_added, y_df_added, poly_deg=3)\n",
    "        ab_lasso_scores[ind1][ind2] = result[0].r2[1]\n",
    "        hf_lasso_scores[ind1][ind2] = result[1].r2[1]\n",
    "        ir_lasso_scores[ind1][ind2] = result[2].r2[1]\n",
    "\n",
    "display(pd.DataFrame(ab_lasso_scores, index=depths, columns=max_features))\n",
    "display(pd.DataFrame(hf_lasso_scores, index=depths, columns=max_features))\n",
    "display(pd.DataFrame(ir_lasso_scores, index=depths, columns=max_features))\n",
    "scores_list = [ab_lasso_scores, hf_lasso_scores, ir_lasso_scores]\n",
    "   \n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ab:\n",
      "The best model has depth = 0.5 and max_feature = 10.\n",
      "The best model has R2 = 0.8102907174628234.\n",
      "\n",
      "hf:\n",
      "The best model has depth = 0.75 and max_feature = 10.\n",
      "The best model has R2 = 0.707947319008627.\n",
      "\n",
      "ir:\n",
      "The best model has depth = 0.5 and max_feature = 10.\n",
      "The best model has R2 = 0.7257575157235445.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "for ind, score in enumerate(scores_list):\n",
    "    best_score = np.max(score)\n",
    "    best_degree_ind = np.argmax(np.max(score, axis=0))\n",
    "    best_alpha_ind = np.argmax(np.max(score, axis=1))\n",
    "    best_degree = max_features[best_degree_ind]\n",
    "    best_alpha = depths[best_alpha_ind]\n",
    "    print(angs[ind] + ':')\n",
    "    print(\"The best model has depth = {} and max_feature = {}.\".format(best_degree, best_alpha))                                                                      \n",
    "    print(\"The best model has R2 = {}.\\n\".format(best_score))  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**J. Boosting**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 223,
   "metadata": {},
   "outputs": [],
   "source": [
    "from xgboost import XGBRegressor\n",
    "from lightgbm.sklearn import LGBMRegressor\n",
    "from catboost import CatBoostRegressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.945032</td>\n",
       "      <td>9.227888</td>\n",
       "      <td>6.734068</td>\n",
       "      <td>9.509303</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.792408</td>\n",
       "      <td>12.769256</td>\n",
       "      <td>13.942710</td>\n",
       "      <td>18.264920</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.883433</td>\n",
       "      <td>10.895499</td>\n",
       "      <td>10.475998</td>\n",
       "      <td>13.718869</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.650838</td>\n",
       "      <td>14.893343</td>\n",
       "      <td>16.826315</td>\n",
       "      <td>22.081145</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.842136</td>\n",
       "      <td>11.724480</td>\n",
       "      <td>12.670775</td>\n",
       "      <td>16.766489</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.654466</td>\n",
       "      <td>12.334764</td>\n",
       "      <td>14.068693</td>\n",
       "      <td>18.922829</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.945032   9.227888   6.734068   9.509303\n",
       "   Test   0.792408  12.769256  13.942710  18.264920\n",
       "hf Train  0.883433  10.895499  10.475998  13.718869\n",
       "   Test   0.650838  14.893343  16.826315  22.081145\n",
       "ir Train  0.842136  11.724480  12.670775  16.766489\n",
       "   Test   0.654466  12.334764  14.068693  18.922829"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "xgb = XGBRegressor()\n",
    "display_all_results(xgb, X_df, y_df, poly_deg=3);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.957497</td>\n",
       "      <td>8.127857</td>\n",
       "      <td>5.861886</td>\n",
       "      <td>8.356155</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.806481</td>\n",
       "      <td>12.489268</td>\n",
       "      <td>13.222323</td>\n",
       "      <td>17.608188</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.925544</td>\n",
       "      <td>8.751848</td>\n",
       "      <td>8.388052</td>\n",
       "      <td>10.974622</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.719418</td>\n",
       "      <td>13.953463</td>\n",
       "      <td>14.969674</td>\n",
       "      <td>19.803409</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.888537</td>\n",
       "      <td>10.170857</td>\n",
       "      <td>10.769584</td>\n",
       "      <td>14.080390</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.678984</td>\n",
       "      <td>12.047663</td>\n",
       "      <td>13.891518</td>\n",
       "      <td>18.154892</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.957497   8.127857   5.861886   8.356155\n",
       "   Test   0.806481  12.489268  13.222323  17.608188\n",
       "hf Train  0.925544   8.751848   8.388052  10.974622\n",
       "   Test   0.719418  13.953463  14.969674  19.803409\n",
       "ir Train  0.888537  10.170857  10.769584  14.080390\n",
       "   Test   0.678984  12.047663  13.891518  18.154892"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "xgb = XGBRegressor()\n",
    "display_all_results(xgb, X_df_added, y_df_added, poly_deg=3);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 224,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.999774</td>\n",
       "      <td>0.637062</td>\n",
       "      <td>0.438409</td>\n",
       "      <td>0.609184</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.807097</td>\n",
       "      <td>12.973329</td>\n",
       "      <td>13.020379</td>\n",
       "      <td>17.580171</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.999782</td>\n",
       "      <td>0.603143</td>\n",
       "      <td>0.418862</td>\n",
       "      <td>0.593538</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.718117</td>\n",
       "      <td>14.148767</td>\n",
       "      <td>14.575026</td>\n",
       "      <td>19.849270</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.999641</td>\n",
       "      <td>0.719508</td>\n",
       "      <td>0.559872</td>\n",
       "      <td>0.798641</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.714146</td>\n",
       "      <td>12.453013</td>\n",
       "      <td>12.309883</td>\n",
       "      <td>17.131770</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.999774   0.637062   0.438409   0.609184\n",
       "   Test   0.807097  12.973329  13.020379  17.580171\n",
       "hf Train  0.999782   0.603143   0.418862   0.593538\n",
       "   Test   0.718117  14.148767  14.575026  19.849270\n",
       "ir Train  0.999641   0.719508   0.559872   0.798641\n",
       "   Test   0.714146  12.453013  12.309883  17.131770"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "xgb = XGBRegressor(max_depth=10, n_jobs=-1, max_features=0.5)\n",
    "display_all_results(xgb, X_df_added, y_df_added, poly_deg=3);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.979030</td>\n",
       "      <td>5.071491</td>\n",
       "      <td>5.130644</td>\n",
       "      <td>5.873479</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.786030</td>\n",
       "      <td>13.423021</td>\n",
       "      <td>14.117580</td>\n",
       "      <td>18.543393</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.949742</td>\n",
       "      <td>6.468867</td>\n",
       "      <td>7.929608</td>\n",
       "      <td>9.008059</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.661719</td>\n",
       "      <td>14.203729</td>\n",
       "      <td>16.905413</td>\n",
       "      <td>21.734364</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.922570</td>\n",
       "      <td>6.831917</td>\n",
       "      <td>10.443387</td>\n",
       "      <td>11.742351</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.665649</td>\n",
       "      <td>11.643401</td>\n",
       "      <td>14.334614</td>\n",
       "      <td>18.614121</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.979030   5.071491   5.130644   5.873479\n",
       "   Test   0.786030  13.423021  14.117580  18.543393\n",
       "hf Train  0.949742   6.468867   7.929608   9.008059\n",
       "   Test   0.661719  14.203729  16.905413  21.734364\n",
       "ir Train  0.922570   6.831917  10.443387  11.742351\n",
       "   Test   0.665649  11.643401  14.334614  18.614121"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ada = AdaBoostRegressor(base_estimator=RandomForestRegressor(n_estimators=100, max_depth=8),n_estimators=800, learning_rate=0.05)\n",
    "display_all_results(ada, X_df, y_df, poly_deg=3);\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.987795</td>\n",
       "      <td>3.871905</td>\n",
       "      <td>3.936634</td>\n",
       "      <td>4.477871</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.807990</td>\n",
       "      <td>12.640871</td>\n",
       "      <td>13.150888</td>\n",
       "      <td>17.539403</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.974649</td>\n",
       "      <td>4.611158</td>\n",
       "      <td>5.735085</td>\n",
       "      <td>6.403779</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.744624</td>\n",
       "      <td>13.019459</td>\n",
       "      <td>14.375384</td>\n",
       "      <td>18.892959</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.956499</td>\n",
       "      <td>5.146927</td>\n",
       "      <td>7.895337</td>\n",
       "      <td>8.796320</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.728911</td>\n",
       "      <td>11.157434</td>\n",
       "      <td>12.651888</td>\n",
       "      <td>16.683468</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.987795   3.871905   3.936634   4.477871\n",
       "   Test   0.807990  12.640871  13.150888  17.539403\n",
       "hf Train  0.974649   4.611158   5.735085   6.403779\n",
       "   Test   0.744624  13.019459  14.375384  18.892959\n",
       "ir Train  0.956499   5.146927   7.895337   8.796320\n",
       "   Test   0.728911  11.157434  12.651888  16.683468"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ada = AdaBoostRegressor(base_estimator=RandomForestRegressor(n_estimators=100, max_depth=8))\n",
    "display_all_results(ada, X_df_added, y_df_added, poly_deg=3);\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.994329</td>\n",
       "      <td>2.657201</td>\n",
       "      <td>2.763343</td>\n",
       "      <td>3.052345</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.809683</td>\n",
       "      <td>12.638447</td>\n",
       "      <td>13.067078</td>\n",
       "      <td>17.461914</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.987957</td>\n",
       "      <td>3.248063</td>\n",
       "      <td>4.047705</td>\n",
       "      <td>4.413840</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.742598</td>\n",
       "      <td>13.128329</td>\n",
       "      <td>14.303792</td>\n",
       "      <td>18.967782</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.977696</td>\n",
       "      <td>3.814832</td>\n",
       "      <td>5.777417</td>\n",
       "      <td>6.298600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.739101</td>\n",
       "      <td>11.387519</td>\n",
       "      <td>12.266190</td>\n",
       "      <td>16.366898</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.994329   2.657201   2.763343   3.052345\n",
       "   Test   0.809683  12.638447  13.067078  17.461914\n",
       "hf Train  0.987957   3.248063   4.047705   4.413840\n",
       "   Test   0.742598  13.128329  14.303792  18.967782\n",
       "ir Train  0.977696   3.814832   5.777417   6.298600\n",
       "   Test   0.739101  11.387519  12.266190  16.366898"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ada = AdaBoostRegressor(base_estimator=RandomForestRegressor(n_estimators=100, max_depth=10, max_features=0.5))\n",
    "display_all_results(ada, X_df_added, y_df_added, poly_deg=3);\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 314,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.994896</td>\n",
       "      <td>2.416440</td>\n",
       "      <td>2.571844</td>\n",
       "      <td>2.895563</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.809607</td>\n",
       "      <td>12.662546</td>\n",
       "      <td>13.040656</td>\n",
       "      <td>17.465406</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.990702</td>\n",
       "      <td>2.878475</td>\n",
       "      <td>3.528079</td>\n",
       "      <td>3.878184</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.746462</td>\n",
       "      <td>12.994416</td>\n",
       "      <td>14.258091</td>\n",
       "      <td>18.824854</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.983927</td>\n",
       "      <td>3.267041</td>\n",
       "      <td>4.887371</td>\n",
       "      <td>5.346830</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.741833</td>\n",
       "      <td>11.305865</td>\n",
       "      <td>12.153426</td>\n",
       "      <td>16.280985</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.994896   2.416440   2.571844   2.895563\n",
       "   Test   0.809607  12.662546  13.040656  17.465406\n",
       "hf Train  0.990702   2.878475   3.528079   3.878184\n",
       "   Test   0.746462  12.994416  14.258091  18.824854\n",
       "ir Train  0.983927   3.267041   4.887371   5.346830\n",
       "   Test   0.741833  11.305865  12.153426  16.280985"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ada = AdaBoostRegressor(base_estimator=RandomForestRegressor(n_estimators=100, max_depth=12, max_features=0.5), n_estimators=100, loss='square')\n",
    "display_all_results(ada, X_df_added, y_df_added, poly_deg=3);\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.842820</td>\n",
       "      <td>14.229902</td>\n",
       "      <td>13.308939</td>\n",
       "      <td>16.069224</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.738936</td>\n",
       "      <td>14.068906</td>\n",
       "      <td>16.475235</td>\n",
       "      <td>20.451589</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.850910</td>\n",
       "      <td>12.974844</td>\n",
       "      <td>12.703229</td>\n",
       "      <td>15.529756</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.658032</td>\n",
       "      <td>15.287865</td>\n",
       "      <td>17.594061</td>\n",
       "      <td>21.862650</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.719087</td>\n",
       "      <td>16.370753</td>\n",
       "      <td>18.686403</td>\n",
       "      <td>22.353027</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.635773</td>\n",
       "      <td>10.491284</td>\n",
       "      <td>15.613073</td>\n",
       "      <td>19.338220</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.842820  14.229902  13.308939  16.069224\n",
       "   Test   0.738936  14.068906  16.475235  20.451589\n",
       "hf Train  0.850910  12.974844  12.703229  15.529756\n",
       "   Test   0.658032  15.287865  17.594061  21.862650\n",
       "ir Train  0.719087  16.370753  18.686403  22.353027\n",
       "   Test   0.635773  10.491284  15.613073  19.338220"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ada = AdaBoostRegressor(base_estimator=LinearRegression())\n",
    "display_all_results(ada, X_df_added, y_df_added, poly_deg=3);\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.932133</td>\n",
       "      <td>10.010838</td>\n",
       "      <td>8.017007</td>\n",
       "      <td>10.559079</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.804035</td>\n",
       "      <td>12.746199</td>\n",
       "      <td>13.713176</td>\n",
       "      <td>17.719154</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.872833</td>\n",
       "      <td>11.835100</td>\n",
       "      <td>11.420992</td>\n",
       "      <td>14.342631</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.690843</td>\n",
       "      <td>14.095384</td>\n",
       "      <td>16.483647</td>\n",
       "      <td>20.787381</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.753758</td>\n",
       "      <td>15.659983</td>\n",
       "      <td>17.156830</td>\n",
       "      <td>20.928148</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.658750</td>\n",
       "      <td>10.733136</td>\n",
       "      <td>14.831163</td>\n",
       "      <td>18.718306</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.932133  10.010838   8.017007  10.559079\n",
       "   Test   0.804035  12.746199  13.713176  17.719154\n",
       "hf Train  0.872833  11.835100  11.420992  14.342631\n",
       "   Test   0.690843  14.095384  16.483647  20.787381\n",
       "ir Train  0.753758  15.659983  17.156830  20.928148\n",
       "   Test   0.658750  10.733136  14.831163  18.718306"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ada = AdaBoostRegressor(base_estimator=Ridge(alpha = 0.05))\n",
    "display_all_results(ada, X_df_added, y_df_added, poly_deg=3);\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 225,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.270728</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.713999</td>\n",
       "      <td>16.086946</td>\n",
       "      <td>15.635510</td>\n",
       "      <td>21.406081</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.270308</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.604844</td>\n",
       "      <td>17.327900</td>\n",
       "      <td>17.677483</td>\n",
       "      <td>23.501451</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.259107</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.359829</td>\n",
       "      <td>20.131737</td>\n",
       "      <td>17.859467</td>\n",
       "      <td>25.637646</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  1.000000   0.270728   0.000000   0.000000\n",
       "   Test   0.713999  16.086946  15.635510  21.406081\n",
       "hf Train  1.000000   0.270308   0.000000   0.000000\n",
       "   Test   0.604844  17.327900  17.677483  23.501451\n",
       "ir Train  1.000000   0.259107   0.000000   0.000000\n",
       "   Test   0.359829  20.131737  17.859467  25.637646"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "clf =  DecisionTreeRegressor()\n",
    "display_all_results(clf, X_df_added, y_df_added, poly_deg=3);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 226,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.905944</td>\n",
       "      <td>8.494470</td>\n",
       "      <td>10.570224</td>\n",
       "      <td>12.430533</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.775812</td>\n",
       "      <td>12.272683</td>\n",
       "      <td>15.445112</td>\n",
       "      <td>18.952205</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.838074</td>\n",
       "      <td>9.414935</td>\n",
       "      <td>13.645183</td>\n",
       "      <td>16.184487</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.708785</td>\n",
       "      <td>11.972230</td>\n",
       "      <td>16.142565</td>\n",
       "      <td>20.175160</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.754347</td>\n",
       "      <td>9.979217</td>\n",
       "      <td>17.758259</td>\n",
       "      <td>20.903112</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.643759</td>\n",
       "      <td>9.233069</td>\n",
       "      <td>15.376199</td>\n",
       "      <td>19.125023</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.905944   8.494470  10.570224  12.430533\n",
       "   Test   0.775812  12.272683  15.445112  18.952205\n",
       "hf Train  0.838074   9.414935  13.645183  16.184487\n",
       "   Test   0.708785  11.972230  16.142565  20.175160\n",
       "ir Train  0.754347   9.979217  17.758259  20.903112\n",
       "   Test   0.643759   9.233069  15.376199  19.125023"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "clf =  AdaBoostRegressor()\n",
    "display_all_results(clf, X_df_added, y_df_added, poly_deg=3);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 227,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.992606</td>\n",
       "      <td>3.378041</td>\n",
       "      <td>2.199304</td>\n",
       "      <td>3.485238</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.797680</td>\n",
       "      <td>12.764953</td>\n",
       "      <td>13.394845</td>\n",
       "      <td>18.004159</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.987876</td>\n",
       "      <td>3.735573</td>\n",
       "      <td>2.988414</td>\n",
       "      <td>4.428504</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.698034</td>\n",
       "      <td>14.304622</td>\n",
       "      <td>15.026078</td>\n",
       "      <td>20.544188</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.982839</td>\n",
       "      <td>4.428270</td>\n",
       "      <td>3.535780</td>\n",
       "      <td>5.524860</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.691154</td>\n",
       "      <td>13.382255</td>\n",
       "      <td>12.773699</td>\n",
       "      <td>17.807429</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.992606   3.378041   2.199304   3.485238\n",
       "   Test   0.797680  12.764953  13.394845  18.004159\n",
       "hf Train  0.987876   3.735573   2.988414   4.428504\n",
       "   Test   0.698034  14.304622  15.026078  20.544188\n",
       "ir Train  0.982839   4.428270   3.535780   5.524860\n",
       "   Test   0.691154  13.382255  12.773699  17.807429"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "clf =  RandomForestRegressor()\n",
    "display_all_results(clf, X_df_added, y_df_added, poly_deg=3);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 228,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.957497</td>\n",
       "      <td>8.127857</td>\n",
       "      <td>5.861886</td>\n",
       "      <td>8.356155</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.806481</td>\n",
       "      <td>12.489268</td>\n",
       "      <td>13.222323</td>\n",
       "      <td>17.608188</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.925544</td>\n",
       "      <td>8.751848</td>\n",
       "      <td>8.388052</td>\n",
       "      <td>10.974622</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.719418</td>\n",
       "      <td>13.953463</td>\n",
       "      <td>14.969674</td>\n",
       "      <td>19.803409</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.888537</td>\n",
       "      <td>10.170857</td>\n",
       "      <td>10.769584</td>\n",
       "      <td>14.080390</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.678984</td>\n",
       "      <td>12.047663</td>\n",
       "      <td>13.891518</td>\n",
       "      <td>18.154892</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.957497   8.127857   5.861886   8.356155\n",
       "   Test   0.806481  12.489268  13.222323  17.608188\n",
       "hf Train  0.925544   8.751848   8.388052  10.974622\n",
       "   Test   0.719418  13.953463  14.969674  19.803409\n",
       "ir Train  0.888537  10.170857  10.769584  14.080390\n",
       "   Test   0.678984  12.047663  13.891518  18.154892"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "clf = XGBRegressor()\n",
    "display_all_results(clf, X_df_added, y_df_added, poly_deg=3);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 229,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.989973</td>\n",
       "      <td>3.918102</td>\n",
       "      <td>3.015817</td>\n",
       "      <td>4.058717</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.808975</td>\n",
       "      <td>12.559419</td>\n",
       "      <td>12.983248</td>\n",
       "      <td>17.494399</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.982982</td>\n",
       "      <td>4.558194</td>\n",
       "      <td>3.987053</td>\n",
       "      <td>5.246791</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.734621</td>\n",
       "      <td>13.724970</td>\n",
       "      <td>14.336482</td>\n",
       "      <td>19.259425</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.977474</td>\n",
       "      <td>5.084236</td>\n",
       "      <td>4.725008</td>\n",
       "      <td>6.329769</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.703551</td>\n",
       "      <td>12.527984</td>\n",
       "      <td>12.749305</td>\n",
       "      <td>17.446391</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.989973   3.918102   3.015817   4.058717\n",
       "   Test   0.808975  12.559419  12.983248  17.494399\n",
       "hf Train  0.982982   4.558194   3.987053   5.246791\n",
       "   Test   0.734621  13.724970  14.336482  19.259425\n",
       "ir Train  0.977474   5.084236   4.725008   6.329769\n",
       "   Test   0.703551  12.527984  12.749305  17.446391"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "clf = LGBMRegressor()\n",
    "display_all_results(clf, X_df_added, y_df_added, poly_deg=3);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 231,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.970982</td>\n",
       "      <td>6.696114</td>\n",
       "      <td>4.898650</td>\n",
       "      <td>6.904451</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.811617</td>\n",
       "      <td>12.589948</td>\n",
       "      <td>12.969229</td>\n",
       "      <td>17.372992</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.954713</td>\n",
       "      <td>7.236837</td>\n",
       "      <td>6.443011</td>\n",
       "      <td>8.559100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.730316</td>\n",
       "      <td>13.753485</td>\n",
       "      <td>14.685054</td>\n",
       "      <td>19.415001</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.946233</td>\n",
       "      <td>7.745285</td>\n",
       "      <td>7.313509</td>\n",
       "      <td>9.779302</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.735704</td>\n",
       "      <td>11.566283</td>\n",
       "      <td>12.401721</td>\n",
       "      <td>16.473098</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.970982   6.696114   4.898650   6.904451\n",
       "   Test   0.811617  12.589948  12.969229  17.372992\n",
       "hf Train  0.954713   7.236837   6.443011   8.559100\n",
       "   Test   0.730316  13.753485  14.685054  19.415001\n",
       "ir Train  0.946233   7.745285   7.313509   9.779302\n",
       "   Test   0.735704  11.566283  12.401721  16.473098"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "clf = CatBoostRegressor(verbose=False)\n",
    "display_all_results(clf, X_df_added, y_df_added, poly_deg=3);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 232,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>r2</th>\n",
       "      <th>mean_std</th>\n",
       "      <th>mae</th>\n",
       "      <th>rmse</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ab</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.925584</td>\n",
       "      <td>8.796673</td>\n",
       "      <td>8.095190</td>\n",
       "      <td>11.056774</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.782788</td>\n",
       "      <td>12.174500</td>\n",
       "      <td>14.240207</td>\n",
       "      <td>18.654992</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">hf</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.898377</td>\n",
       "      <td>8.924548</td>\n",
       "      <td>10.020524</td>\n",
       "      <td>12.821414</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.700785</td>\n",
       "      <td>13.559069</td>\n",
       "      <td>15.581769</td>\n",
       "      <td>20.450417</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"2\" valign=\"top\">ir</th>\n",
       "      <th>Train</th>\n",
       "      <td>0.854887</td>\n",
       "      <td>10.019681</td>\n",
       "      <td>12.895308</td>\n",
       "      <td>16.065857</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Test</th>\n",
       "      <td>0.699962</td>\n",
       "      <td>10.728880</td>\n",
       "      <td>13.729617</td>\n",
       "      <td>17.551657</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                r2   mean_std        mae       rmse\n",
       "ab Train  0.925584   8.796673   8.095190  11.056774\n",
       "   Test   0.782788  12.174500  14.240207  18.654992\n",
       "hf Train  0.898377   8.924548  10.020524  12.821414\n",
       "   Test   0.700785  13.559069  15.581769  20.450417\n",
       "ir Train  0.854887  10.019681  12.895308  16.065857\n",
       "   Test   0.699962  10.728880  13.729617  17.551657"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "clf = CatBoostRegressor(verbose=False, max_depth=10, n_estimators=100)\n",
    "display_all_results(clf, X_df_added, y_df_added, poly_deg=3);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**K. ANN**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 236,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "108"
      ]
     },
     "execution_count": 236,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train.shape[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 309,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "dense_158 (Dense)            (None, 100)               10900     \n",
      "_________________________________________________________________\n",
      "dense_159 (Dense)            (None, 100)               10100     \n",
      "_________________________________________________________________\n",
      "dense_160 (Dense)            (None, 90)                9090      \n",
      "_________________________________________________________________\n",
      "dense_161 (Dense)            (None, 90)                8190      \n",
      "_________________________________________________________________\n",
      "dense_162 (Dense)            (None, 80)                7280      \n",
      "_________________________________________________________________\n",
      "dense_163 (Dense)            (None, 80)                6480      \n",
      "_________________________________________________________________\n",
      "dense_164 (Dense)            (None, 70)                5670      \n",
      "_________________________________________________________________\n",
      "dense_165 (Dense)            (None, 70)                4970      \n",
      "_________________________________________________________________\n",
      "dense_166 (Dense)            (None, 60)                4260      \n",
      "_________________________________________________________________\n",
      "dense_167 (Dense)            (None, 60)                3660      \n",
      "_________________________________________________________________\n",
      "dense_168 (Dense)            (None, 50)                3050      \n",
      "_________________________________________________________________\n",
      "dense_169 (Dense)            (None, 50)                2550      \n",
      "_________________________________________________________________\n",
      "dense_170 (Dense)            (None, 40)                2040      \n",
      "_________________________________________________________________\n",
      "dense_171 (Dense)            (None, 40)                1640      \n",
      "_________________________________________________________________\n",
      "dense_172 (Dense)            (None, 30)                1230      \n",
      "_________________________________________________________________\n",
      "dense_173 (Dense)            (None, 30)                930       \n",
      "_________________________________________________________________\n",
      "dense_174 (Dense)            (None, 20)                620       \n",
      "_________________________________________________________________\n",
      "dense_175 (Dense)            (None, 20)                420       \n",
      "_________________________________________________________________\n",
      "dense_176 (Dense)            (None, 10)                210       \n",
      "_________________________________________________________________\n",
      "dense_177 (Dense)            (None, 10)                110       \n",
      "_________________________________________________________________\n",
      "dense_178 (Dense)            (None, 3)                 33        \n",
      "=================================================================\n",
      "Total params: 83,433\n",
      "Trainable params: 83,433\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "# model = Sequential()\n",
    "# model.add(Dense(100, input_dim=X_train.shape[1], activation='relu')) # hidden layer 1\n",
    "# model.add(Dense(100, activation='relu')) # hidden layer 2\n",
    "# model.add(Dense(50, activation='relu')) # hidden layer 3\n",
    "# model.add(Dense(50, activation='relu')) # hidden layer 3\n",
    "# model.add(Dense(20, activation='relu')) # hidden layer 3\n",
    "# model.add(Dense(20, activation='relu')) # hidden layer 4\n",
    "# model.add(Dense(10, activation='relu')) # hidden layer 4\n",
    "# model.add(Dense(10, activation='relu')) # hidden layer 4\n",
    "# model.add(Dense(3, kernel_initializer='normal', activation='linear')) # output layer\n",
    "\n",
    "# model.compile(loss='mean_absolute_error', optimizer='adam')\n",
    "# model.summary()\n",
    "\n",
    "model = Sequential()\n",
    "model.add(Dense(100, input_dim=X_train.shape[1], activation='relu')) # hidden layer 1\n",
    "model.add(Dense(100, activation='relu')) # hidden layer 2\n",
    "model.add(Dense(90, activation='relu')) # hidden layer 2\n",
    "model.add(Dense(90, activation='relu')) # hidden layer 2\n",
    "model.add(Dense(80, activation='relu')) # hidden layer 2\n",
    "model.add(Dense(80, activation='relu')) # hidden layer 2\n",
    "model.add(Dense(70, activation='relu')) # hidden layer 3\n",
    "model.add(Dense(70, activation='relu')) # hidden layer 3\n",
    "model.add(Dense(60, activation='relu')) # hidden layer 3\n",
    "model.add(Dense(60, activation='relu')) # hidden layer 3\n",
    "model.add(Dense(50, activation='relu')) # hidden layer 3\n",
    "model.add(Dense(50, activation='relu')) # hidden layer 3\n",
    "model.add(Dense(40, activation='relu')) # hidden layer 4\n",
    "model.add(Dense(40, activation='relu')) # hidden layer 4\n",
    "model.add(Dense(30, activation='relu')) # hidden layer 4\n",
    "model.add(Dense(30, activation='relu')) # hidden layer 4\n",
    "model.add(Dense(20, activation='relu')) # hidden layer 4\n",
    "model.add(Dense(20, activation='relu')) # hidden layer 4\n",
    "model.add(Dense(10, activation='relu')) # hidden layer 4\n",
    "model.add(Dense(10, activation='relu')) # hidden layer 4\n",
    "model.add(Dense(3, kernel_initializer='normal', activation='linear')) # output layer\n",
    "\n",
    "model.compile(loss='mean_absolute_error', optimizer='adam')\n",
    "model.summary()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 310,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 3764 samples, validate on 941 samples\n",
      "Epoch 1/100\n",
      "3764/3764 [==============================] - 3s 734us/step - loss: 40.3180 - val_loss: 25.4107\n",
      "Epoch 2/100\n",
      "3764/3764 [==============================] - 1s 162us/step - loss: 24.1792 - val_loss: 23.7923\n",
      "Epoch 3/100\n",
      "3764/3764 [==============================] - 1s 162us/step - loss: 22.0928 - val_loss: 21.3647\n",
      "Epoch 4/100\n",
      "3764/3764 [==============================] - 1s 162us/step - loss: 22.0714 - val_loss: 22.7171\n",
      "Epoch 5/100\n",
      "3764/3764 [==============================] - 1s 163us/step - loss: 20.5529 - val_loss: 19.8051\n",
      "Epoch 6/100\n",
      "3764/3764 [==============================] - 1s 149us/step - loss: 16.6256 - val_loss: 17.2805\n",
      "Epoch 7/100\n",
      "3764/3764 [==============================] - 1s 149us/step - loss: 16.5318 - val_loss: 15.9432\n",
      "Epoch 8/100\n",
      "3764/3764 [==============================] - 1s 161us/step - loss: 16.7737 - val_loss: 17.6721\n",
      "Epoch 9/100\n",
      "3764/3764 [==============================] - 1s 178us/step - loss: 16.6512 - val_loss: 17.0590\n",
      "Epoch 10/100\n",
      "3764/3764 [==============================] - 1s 174us/step - loss: 15.9341 - val_loss: 16.5510\n",
      "Epoch 11/100\n",
      "3764/3764 [==============================] - 1s 177us/step - loss: 16.1103 - val_loss: 17.6789\n",
      "Epoch 12/100\n",
      "3764/3764 [==============================] - 1s 168us/step - loss: 16.2050 - val_loss: 16.9203\n",
      "Epoch 13/100\n",
      "3764/3764 [==============================] - 1s 174us/step - loss: 15.7640 - val_loss: 17.2906\n",
      "Epoch 14/100\n",
      "3764/3764 [==============================] - 1s 168us/step - loss: 15.5917 - val_loss: 18.0822\n",
      "Epoch 15/100\n",
      "3764/3764 [==============================] - 1s 176us/step - loss: 15.1871 - val_loss: 19.1458\n",
      "Epoch 16/100\n",
      "3764/3764 [==============================] - 1s 178us/step - loss: 16.2177 - val_loss: 17.2518\n",
      "Epoch 17/100\n",
      "3764/3764 [==============================] - 1s 169us/step - loss: 14.9612 - val_loss: 17.1395\n",
      "Epoch 18/100\n",
      "3764/3764 [==============================] - 1s 169us/step - loss: 15.1124 - val_loss: 16.6953\n",
      "Epoch 19/100\n",
      "3764/3764 [==============================] - 1s 171us/step - loss: 15.0865 - val_loss: 16.1989\n",
      "Epoch 20/100\n",
      "3764/3764 [==============================] - 1s 168us/step - loss: 15.5371 - val_loss: 15.7065\n",
      "Epoch 21/100\n",
      "3764/3764 [==============================] - 1s 177us/step - loss: 15.2354 - val_loss: 16.3340\n",
      "Epoch 22/100\n",
      "3764/3764 [==============================] - 1s 170us/step - loss: 15.3900 - val_loss: 19.6212\n",
      "Epoch 23/100\n",
      "3764/3764 [==============================] - 1s 171us/step - loss: 15.7235 - val_loss: 17.3506\n",
      "Epoch 24/100\n",
      "3764/3764 [==============================] - 1s 180us/step - loss: 15.1481 - val_loss: 16.1005\n",
      "Epoch 25/100\n",
      "3764/3764 [==============================] - 1s 174us/step - loss: 15.4714 - val_loss: 19.3828\n",
      "Epoch 26/100\n",
      "3764/3764 [==============================] - 1s 162us/step - loss: 15.0835 - val_loss: 15.9475\n",
      "Epoch 27/100\n",
      "3764/3764 [==============================] - 1s 172us/step - loss: 15.4153 - val_loss: 15.6943\n",
      "Epoch 28/100\n",
      "3764/3764 [==============================] - 1s 166us/step - loss: 15.5136 - val_loss: 16.2503\n",
      "Epoch 29/100\n",
      "3764/3764 [==============================] - 1s 168us/step - loss: 15.2410 - val_loss: 16.9706\n",
      "Epoch 30/100\n",
      "3764/3764 [==============================] - 1s 167us/step - loss: 14.4257 - val_loss: 16.1826\n",
      "Epoch 31/100\n",
      "3764/3764 [==============================] - 1s 173us/step - loss: 15.2745 - val_loss: 18.1865\n",
      "Epoch 32/100\n",
      "3764/3764 [==============================] - 1s 164us/step - loss: 15.1805 - val_loss: 16.6748\n",
      "Epoch 33/100\n",
      "3764/3764 [==============================] - 1s 162us/step - loss: 14.9418 - val_loss: 17.0664\n",
      "Epoch 34/100\n",
      "3764/3764 [==============================] - 1s 168us/step - loss: 15.7975 - val_loss: 18.7682\n",
      "Epoch 35/100\n",
      "3764/3764 [==============================] - 1s 164us/step - loss: 15.4077 - val_loss: 16.6966\n",
      "Epoch 36/100\n",
      "3764/3764 [==============================] - 1s 176us/step - loss: 14.9211 - val_loss: 16.1390\n",
      "Epoch 37/100\n",
      "3764/3764 [==============================] - 1s 197us/step - loss: 15.9479 - val_loss: 19.0537\n",
      "Epoch 38/100\n",
      "3764/3764 [==============================] - 1s 169us/step - loss: 15.7274 - val_loss: 16.7975\n",
      "Epoch 39/100\n",
      "3764/3764 [==============================] - 1s 185us/step - loss: 15.0230 - val_loss: 18.0706\n",
      "Epoch 40/100\n",
      "3764/3764 [==============================] - 1s 184us/step - loss: 15.3246 - val_loss: 16.4543\n",
      "Epoch 41/100\n",
      "3764/3764 [==============================] - 1s 176us/step - loss: 15.0312 - val_loss: 17.1214\n",
      "Epoch 42/100\n",
      "3764/3764 [==============================] - 1s 178us/step - loss: 14.8189 - val_loss: 17.5010\n",
      "Epoch 43/100\n",
      "3764/3764 [==============================] - 1s 162us/step - loss: 15.1025 - val_loss: 16.8405\n",
      "Epoch 44/100\n",
      "3764/3764 [==============================] - 1s 161us/step - loss: 14.7964 - val_loss: 16.7813\n",
      "Epoch 45/100\n",
      "3764/3764 [==============================] - 1s 153us/step - loss: 14.8760 - val_loss: 17.3656\n",
      "Epoch 46/100\n",
      "3764/3764 [==============================] - 1s 156us/step - loss: 15.4501 - val_loss: 16.1297\n",
      "Epoch 47/100\n",
      "3764/3764 [==============================] - 1s 162us/step - loss: 14.9467 - val_loss: 15.8008\n",
      "Epoch 48/100\n",
      "3764/3764 [==============================] - 1s 162us/step - loss: 15.5817 - val_loss: 17.1660\n",
      "Epoch 49/100\n",
      "3764/3764 [==============================] - 1s 169us/step - loss: 15.0109 - val_loss: 16.4287\n",
      "Epoch 50/100\n",
      "3764/3764 [==============================] - 1s 167us/step - loss: 15.6192 - val_loss: 15.9190\n",
      "Epoch 51/100\n",
      "3764/3764 [==============================] - 1s 175us/step - loss: 14.7523 - val_loss: 18.4342\n",
      "Epoch 52/100\n",
      "3764/3764 [==============================] - 1s 191us/step - loss: 15.4945 - val_loss: 16.5074\n",
      "Epoch 53/100\n",
      "3764/3764 [==============================] - 1s 200us/step - loss: 15.2032 - val_loss: 17.2902\n",
      "Epoch 54/100\n",
      "3764/3764 [==============================] - 1s 173us/step - loss: 14.8796 - val_loss: 16.4344\n",
      "Epoch 55/100\n",
      "3764/3764 [==============================] - 1s 171us/step - loss: 15.1394 - val_loss: 16.4586\n",
      "Epoch 56/100\n",
      "3764/3764 [==============================] - 1s 163us/step - loss: 14.5710 - val_loss: 18.3940\n",
      "Epoch 57/100\n",
      "3764/3764 [==============================] - 1s 163us/step - loss: 15.0018 - val_loss: 15.5646\n",
      "Epoch 58/100\n",
      "3764/3764 [==============================] - 1s 171us/step - loss: 15.0073 - val_loss: 16.5183\n",
      "Epoch 59/100\n",
      "3764/3764 [==============================] - 1s 159us/step - loss: 15.1872 - val_loss: 19.3908\n",
      "Epoch 60/100\n",
      "3764/3764 [==============================] - 1s 146us/step - loss: 14.7219 - val_loss: 15.4611\n",
      "Epoch 61/100\n",
      "3764/3764 [==============================] - 1s 147us/step - loss: 14.6760 - val_loss: 16.5481\n",
      "Epoch 62/100\n",
      "3764/3764 [==============================] - 1s 150us/step - loss: 15.1323 - val_loss: 16.3189\n",
      "Epoch 63/100\n",
      "3764/3764 [==============================] - 1s 150us/step - loss: 14.5026 - val_loss: 18.2118\n",
      "Epoch 64/100\n",
      "3764/3764 [==============================] - 1s 159us/step - loss: 14.7040 - val_loss: 16.0291\n",
      "Epoch 65/100\n",
      "3764/3764 [==============================] - 1s 167us/step - loss: 15.0483 - val_loss: 16.3999\n",
      "Epoch 66/100\n",
      "3764/3764 [==============================] - 1s 164us/step - loss: 14.6911 - val_loss: 16.0100\n",
      "Epoch 67/100\n",
      "3764/3764 [==============================] - 1s 164us/step - loss: 14.6846 - val_loss: 14.8094\n",
      "Epoch 68/100\n",
      "3764/3764 [==============================] - 1s 164us/step - loss: 14.9568 - val_loss: 15.4795\n",
      "Epoch 69/100\n",
      "3764/3764 [==============================] - 1s 164us/step - loss: 14.4784 - val_loss: 15.6593\n",
      "Epoch 70/100\n",
      "3764/3764 [==============================] - 1s 160us/step - loss: 14.1175 - val_loss: 16.2620\n",
      "Epoch 71/100\n",
      "3764/3764 [==============================] - 1s 161us/step - loss: 14.1800 - val_loss: 15.9714\n",
      "Epoch 72/100\n",
      "3764/3764 [==============================] - 1s 158us/step - loss: 15.0363 - val_loss: 15.7003\n",
      "Epoch 73/100\n",
      "3764/3764 [==============================] - 1s 156us/step - loss: 15.0927 - val_loss: 15.2592\n",
      "Epoch 74/100\n",
      "3764/3764 [==============================] - 1s 147us/step - loss: 14.6168 - val_loss: 16.9237\n",
      "Epoch 75/100\n",
      "3764/3764 [==============================] - 1s 152us/step - loss: 14.3343 - val_loss: 15.9553\n",
      "Epoch 76/100\n",
      "3764/3764 [==============================] - 1s 150us/step - loss: 14.4360 - val_loss: 16.3659\n",
      "Epoch 77/100\n",
      "3764/3764 [==============================] - 1s 149us/step - loss: 14.5705 - val_loss: 17.1711\n",
      "Epoch 78/100\n",
      "3764/3764 [==============================] - 1s 159us/step - loss: 14.4924 - val_loss: 16.2090\n",
      "Epoch 79/100\n",
      "3764/3764 [==============================] - 1s 161us/step - loss: 14.7343 - val_loss: 15.0574\n",
      "Epoch 80/100\n",
      "3764/3764 [==============================] - 1s 160us/step - loss: 14.5772 - val_loss: 17.7985\n",
      "Epoch 81/100\n",
      "3764/3764 [==============================] - 1s 159us/step - loss: 14.3990 - val_loss: 15.6560\n",
      "Epoch 82/100\n",
      "3764/3764 [==============================] - 1s 162us/step - loss: 14.1386 - val_loss: 15.3596\n",
      "Epoch 83/100\n",
      "3764/3764 [==============================] - 1s 168us/step - loss: 14.3596 - val_loss: 19.0101\n",
      "Epoch 84/100\n",
      "3764/3764 [==============================] - 1s 155us/step - loss: 14.7944 - val_loss: 15.4458\n",
      "Epoch 85/100\n",
      "3764/3764 [==============================] - 1s 146us/step - loss: 14.2617 - val_loss: 16.3090\n",
      "Epoch 86/100\n",
      "3764/3764 [==============================] - 1s 153us/step - loss: 14.3113 - val_loss: 16.0983\n",
      "Epoch 87/100\n",
      "3764/3764 [==============================] - 1s 149us/step - loss: 14.0535 - val_loss: 15.7231\n",
      "Epoch 88/100\n",
      "3764/3764 [==============================] - 1s 161us/step - loss: 14.5125 - val_loss: 15.8840\n",
      "Epoch 89/100\n",
      "3764/3764 [==============================] - 1s 156us/step - loss: 13.7305 - val_loss: 16.4480\n",
      "Epoch 90/100\n",
      "3764/3764 [==============================] - 1s 161us/step - loss: 14.4467 - val_loss: 16.9583\n",
      "Epoch 91/100\n",
      "3764/3764 [==============================] - 1s 161us/step - loss: 14.6996 - val_loss: 15.3177\n",
      "Epoch 92/100\n",
      "3764/3764 [==============================] - 1s 160us/step - loss: 14.4070 - val_loss: 15.6067\n",
      "Epoch 93/100\n",
      "3764/3764 [==============================] - 1s 157us/step - loss: 14.4244 - val_loss: 15.3037\n",
      "Epoch 94/100\n",
      "3764/3764 [==============================] - 1s 155us/step - loss: 13.8904 - val_loss: 15.6639\n",
      "Epoch 95/100\n",
      "3764/3764 [==============================] - 1s 159us/step - loss: 13.7488 - val_loss: 14.7496\n",
      "Epoch 96/100\n",
      "3764/3764 [==============================] - 1s 160us/step - loss: 14.8924 - val_loss: 16.2918\n",
      "Epoch 97/100\n",
      "3764/3764 [==============================] - 1s 161us/step - loss: 14.3178 - val_loss: 16.4336\n",
      "Epoch 98/100\n",
      "3764/3764 [==============================] - 1s 160us/step - loss: 14.2701 - val_loss: 15.5918\n",
      "Epoch 99/100\n",
      "3764/3764 [==============================] - 1s 162us/step - loss: 14.4278 - val_loss: 15.9918\n",
      "Epoch 100/100\n",
      "3764/3764 [==============================] - 1s 161us/step - loss: 13.9009 - val_loss: 15.5951\n"
     ]
    }
   ],
   "source": [
    "model_history = model.fit(X_train, y_train, batch_size=32, epochs=100, validation_split=0.2, verbose=1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 311,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x720 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot training progress (via loss func) over epochs\n",
    "fig,ax = plt.subplots(1,1)\n",
    "ax.plot(model_history.epoch,model_history.history['loss'],label='training')\n",
    "ax.plot(model_history.epoch,model_history.history['val_loss'],label='validation')\n",
    "\n",
    "ax.set_xlabel('# of epochs')\n",
    "ax.set_ylabel('Loss')\n",
    "ax.set_title('Training and validation loss of NN as a function of epochs')\n",
    "\n",
    "ax.legend();"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 312,
   "metadata": {},
   "outputs": [],
   "source": [
    "# make predictions\n",
    "y_pred_train = model.predict(X_train)\n",
    "y_pred_test = model.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 313,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ab\n",
      "0.7743722536696551\n",
      "hf\n",
      "0.6067573952164149\n",
      "ir\n",
      "0.7014920307049253\n"
     ]
    }
   ],
   "source": [
    "for k, ang in enumerate(angs):\n",
    "  print(ang)\n",
    "  print(r2_score(y_test.values[:,k],y_pred_test[:,k]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
